<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pervasive.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="F:DDInt.Common.CommonEscape.TIME">
            Implemented via BaseTimestampEscape class.
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.DATE">
            Implemented via BaseTimestampEscape class.
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.TIMESTAMP">
            Implemented via BaseTimestampEscape class.
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.FUNCTION">
            Implemented via BaseFunctionEscape class.
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.OUTER_JOIN">
            Implemented via BaseJoinEscape class.
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_PROCEDURE">
            Implemented via BaseCallEscape class.
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_FUNCTION">
            Implemented via BaseCallEscape class.
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.ESCAPE">
            Implemented via CommonEscapeEscape class.
            {escape 'c'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.EXTENSION">
            Implemented via CommonExtensionEscape class.
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Common.CommonEscape.generator">
            Used to obtain the text of sub-trees.
        </member>
        <member name="F:DDInt.Common.CommonEscape.escapeRoot">
            Records the escape type text.
        </member>
        <member name="M:DDInt.Common.CommonEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
            Constructor.
        </member>
        <member name="F:DDInt.Common.CommonEscapeParameterList.leftmostParameter">
            The leftmost parameter in the escape's parameter list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getParameter(System.Int32)">
             Returns the specified parameter as a String.
            
             @return the specified parameter as a String.
            
             @param parameterIndex - specified as 1-based ordinal.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getAllParameters">
             Returns a comma-separated String of all the parameters in the
             list.
            
             @return - Comma-separated String of all the parameters in the list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.setLeftmostparameter">
            Initialize the leftmost parameter pointer.  It can be null.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.generateText(DDInt.Parser.BaseSQLTreeNode)">
            Generate the text of the parameter or parameter list at the specified
            node.
        </member>
        <member name="P:DDInt.Common.CommonEscapeParameterList.ParameterCount">
             Returns the number of parameters in the parameter list.
            
             @return the number of parameters in the parameter list.
        </member>
        <member name="M:DDInt.Common.CommonCallEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList ...
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList ...
        </member>
        <member name="M:DDInt.Common.CommonConnectionOptions.GetOptionName(System.String)">
            <summary>
            Return the actual option name against this key
            </summary>
            <param name="keyName">Key or Synonym</param>
            <returns>Option Name</returns>
        </member>
        <member name="T:DDInt.Common.CEM">
            <summary>
            The CEM (shorthand for CommonErrorManagement) is a set of static methods
            for raising exceptions through a standard manner.  By using these methods
            to raise exceptions, we can trace all exceptions thrown by the common layer,
            obtain error strings from a resource file and map error conditions to
            the appropriate exception.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonEscapeEscape.getEscapeCharacter">
             Returns the escape character defined in the escape.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral ...
            
             @return the escape character defined in the escape.
        </member>
        <member name="F:DDInt.Common.CommonEscapeTranslator.NO_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <!-- Badly formed XML comment ignored for member "F:DDInt.Common.CommonEscapeTranslator.UNADORN_TRANSLATION_NEEDED" -->
        <member name="F:DDInt.Common.CommonEscapeTranslator.FULL_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateCallEscape(DDInt.Common.CommonCallEscape)">
             Returns translated call escape or null if the escape cannot be
             translated.
            
             @return translated call escape or null if the escape cannot be
             translated.
            
             @param callEscape - call escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateFunctionEscape(DDInt.Common.CommonFunctionEscape)">
             Returns translated function escape or null if the escape cannot be
             translated.
            
             @return translated function escape or null if the escape cannot be
             translated.
            
             @param functionEscape - fn escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateTimestampEscape(DDInt.Common.CommonTimestampEscape)">
             Returns translated t, d, or ts escape or null if the escape cannot
             be translated.
            
             @return translated t, d, or ts  escape or null if the escape cannot
             be translated.
            
             @param timestampEscape - t, d, or ts escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscapeEscape(DDInt.Common.CommonEscapeEscape)">
             Returns translated escape escape or null if the escape cannot
             be translated.
            
             @return translated escape escape or null if the escape cannot
             be translated.
            
             @param escapeEscape - escape escape semantic information
             obtained from the parse
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.getTranslationNeeded(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeFromClause(DDInt.Common.CommonJoinEscape)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.insertOuterJoinOperator(System.Text.StringBuilder,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeWhereClause(DDInt.Common.CommonJoinEscape,System.String)" -->
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscape(DDInt.Parser.BaseSQLTreeNode,System.String)">
             Oversees the m_translation of the escape.
            
             @param escapeSemantics - semantic information obtained from the parse.
             @param currentWhere - where clause associated with the escape.  Is null if doesn't exist.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getTranslation">
             Returns the translated escape.
            
             @return Returns the translated escape.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getNewWhere">
             Returns Updated WHERE clause or null if WHERE clause hasn't changed.
            
             @return Updated WHERE clause or null if WHERE clause hasn't changed.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateExtensionEscape(DDInt.Common.CommonExtensionEscape)">
             Returns translated extension escape or null if the escape cannot
             be translated.
            
             @return translated extension escape or null if the escape cannot
             be translated.
            
             @param extensionEscape - extension escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonExtensionEscape.validateExtensionName(System.String)">
             Determines if the value specified is a valid extension.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.NONE">
            Scalar function types.  These match the indexes of the scalar function
            names found in scalarFunctionNames.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.scalarFunctionNames">
             Valid scalar function names.
            
             Each function name's index doubles as the BaseSQLTreeNode operator.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.validateScalarFunctionName(System.String)">
             Determines if the value specified is a valid scalar function.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList ...
        </member>
        <member name="P:DDInt.Common.CommonFunctionEscape.FunctionText">
             Returns the function text w/o the escape adorning.  For example,
             returns "UCASE (NAME)" instead of "{fn UCASE (NAME)}".
            
             @return the function text w/o the escape adorning.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.NODE_RIGHT_OUTER_JOIN_OP">
            Join operator values.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojRoot">
            OJ root node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojCursor">
            Current outer join position node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.trCursor">
            Current table reference postion node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.joinOperator">
            Join operator or BaseSQLTreeNode.NODE_UNKNOWN if there are
            no more outer joins to enumeratre.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentSearchConditionNode">
            The value of the currently traversed search condition clause.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentTableNameNode">
            Table name from enumerated table reference.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstOuterJoinRequest">
            True if getNextOuterJoin () has been called before; false, otherwise.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstTableReferenceRequest">
            True if getNextTableReference () has been called before; false,
            otherwise.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextOuterJoin" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextTableReference" -->
        <member name="M:DDInt.Common.CommonJoinEscape.isJoinOperator(System.Int32)">
             Returns true if the specified operator is an outer join operator;
             false, otherwise.
            
             @return true if the specified operator is an outer join operator;
             false, otherwise.
            
             @param op - operator being tested.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentSearchCondition">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentJoinOperator">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentTableName">
             Returns the table name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the table name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentCorrelationName">
             Returns the correlation name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the correlation name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="T:Pervasive.Data.Common.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BAD_CONNECTION">
            <summary>
              Looks up a localized string similar to Connection must be valid and open.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BAD_FIELD_OFFSET">
            <summary>
              Looks up a localized string similar to Field offset is greater than length..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_ABORTED">
            <summary>
              Looks up a localized string similar to The bulk copy operation has been aborted..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_CONFLICTING_TRANSACTION_OPTION">
            <summary>
              Looks up a localized string similar to Must not specify the BulkCopyOption UseInternalTransaction and pass an external Transaction at the same time..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_CONVERSION_FAILED">
            <summary>
              Looks up a localized string similar to The bulk copy operation has failed due to a conversion error between a source column value and destination column value..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_IN_PROGRESS_CHANGES_PROHIBITED">
            <summary>
              Looks up a localized string similar to A ColumnMappingCollection cannot be changed during the execution of a bulk copy operation..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_INVALID_DESTINATION_TABLE">
            <summary>
              Looks up a localized string similar to Cannot access destination table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_NON_UNIFORM_COLUMN_MAPPING_COLLECTION">
            <summary>
              Looks up a localized string similar to The mappings in a ColumnMappingCollection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_ROW_LIMIT_EXCEEDED">
             <summary>
               Looks up a localized string similar to This DataDirect Connect for ADO.NET Bulk Load feature you are attempting to use is an Evaluation copy. The Bulk Load row count limit has been exceeded. If you would like to license a provider to remove this limit, please contact DataDirect Technologies.  USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930 
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or Tel: +32 15 30 77 00
            France: Toll-free [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_COPY_UNDEFINED_COLUMN_MAPPING">
            <summary>
              Looks up a localized string similar to A ColumnMapping must define a source and destination column..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.BULK_SOURCE_COLUMN_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The given ColumnName &apos;{0}&apos; does not match up with any column in data source..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_CHANGE_CURRENTUSER">
            <summary>
              Looks up a localized string similar to Changing the &apos;CurrentUser&apos; requires the Reauthentication Enabled connection option be set to true.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_GENERATE_COMMAND">
            <summary>
              Looks up a localized string similar to command object is not suitable for command generation..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_GENERATE_DELETE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_GENERATE_UPDATE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_GENERATE_UPDATE2">
            <summary>
              Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any modifiable columns..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_SPECIFY_OPTION_AGAIN">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option or its alias cannot be specified more than once in a connection string..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_UPDATE_JOIN">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation is not supported against multiple base tables.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CANNOT_USE_ARRAY_BINDING">
            <summary>
              Looks up a localized string similar to Only ExecuteNonQuery can use parameter array binding..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_Advanced">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_BulkLoad">
            <summary>
              Looks up a localized string similar to Bulk Load.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_ClientMonitoring">
            <summary>
              Looks up a localized string similar to Client Monitoring.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_ConnectionPooling">
            <summary>
              Looks up a localized string similar to Connection Pooling.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_Failover">
            <summary>
              Looks up a localized string similar to Failover.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_Performance">
            <summary>
              Looks up a localized string similar to Performance.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_SchemaInformation">
            <summary>
              Looks up a localized string similar to Schema Information.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_Security">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_StandardConnection">
            <summary>
              Looks up a localized string similar to Standard Connection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Category_Tracing">
            <summary>
              Looks up a localized string similar to Tracing.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CMDTXT_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to CommandText property has not been initialized..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_INDEX_INT32">
            <summary>
              Looks up a localized string similar to Invalid index {0} for this {1} with Count={2}..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_INDEX_STRING">
             <summary>
               Looks up a localized string similar to An {0} with {1} &apos;{2}&apos; is not contained by this {3}.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_INVALID_TYPE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects, not {2} objects..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_IS_NOT_PARENT">
             <summary>
               Looks up a localized string similar to The {0} is already contained by another {1}.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_IS_PARENT">
             <summary>
               Looks up a localized string similar to The {0} with is already contained by this {1}.
            .
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_NULL_VALUE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_REMOVE_INVALID_OBJECT">
            <summary>
              Looks up a localized string similar to Attempted to remove an {0} that is not contained by this {1}..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLLECTION_TIMED_OUT">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because the execution of the command timed out.  The &apos;Schema Collection Timeout&apos; connect option may need to be increased..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.COLUMN_INDEX_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find specified column in results.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_ALREADY_OPEN">
            <summary>
              Looks up a localized string similar to The connection is already Open (state=Open)..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_POOL_TIMEOUT">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_REQUIRED">
            <summary>
              Looks up a localized string similar to Operation requires connection object in SELECT command..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_REQUIRED_TO_DERIVE_PARAMS">
            <summary>
              Looks up a localized string similar to The DeriveParameters method requires that the given command object references an open connection..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_STATE_CLOSED">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is closed..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_STATE_OPEN">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is open..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONNECTION_STRING_SYNTAX">
            <summary>
              Looks up a localized string similar to Format of the initialization string does not conform to specification starting at index {0}..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CONSTR_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to The ConnectionString property has not been initialized..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CPU_COUNT_VIOLATION">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of DataDirect Connect for ADO.NET which may run on systems that  include up to {0} processors.  The current system is configured with {1} processors.  The 15 day grace period has expired – please contact DataDirect Technologies to upgrade this license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or T [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CPU_COUNT_WARN">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of DataDirect Connect for ADO.NET which may run on systems that include up to {0} processors.  The current system is configured with {1} processors.  Please contact DataDirect within the next 15 days to upgrade the license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or Tel: +32 15 30 77 00
            France:  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.CROSS_PROVIDER_BULK_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to Cross provider bulk load is not supported..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.DATA_READER_IS_CLOSED">
            <summary>
              Looks up a localized string similar to Invalid attempt to {0} when reader is closed..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.DATA_READER_NO_DATA">
            <summary>
              Looks up a localized string similar to No data exists for the row or column..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_AlternateServers">
            <summary>
              Looks up a localized string similar to A list of database servers to which the data provider will try to connect if the primary database server is unavailable..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_BulkLoadProtocol">
            <summary>
              Looks up a localized string similar to Specifies the Bulk Load Protocol to be used..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_CommonWorkArounds">
            <summary>
              Looks up a localized string similar to Use this field only when instructed by DataDirect Technical Support..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ConnectionReset">
            <summary>
              Looks up a localized string similar to When true, the connection state is reset when the connection is removed from the connection pool..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ConnectionRetryCount">
            <summary>
              Looks up a localized string similar to The number of times the data provider tries to connect to the primary server, and, if specified, the alternate servers after the initial unsuccessful attempt..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ConnectionRetryDelay">
            <summary>
              Looks up a localized string similar to The number of seconds the data provider waits after the initial unsuccessful connection attempt before retrying a connection to the primary server, and, if specified, the alternate servers..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ConnectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted connection to the server will fail if not yet connected..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_DefaultSchemaRestriction">
            <summary>
              Looks up a localized string similar to The default value to use when the Schema restriction is omitted from GetSchema calls.  The initial default is an empty string (no restriction)..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_EnableTrace">
            <summary>
              Looks up a localized string similar to When set to 1 or higher, enables tracing. When set to 0, tracing is disabled..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_Enlist">
            <summary>
              Looks up a localized string similar to When true, the data provider automatically attempts to enlist the connection in creating the thread&apos;s current transaction context..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_GssClient">
            <summary>
              Looks up a localized string similar to Specifies which GSS client library the provider should use to communicate with the Key Distribution Center (KDC) when authentication in a MIT Kerberos environment.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_HostNameInCertificate">
            <summary>
              Looks up a localized string similar to Defines the host name in the certificate used as part of the SSL Server Certificate validation..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_InitialCommandTimeout">
            <summary>
              Looks up a localized string similar to The initial (default) CommandTimeout for commands that use this connection.  Setting the CommandTimeout property on the command will override this option..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_LicensePath">
            <summary>
              Looks up a localized string similar to The fully qualified path to the DDTek.lic license file..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_LoadBalanceTimeout">
            <summary>
              Looks up a localized string similar to The time (from 1 to 65535 seconds, or 0 for unlimited time) to keep connections in a connection pool. .
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_LoadBalancing">
            <summary>
              Looks up a localized string similar to When true, client load balancing is used in attempts to connect to primary and alternate database servers..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_MaxPoolSize">
            <summary>
              Looks up a localized string similar to The maximum number of connections within a single pool..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_MaxStatementCacheSize">
            <summary>
              Looks up a localized string similar to The Max Statement Cache Size limits the size of the statement cache.  The default is 10.  Setting this size to 0 will disable the statement cache..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_MinPoolSize">
            <summary>
              Looks up a localized string similar to The minimum number of connections that are opened and placed in a connection pool when it is created..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ParameterMode">
            <summary>
              Looks up a localized string similar to When set to ANSI, &apos;?&apos; are processed as Parameter Markers and bound ordinally. When set to BindByOrdinal, native parameters markers are used and bound ordinally. When set to BindByName, native parameter markers are used and bound by name..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_PersistSecurityInfo">
            <summary>
              Looks up a localized string similar to When true, secure information is displayed in clear text in the ConnectionString property of the Connection object..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_Pooling">
            <summary>
              Looks up a localized string similar to When true, connections are pooled..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ReauthenticationEnabled">
            <summary>
              Looks up a localized string similar to Specifies if a provider may Reauthenticate.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_SchemaCollectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted schema collection operation to the server will fail if not yet completed..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_SchemaOptions">
            <summary>
              Looks up a localized string similar to Specifies a schema option that influences how a provider returns schema meta data..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_StatementCacheMode">
            <summary>
              Looks up a localized string similar to The Statement Cache Mode controls the behavior of the statement cache.  By default the statements will only be cached when the command is explicity set.  This mode can be changed to automatically cache statements..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_SynchronizeConnection">
            <summary>
              Looks up a localized string similar to Specifies whether synchronization on the connection is required.  Typically, this is not required.  This is normally only needed if a connection is being shared across multiple threads.  The default is false..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ThrottleCollectionsData">
            <summary>
              Looks up a localized string similar to Specifies whether a provider returns very large collection meta data..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_TraceFile">
            <summary>
              Looks up a localized string similar to The path and name of the trace file..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_TransactionTimeout">
            <summary>
              Looks up a localized string similar to Controls the length of time the provider will wait when committing or rolling back a transaction.  0 implies the provider should not timeout.  Any positive integer represents the number of seconds the provider should wait before timing out.  -1, the default, implies the the provider will use the connection timeout setting..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_UseCurrentSchema">
            <summary>
              Looks up a localized string similar to Indicates whether the schema collections should automatically restrict using the current schema when the schema restriction is omitted..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.Description_ValidateServerCertificate">
            <summary>
              Looks up a localized string similar to Specifies whether the server certificate is verified as valid according to a Certificate Authority..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.EMPTY_DATABASE_NAME">
            <summary>
              Looks up a localized string similar to Database cannot be null, the empty string, or string of only whitespace..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.ENLIST_FAILED">
            <summary>
              Looks up a localized string similar to Error occured when enlisting connection in distributed transaction..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_ERROR">
            <summary>
              Looks up a localized string similar to Security Services Error: {0}.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_APPL_EXPIRED">
            <summary>
              Looks up a localized string similar to This application has expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_BAD_ENCTYPE">
            <summary>
              Looks up a localized string similar to Bad encryption type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_BAD_KEYSIZE">
            <summary>
              Looks up a localized string similar to Key size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_BAD_MSIZE">
            <summary>
              Looks up a localized string similar to Message size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_BADMSGTYPE">
            <summary>
              Looks up a localized string similar to Invalid message type specified for encoding.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_BADNAME">
            <summary>
              Looks up a localized string similar to Credential cache name malformed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_END">
            <summary>
              Looks up a localized string similar to End of credential cache reached.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in credentials cache.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_IO">
            <summary>
              Looks up a localized string similar to Credentials cache I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_NOMEM">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in credentials cache code).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_NOTFOUND">
            <summary>
              Looks up a localized string similar to Matching credential not found.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Credentials cache type is already registered..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown credential cache type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CC_WRITE">
            <summary>
              Looks up a localized string similar to Error writing to credentials cache.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported credentials cache format version number.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CHPW_FAIL">
            <summary>
              Looks up a localized string similar to Password change failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CHPW_PWDNULL">
            <summary>
              Looks up a localized string similar to New password cannot be zero length.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CONFIG_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of Kerberos configuration file.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CONFIG_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find Kerberos configuration file.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CONFIG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to No supported encryption types (config file error?).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CONFIG_NODEFREALM">
            <summary>
              Looks up a localized string similar to Configuration file does not specify default realm.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CONFIG_NOTENUFSPACE">
            <summary>
              Looks up a localized string similar to Insufficient space to return complete information.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_CRYPTO_INTERNAL">
            <summary>
              Looks up a localized string similar to Cryptosystem internal error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_EAI_FAIL">
            <summary>
              Looks up a localized string similar to unknown getaddrinfo failure.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_EAI_NODATA">
            <summary>
              Looks up a localized string similar to no data available for host/domain name.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_EAI_NONAME">
            <summary>
              Looks up a localized string similar to host/domain name not found.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_EAI_SERVICE">
            <summary>
              Looks up a localized string similar to service name unknown.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_ERR_BAD_HOSTNAME">
            <summary>
              Looks up a localized string similar to Hostname cannot be canonicalized.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_ERR_HOST_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot determine realm for host.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_ERR_NUMERIC_REALM">
            <summary>
              Looks up a localized string similar to Cannot determine realm for numeric host address.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_ERR_RCSID">
            <summary>
              Looks up a localized string similar to (RCS Id string for the krb5 error table).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_FCC_INTERNAL">
            <summary>
              Looks up a localized string similar to Internal credentials cache error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_FCC_NOFILE">
            <summary>
              Looks up a localized string similar to No credentials cache found.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_FCC_PERM">
            <summary>
              Looks up a localized string similar to Credentials cache file permissions incorrect.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_FWD_BAD_PRINCIPAL">
            <summary>
              Looks up a localized string similar to Bad principal name while trying to forward credentials.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_GET_IN_TKT_LOOP">
            <summary>
              Looks up a localized string similar to Looping detected inside krb5_get_in_tkt.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_IN_TKT_REALM_MISMATCH">
            <summary>
              Looks up a localized string similar to Client/server realm mismatch in initial ticket request.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_INVALID_FLAGS">
            <summary>
              Looks up a localized string similar to Invalid KDC option combination (library internal error) [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KDC_UNREACH">
            <summary>
              Looks up a localized string similar to Cannot contact any KDC for requested realm.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KDCREP_MODIFIED">
            <summary>
              Looks up a localized string similar to KDC reply did not match expectations.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KDCREP_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great in KDC reply.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KEYTAB_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported key table format version number.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_BADNAME">
            <summary>
              Looks up a localized string similar to Key table name malformed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_END">
            <summary>
              Looks up a localized string similar to End of key table reached.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in keytab.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_IOERR">
            <summary>
              Looks up a localized string similar to Error writing to key table.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_KVNONOTFOUND">
            <summary>
              Looks up a localized string similar to Key version number for principal in key table is incorrect.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_NAME_TOOLONG">
            <summary>
              Looks up a localized string similar to Keytab name too long.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_NOTFOUND">
            <summary>
              Looks up a localized string similar to Key table entry not found.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_NOWRITE">
            <summary>
              Looks up a localized string similar to Cannot write to specified key table.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Key table type is already registered..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_KT_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown Key table type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LIB_EXPIRED">
            <summary>
              Looks up a localized string similar to This Krb5 library has expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LIBOS_BADLOCKFLAG">
            <summary>
              Looks up a localized string similar to Invalid flag for file lock mode.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LIBOS_BADPWDMATCH">
            <summary>
              Looks up a localized string similar to Password mismatch.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LIBOS_CANTREADPWD">
            <summary>
              Looks up a localized string similar to Cannot read password.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LIBOS_PWDINTR">
            <summary>
              Looks up a localized string similar to Password read interrupted.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LNAME_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of translation database entry.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LNAME_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find lname translation database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_LNAME_NOTRANS">
            <summary>
              Looks up a localized string similar to No translation available for requested principal.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_MUTUAL_FAILED">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NO_2ND_TKT">
            <summary>
              Looks up a localized string similar to Request missing second ticket [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NO_LOCALNAME">
            <summary>
              Looks up a localized string similar to No local name found for principal name.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NO_TKT_IN_RLM">
            <summary>
              Looks up a localized string similar to Cannot find ticket for requested realm.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NO_TKT_SUPPLIED">
            <summary>
              Looks up a localized string similar to Request did not supply a ticket.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NOCREDS_SUPPLIED">
            <summary>
              Looks up a localized string similar to No credentials supplied to library routine.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_NOPERM_ETYPE">
            <summary>
              Looks up a localized string similar to Encryption type not permitted.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_OBSOLETE_FN">
            <summary>
              Looks up a localized string similar to Program called an obsolete, deleted function.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PARSE_ILLCHAR">
            <summary>
              Looks up a localized string similar to Illegal character in component name.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PARSE_MALFORMED">
            <summary>
              Looks up a localized string similar to Malformed representation of principal.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PREAUTH_BAD_TYPE">
            <summary>
              Looks up a localized string similar to Unsupported preauthentication type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Generic preauthentication failure.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PREAUTH_NO_KEY">
            <summary>
              Looks up a localized string similar to Required preauthentication key not supplied.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PRINC_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested principal and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PROG_ATYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for address type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PROG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for encryption type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PROG_KEYTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for key type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_PROG_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for checksum type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO">
            <summary>
              Looks up a localized string similar to Replay I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_EOF">
            <summary>
              Looks up a localized string similar to End-of-file on replay cache I/O.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_IO">
            <summary>
              Looks up a localized string similar to I/O error in replay cache i/o code.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache I/O code).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_PERM">
            <summary>
              Looks up a localized string similar to Permission denied in replay cache code.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_SPACE">
            <summary>
              Looks up a localized string similar to Insufficient system space to store replay information.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_IO_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC/IO error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache code).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_NOIO">
            <summary>
              Looks up a localized string similar to Replay cache type does not support non-volatile storage.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_PARSE">
            <summary>
              Looks up a localized string similar to Replay cache name parse/format error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_REPLAY">
            <summary>
              Looks up a localized string similar to Message is a replay.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_REQUIRED">
            <summary>
              Looks up a localized string similar to Message replay detection requires rcache parameter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Replay cache type is already registered.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_TYPE_NOTFOUND">
            <summary>
              Looks up a localized string similar to Replay cache type is unknown.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RC_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_RCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported replay cache format version number.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_REALM_CANT_RESOLVE">
            <summary>
              Looks up a localized string similar to Cannot resolve KDC for requested realm.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot find KDC for requested realm.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SAM_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to Bad SAM flags in obtain_sam_padata.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAPPLVERS">
            <summary>
              Looks up a localized string similar to Bad application version was sent (via sendauth).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAUTHVERS">
            <summary>
              Looks up a localized string similar to Bad sendauth version was sent.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADRESPONSE">
            <summary>
              Looks up a localized string similar to Bad response (during sendauth exchange).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SENDAUTH_REJECTED">
            <summary>
              Looks up a localized string similar to Server rejected authentication (during sendauth exchange).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SERVICE_UNKNOWN">
            <summary>
              Looks up a localized string similar to Kerberos service unknown.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_SNAME_UNSUPP_NAMETYPE">
            <summary>
              Looks up a localized string similar to Conversion to service principal undefined for name type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_TKT_NOT_FORWARDABLE">
            <summary>
              Looks up a localized string similar to Requesting ticket can&apos;t get forwardable tickets.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_TRANS_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of realm translation file.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_TRANS_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find realm translation file.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5_WRONG_ETYPE">
            <summary>
              Looks up a localized string similar to Requested encryption type not used in message.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5DES_BAD_KEYPAR">
            <summary>
              Looks up a localized string similar to DES key has bad parity.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5DES_WEAK_KEY">
            <summary>
              Looks up a localized string similar to DES key is a weak key.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_BAD_PVNO">
            <summary>
              Looks up a localized string similar to Requested protocol version not supported.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_BADOPTION">
            <summary>
              Looks up a localized string similar to KDC can&apos;t fulfill requested option.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_C_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Client&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Client not found in Kerberos database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_CANNOT_POSTDATE">
            <summary>
              Looks up a localized string similar to Ticket is ineligible for postdating.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_NOTYET">
            <summary>
              Looks up a localized string similar to Client not yet valid - try again later.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_REVOKED">
            <summary>
              Looks up a localized string similar to Clients credentials have been revoked.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for encryption type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_KEY_EXP">
            <summary>
              Looks up a localized string similar to Password has expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_NAME_EXP">
            <summary>
              Looks up a localized string similar to Client&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_NEVER_VALID">
            <summary>
              Looks up a localized string similar to Requested effective lifetime is negative or too short.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_NULL_KEY">
            <summary>
              Looks up a localized string similar to Client or server has a null key.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_PADATA_TYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for padata type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_POLICY">
            <summary>
              Looks up a localized string similar to KDC policy rejects request.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Preauthentication failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_REQUIRED">
            <summary>
              Looks up a localized string similar to Additional pre-authentication required.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE">
            <summary>
              Looks up a localized string similar to Principal has multiple entries in Kerberos database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_S_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Server&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Server not found in Kerberos database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVER_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested server and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_EXP">
            <summary>
              Looks up a localized string similar to Server&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_NOTYET">
            <summary>
              Looks up a localized string similar to Server not yet valid - try again later.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_REVOKED">
            <summary>
              Looks up a localized string similar to Credentials for server have been revoked.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for checksum type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_TGT_REVOKED">
            <summary>
              Looks up a localized string similar to TGT has been revoked.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KDC_ERR_TRTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for transited type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BAD_INTEGRITY">
            <summary>
              Looks up a localized string similar to Decrypt integrity check failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADADDR">
            <summary>
              Looks up a localized string similar to Incorrect net address.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADDIRECTION">
            <summary>
              Looks up a localized string similar to Incorrect message direction.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADKEYVER">
            <summary>
              Looks up a localized string similar to Key version is not available.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADMATCH">
            <summary>
              Looks up a localized string similar to Ticket/authenticator don&apos;t match.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADORDER">
            <summary>
              Looks up a localized string similar to Message out of order.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADSEQ">
            <summary>
              Looks up a localized string similar to Incorrect sequence number in message.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADVERSION">
            <summary>
              Looks up a localized string similar to Protocol version mismatch.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_ILL_CR_TKT">
            <summary>
              Looks up a localized string similar to Illegal cross-realm ticket.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_INAPP_CKSUM">
            <summary>
              Looks up a localized string similar to Inappropriate type of checksum in message.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_METHOD">
            <summary>
              Looks up a localized string similar to Alternative authentication method required.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MODIFIED">
            <summary>
              Looks up a localized string similar to Message stream modified.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MSG_TYPE">
            <summary>
              Looks up a localized string similar to Invalid message type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MUT_FAIL">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOKEY">
            <summary>
              Looks up a localized string similar to Service key not available.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOT_US">
            <summary>
              Looks up a localized string similar to The ticket isn&apos;t for us.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_REPEAT">
            <summary>
              Looks up a localized string similar to Request is a replay.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_EXPIRED">
            <summary>
              Looks up a localized string similar to Ticket expired.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_INVALID">
            <summary>
              Looks up a localized string similar to Ticket has invalid flag set.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_NYV">
            <summary>
              Looks up a localized string similar to Ticket not yet valid.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_V4_REPLY">
            <summary>
              Looks up a localized string similar to Initial Ticket response appears to be Version 4 error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_PATH_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to Policy rejects transited path.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_AP_WRONG_PRINC">
            <summary>
              Looks up a localized string similar to Wrong principal in request.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_ERR_FIELD_TOOLONG">
            <summary>
              Looks up a localized string similar to Field is too long for this implementation.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_ERR_GENERIC">
            <summary>
              Looks up a localized string similar to Generic error (see e-text).
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.GSS_KRB5KRB_ERR_RESPONSE_TOO_BIG">
            <summary>
              Looks up a localized string similar to Response too big for UDP, retry with TCP.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.HELPER_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The {0} assembly with assembly version number of {1} failed to load.  .
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_COLUMN_INDEX">
            <summary>
              Looks up a localized string similar to The index specified must non-negative and less than the number of columns in the reader..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_CONNECTION_OPTION_VALUE">
            <summary>
              Looks up a localized string similar to Invalid value for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_ENUMERATION_VALUE">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is invalid..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_MIN_MAX_POOL_SIZE_VALUES">
            <summary>
              Looks up a localized string similar to Invalid min or max pool size values, min pool size cannot be greater than the max pool size..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_OFFSET_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Offset value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_PARAMETER_DBTYPE">
            <summary>
              Looks up a localized string similar to Invalid parameter DbType..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_PARAMETER_DIRECTION">
            <summary>
              Looks up a localized string similar to Invalid parameter direction..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_PARAMETER_SIZE">
            <summary>
              Looks up a localized string similar to Invalid parameter size..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_PARAMETER_SOURCE">
            <summary>
              Looks up a localized string similar to Invalid parameter source..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.INVALID_SIZE_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Size value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.KEYWORD_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Keyword not supported: {0}..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.MISSING_RESTRICTION_DEFAULT">
            <summary>
              Looks up a localized string similar to Missing restriction default..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.MUTUALLY_EXCLUSIVE_OPTIONS">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option and the &apos;{1}&apos; option cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NAMED_PARAMETER_MARKER_MISMATCH">
            <summary>
              Looks up a localized string similar to Named parameter marker mismatch. Cannot match named parameter marker {0} within the Parameter collection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NEED_ADAPTER">
            <summary>
              Looks up a localized string similar to The DataAdapter.SelectCommand property needs to be initialized..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NO_DTC_INSTALLATION">
            <summary>
              Looks up a localized string similar to The optional DTC support components cannot be located.  Please make sure you have installed them and that they are on your path.  See the product documentation for more details..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NO_DTC_LICENSE">
            <summary>
              Looks up a localized string similar to The DataDirect ADO.NET Data Provider you are attempting to use is not licensed for use in Distributed Transactions.  A Server license is required for this feature.  If you would like to purchase a Server license, please call 800-876-3101 or visit DataDirect at www.DataDirect-Technologies.com..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NO_DTC_SUPPORT_PLATFORM">
            <summary>
              Looks up a localized string similar to The DTC is only supported on Windows 2000 or later..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NO_DTC_TRANSACTION">
            <summary>
              Looks up a localized string similar to Not in distributed transaction..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.NO_PARALLEL_TRANSACTIONS">
            <summary>
              Looks up a localized string similar to Parallel transactions not supported..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.OBJECT_DISPOSED">
            <summary>
              Looks up a localized string similar to Cannot use a disposed object..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.ODBC_CALL_ESCAPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to ODBC CALL escape is not supported..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.OPEN_CONNECTION_PROPERTY_SET">
            <summary>
              Looks up a localized string similar to Not allowed to change the &apos;{0}&apos; property. {1}.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.PREPARE_REQUIRES_PARAM_SIZE">
            <summary>
              Looks up a localized string similar to Prepare method requires all variable length parameters to have an explicitly set non-zero Size..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.PREPARE_REQUIRES_PARAM_TYPE">
            <summary>
              Looks up a localized string similar to Prepare method requires all parameters to have an explicitly set type..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.QUERY_FAILED">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because execution of the command failed with the following error: {1}.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.READER_ALREADY_ACTIVE_FOR_CONNECTION">
            <summary>
              Looks up a localized string similar to A data reader is already active for this connection..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.READER_NOT_ON_ROW">
            <summary>
              Looks up a localized string similar to Operation not supported when reader is not positioned to a row..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.READER_OPEN">
            <summary>
              Looks up a localized string similar to A DataReader object is already open for this command..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.REQUIRED_ARGUMENT_WAS_NULL">
            <summary>
              Looks up a localized string similar to A required argument was null..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.REQUIRED_RESTRICTION_NOT_SPECIFIED">
            <summary>
              Looks up a localized string similar to The required restriction, {0}, was not specified..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.SUPERSEDED_OPTIONS_CANT_COEXIST">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option has been superseded by the &apos;{1}&apos; option. They cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TOO_MANY_RESTRICTIONS">
            <summary>
              Looks up a localized string similar to More restrictions were provided than the requested schema (&apos;{0}&apos;) supports..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TRANSACTION_CONNECTION_MISMATCH">
            <summary>
              Looks up a localized string similar to The transaction object for this command does not match the connection object for this command..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TRANSACTION_PRESENT">
            <summary>
              Looks up a localized string similar to Cannot enlist in the distributed transaction because an existing transaction is in progress on the connection.  Finish existing transaction and retry..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TRANSACTION_REQURED">
             <summary>
               Looks up a localized string similar to Execute requires the command to have a
            transaction object when the connection assigned to the command is in a
            pending local transaction.  The Transaction property of the command has
            not been initialized..
             </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TRANSACTION_ZOMBIED">
            <summary>
              Looks up a localized string similar to Operation invalid on a inactive transaction object..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.TXN_NOT_ACTIVE">
            <summary>
              Looks up a localized string similar to Transaction already commited or rolled back..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UNDEFINED_COLLECTION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not defined..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UNSUPPORTED_PARAMETER_MODE">
            <summary>
              Looks up a localized string similar to Unsupported Parameter Mode. Uses are restricted to ANSI, BindByOrdinal or BindByName.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UNSUPPORTED_VERSION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not supported by this version of the provider..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_BINDINGS">
            <summary>
              Looks up a localized string similar to Incorrect channel bindings were supplied..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_MECH">
            <summary>
              Looks up a localized string similar to The requested mechanism is unavailable..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_NAME">
            <summary>
              Looks up a localized string similar to An invalid name was supplied..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_NAMETYPE">
            <summary>
              Looks up a localized string similar to A supplied name was of an unsupported type..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_QOP">
            <summary>
              Looks up a localized string similar to The requested quality of protection could not be provided by the context..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_SIG">
            <summary>
              Looks up a localized string similar to A token had an invalid MIC..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BAD_STATUS">
            <summary>
              Looks up a localized string similar to An invalid status code was supplied..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_BUFFER_OVERFLOW">
            <summary>
              Looks up a localized string similar to Output buffer overflow.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_CONTEXT_EXPIRED">
            <summary>
              Looks up a localized string similar to The context has already expired..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_CREDENTIALS_EXPIRED">
            <summary>
              Looks up a localized string similar to The credentials could not be acquired because they have expired..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_DEFECTIVE_CREDENTIAL">
            <summary>
              Looks up a localized string similar to The referenced credentials were invalid..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_DEFECTIVE_TOKEN">
            <summary>
              Looks up a localized string similar to Consistency checks on input token failed..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_DUPLICATE_ELEMENT">
            <summary>
              Looks up a localized string similar to The requested credential element already exists..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_FAILURE">
            <summary>
              Looks up a localized string similar to Unspecified error at the GSS layer..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_NAME_NOT_MN">
            <summary>
              Looks up a localized string similar to The provided name was not a mechanism name..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_NO_CONTEXT">
            <summary>
              Looks up a localized string similar to No context has been established..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_NO_CRED">
            <summary>
              Looks up a localized string similar to No credentials were found for the specified name..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_NO_SERVICE_PRINCIPLE">
            <summary>
              Looks up a localized string similar to No Service Principle Name.
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_UNAUTHORIZED">
            <summary>
              Looks up a localized string similar to The operation is forbidden by local security policy..
            </summary>
        </member>
        <member name="P:Pervasive.Data.Common.CommonStrings.UT_GSS_UNAVAILABLE">
            <summary>
              Looks up a localized string similar to The operation is unavailable..
            </summary>
        </member>
        <member name="F:DDInt.Common.CommonTimestampEscape.m_value">
            Time/date/timestamp value.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral ...
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.validateValue">
            Validate the time/date/timestamp value, since the parser only
            recognizes a string literal.  The contents of the string literal
            were not checked.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getYear">
             Returns the year (yyyy) value for the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the year value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMonth">
             Returns the month (mm) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the month value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDay">
             Returns the day (dd) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the day value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getHour">
             Returns the hour (hh) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the hour value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMinutes">
             Returns the minutes (mm) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the minutes value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getSeconds">
             Returns the seconds (ss) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the seconds value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonTimestampEscape.getSecondsFraction" -->
        <member name="M:DDInt.Common.CommonTimestampEscape.getTimestamp">
             Returns the timestamp value in the ODBC format
             (yyyy-mm-dd hh:mm:ss[.f...]).
            
             @return the timestamp value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getTime">
             Returns the time value in the ODBC format (hh:mm:ss[.f...]).
            
             @return the time value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDate">
             Returns the date value in the ODBC format (yyyy-mm-dd).
            
             @return the date value in the ODBC format.
        </member>
        <member name="T:DDInt.Common.CommonTrace">
            <summary>
            The Connect for .NET Provider supports tracing through the CommonTrace class.
            The provider can trace all of its method calls and the returns from those
            method calls to a trace file specified by the user.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.SetEnableTrace(System.Int32)">
            <summary>
            The EnableTrace() property enables tracing. The default is 0 (disabled).
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.DumpFootprints">
            <summary>
            The DumpFootprints() method displays the footprint of all source files
            in a data provider.
            </summary>
        </member>
        <member name="P:DDInt.Common.CommonTrace.TraceFile">
            <summary>
            The TraceFile property gets or sets the name of the trace output file.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonUtility.BytesToString(System.Byte[],System.Int32)">
             This method accepts a byte array and constructs a string which
             represents the contents of the byte array. For instance, a byte
             array containing 0x6162 (two bytes) is returned as the string
             "6162" (four characters).
            
             @param bytes The array which contains the bytes representing
             the UCS2 characters.
            
             @param len The number of "relevant" bytes in the array.
        </member>
        <member name="M:DDInt.Common.CommonUtility.ByteToHex(System.Byte)">
             Used to convert a single byte into a string which contains
             its hexadecimal representation.
            
             @param b The value of the byte whose hexadecimal representation is to
             be constructed.
        </member>
        <member name="T:DDInt.License.LicFile">
            <summary>
            Summary description for LicenseFile.
            </summary>
        </member>
        <member name="T:DDInt.License.LicProvider">
            <summary>
            Class that contains per provider info.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQL" -->
        <member name="F:DDInt.Parser.BaseSQL.SQL_UNKNOWN">
            SQL is of unknown type.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_SELECT">
            SQL is a SELECT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_CREATE_TABLE">
            SQL is a CREATE TABLE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_CALL">
            SQL is a CALL statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_INSERT_TABLE">
            SQL is a INSERT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_UPDATE_TABLE">
            SQL is a UPDATE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_DELETE_TABLE">
            SQL is a DELETE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_UNKNOWN_STMT">
            SQL is an unknown DDL statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQL">
            SQL specified by the application.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_hasForUpdate">
            True if sql contains a FOR UPDATE [ OF column_name [ ,...n ] ] clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasReadOnly">
            True if sql contains a FOR READ ONLY clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.escapeTranslator">
            Used to translate ODBC style escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.processLevel">
            Specifices to what level the SQL needs to be processed.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQL.quote">
            Quote character for string literals and quoted identifiers.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.type">
            One of the SQL_ constants.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.treeRoot">
            Special SQL statement root node.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.createTableColumnSpecificationNodes">
            !!!Change once DB2 has changed interface!!!
            This vector actually just contains a BaseSQLListManipulator.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.selectListManipulator">
            Used to modify the select list.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasEscape">
            true if sql contains at least one escape.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.mayHaveParameters">
            A guess as to whether or not the statement contains parameter markers.
            A true indicates that the statement may contain parameter markers.
            A false indicates that the statement does not contain parameter markers.
            False is definitive and true isn't.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_isBatch">
            true if contains a batch of SQL statements.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQLs">
            Batch of BatchSubStatements if in batch mode.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.currentBatch">
            Current batch statment in the interation.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.tableInfo">
            Just holds the object created by BaseSQLParser.  
            
            See the documentation there.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,System.Int32,System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,DDInt.Parser.BaseSQL)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(DDInt.Parser.BaseSQL,System.Int32)">
            Constructor that copies everything except the processing level
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor to prepare for a batch of SQL statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.dumpTree">
            Prints the tree to System.out
        </member>
        <member name="M:DDInt.Parser.BaseSQL.processSQL">
            Builds the SQL tree and translates escapes.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.nextBatchStatement">
             Position to the next SQL statement in a batch.
            
             @return - true if moved to next, false if no more statements
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isBatch">
            Returns true if contains a batch of SQL statements.
            If so, next() is used to interate through the batch.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.batchSize">
            Returns number of batch statements being contained
        </member>
        <member name="M:DDInt.Parser.BaseSQL.addToBatch(System.String,System.Int32)">
            Adds a statement to the batch of statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.clearBatch">
            Resets batch statement list.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getOriginal">
            Return SQL text originally specified by the application.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getVerb">
             Returns the VERB string.
            
             @return String - the SQL verb associated with original SQL.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getType">
             Get accessor for the "type" field.
            
             @return int - one of the SQL_ constants
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isStatementSuitableForAutoGeneratedKeys">
             Determines if the statement is suitable for the return of auto-generated
             keys. To be suitable, the statement must be a single INSERT.
            
             @return true if statement is suitable for the return of auto-generated
             keys; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isCallEscapeStatement">
             Determines if statement is a call escape.
            
             @return true if statement is a call escape; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFormatted">
             Returns processed SQL.
            
             @return String - SQL that has (maybe) been massaged for execution
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateTableSpecification">
             Called to get the table specification for an update statement; that is
             UPDATE or INSERT.
            
             @return String - table name
             @return 'null'- not an update statement, or the table name could not
             be found/parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateColumnSpecification(System.Int32)">
             Returns the name of the column being updated associated with the
             parameter specified.  If there is no column specification then the
             ordinal position of the parameter in the values list is returned.
            
             Note that most of the implementation of this method was written in
             terms of exisiting primitive-like methods.  Some of the called
             methods may not seem to fit the context of this method, but the
             implementations of the called methods perform the correct mechanics.
             Perhaps the primitive-like method names should change to reflect their
             general use.
            
             @param - int valueListParameterPosition - ordinal position of a
             parameter in a values list for an insert or update statement
            
             @return String - column name or ordinal parameter position
             @return null - if column name does not exist or cound not be found,
             and/or oridinal parameter position could not be located in the values
             list
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildSQLTree">
             Creates the SQL tree.
            
             @exception SQLException
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount">
             Returns the number of parameter markers in a SQL statement using
             the SQLDialect in force
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount(DDInt.Parser.SQLDialect)">
             Returns the number of parameter markers in a SQL statement using
             the specified SQLDialect.
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStatementCount">
            Returns the number of statements recognized in the executing SQL
            
            Warning: whether or not a statement is properly recognized may be
            affected by the presence of native syntax.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setParameter(System.Int32,System.String)">
             Changes the string value for a parameter marker
            
             @param index - zero based parameter
             @param value - new parameter marker value
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStringPreceedingParameter(System.Int32)">
             Returns a string containing the string immediately preceeding
             the specified parameter marker. Returns a null object reference if:
                - nothing preceeds the specified parameter marker,
            
             @param index - zero based parameter
        </member>
        <member name="M:DDInt.Parser.BaseSQL.resultType">
             Determines if SQL returns a result set or an update count.
            
             Issues/Bugs:
            
             - Determining SQL type does not take into account that there may
               actually be more than one statement concatenated;
               e.g. "select * from foo select * from bar"
            
             @return bool - true if a select
                               false otherwise
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecificationCount">
             Returns the number of columns definitions in a create table statement.
            
             Note this method MUST be called before calling
             get/setCreateTableColumnSpecification.
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecification(System.Int32)">
             Returns a ArrayList of column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setCreateTableColumnSpecification(System.Int32,System.String)">
             Sets the new column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListCount(DDInt.Parser.BaseSQLTreeNode,System.Collections.ArrayList)">
             Returns the number of list elements in the first top level paren expression.
            
             Note this method MUST be called before calling
             get/setFirstTopLevelParenExpListElement
            
             @param list - empty list that will be subsequently used to pass to
             related methods
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32)">
             Returns a vector of list elements in the first top level paren expression tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32,System.String)">
             Sets the new list element in the first top level paren expression.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecificationCount">
             Returns the number of column definitions in a SELECT statement.
            
             Note that 1 will be returned if the column spec list is actually empty;
             e.g. "create table foo ()"
            
             Note this method MUST be called before calling
             get/setSelectColumnSpecification.
            
             @return int - number of columns, -1 if not a select statement or ill
             formed select statement
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecification(System.Int32)">
             Returns a ArrayList of select column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getSelectColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setSelectColumnSpecification(System.Int32,System.String)">
             Sets the new select column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsValue(System.Collections.ArrayList,System.String)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsNode(System.Collections.ArrayList,System.Int32)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildFromParts(System.Collections.ArrayList,System.String)">
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSingleTableFromSpecification">
            Returns table name if selecting from a single table, otherwise returns null
        </member>
        <member name="M:DDInt.Parser.BaseSQL.lookForSelectNodeType(System.Int32)">
            Returns true if a node of the given type is found in the tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly">
            Returns true if the sql contains a FOR READ ONLY clause; false,
            otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly(System.Boolean)">
            Used by the parser to record the presence of a FOR READ ONLY clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate">
            Returns true if the sql contains a FOR UPDATE clause; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate(System.Boolean)">
            Used by the parser to record the presence of a FOR UPDATE clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasGroupBy">
            Returns true if contains a 'group by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasWhereClause">
            Returns true if contains a 'where' clause
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasHaving">
            Returns true if contains a 'having'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSetOperation">
            Returns true if contains a set operation; e.g. 'union'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasOrderBy">
            Returns true if contains a 'order by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasAggregateOrParameterInSelectList(System.String[])">
            Returns true if the select list contains an aggregate function.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSelectDistinct">
            Returns true if select is followed by the distinct keyword
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsParameterMarker(System.String,DDInt.Parser.SQLDialect)">
            		 * Guesses whether or not the statement contains parameter markers.
                     * 
                     * The scan is a guess because it doesn't take into consideration 
                     * delimited strings or comments.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsEscape">
            Determines if the statement contains escapes.
        </member>
        <member name="T:DDInt.Parser.BaseSQL.BaseBatchSubStatement">
            Contains a SQL statment and its needed processing level.
        </member>
        <member name="T:DDInt.Parser.BaseSQLEscapeProcessor">
             Finds escapes in the SQL tree, sends them to the escape translator,
             and patches the translations back in.
            
             Note that nested escapes are handled by the escape parser, so they
             are not processed by this class as a separate escape.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraversalVisitor">
            <summary>
            Summary description for BaseSQLTreeTraversalVisitor.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.translator">
            Used to translate escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.escapeNode">
            Escape node that will be replaced with the translation.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.whereNode">
            'where' node, if any, associated with the current escape
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.getWhereClause(DDInt.Parser.BaseSQLTreeNode)">
             Finds and returns the 'where' clause.
            
             Look up through the tree until the 'from' is
             found, then look at 'from' siblings until 'where' is found.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.replaceEscape(System.String,System.String)">
            Updates the SQL tree with the translated escape.
        </member>
        <member name="T:DDInt.Parser.BaseSQLFromSpecificationGenerator">
            <summary>
            Summary description for BaseSQLFromSpecificationGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLFromSpecificationGenerator.objectsInSpecification">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLListManipulator">
            <summary>
            Summary description for BaseSQLListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListManipulator.listElements">
            Contains the list elements.
            Even indices are index.
            Odd indices are nodes.
        </member>
        <member name="M:DDInt.Parser.BaseSQLListManipulator.setElement(System.Int32,System.String)">
             Sets the list element to the given value.
            
             This is done buy "emptying" this current list value nodes
             (but leaving them intact), creating a sub-tree out of the new value,
             and making this new sub-tree a child of the last node in the 
             original list.
        </member>
        <member name="T:DDInt.Parser.BaseSQLListPartManipulator">
            <summary>
            Summary description for BaseSQLListPartManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the select list:
            select a as x, b as z from foo
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.stopLevel">
            Level at which the LIST_PART is located, used to stop the traversal.
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.selectListReplacement">
            If non-null, replace the select list with this string
        </member>
        <member name="T:DDInt.Parser.BaseSQLNodeLocator">
            <summary>
            Summary description for BaseSQLNodeLocator.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParameterProcessor">
            <summary>
            Summary description for BaseSQLParameterProcessor.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParenExpListManipulator">
            <summary>
            Summary description for BaseSQLParenExpListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the column list:
            create table foo (a int, b int)
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQLParser" -->
        <member name="F:DDInt.Parser.BaseSQLParser.sqlProcessor">
             Used to record positions of certain UPDATE/INSERT statemet clauses.
            
             !!!REVISIT!!!
             Instead of recording positions of various clauses in the sqlProcessor,
             create a BaseSQLTreeNode nodes that encapsulate the meaning and search
             for it when processing the semantics of the statement.  For example,
             BaseSQLTreeNode.NODE_TABLE_NAME node could be used to identify an
             UPDATE statement's table.
            
             !!!REVISIT!!!
             Note that current check to see if sqlProcessor is null are no longer
             needed.  In the past replaced clauses were re-parsed (e.g., escape
             translations).  This is still true, but the parse level is always
             PROCESS_PARAMS, so no UPDATE/INSERT clauses are ever parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.scanner">
            Lexical analyzer.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.nodeSubParse">
            Set by parsing methods to indicate the result of a sub parse
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.tableInfo">
            Each vector element is an array of two Objects.  The first object,
            element  [0], is the root node of the possibly qualfied table name.  
            The second object, element [1], will be the root node of the correlation 
            name.
            
            tableInfo will be maintained when PROCESS_TABLES is on, and will only
            process table information in the context of a 'FROM' clause.
            
            Note that instead of generic containers with casts, a new class for 
            describing the table, and a new class to contain the new table class 
            could be written.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.processLevel">
            Specifices to what level the SQL needs to be parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.escapeTranslator">
            Used to indicate the type of escape parsing required.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.m_sqlDialect">
            Used to indicate the dialect of SQL being parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.#ctor(DDInt.Common.CommonEscapeTranslator,System.Int32,System.Boolean,DDInt.Parser.SQLDialect)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.setUp(DDInt.Parser.BaseSQL)">
            Setter of BaseExceptions.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parse(System.String,System.Char)">
             Parses the given SQL statement and returns the root
             node of the representative tree.
            
             @return BaseSQLTreeNode - root of the SQL tree if successfully parsed.
             @deprecated SQLException - fatal exception
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSQL" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatement">
            		 * Parses the Statement non-terminal.
            		 *
            		 * Statement
            		 *     ::= SelectStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= InsertStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= UpdateStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            	     *     ::= CreateStatement
            		 *         NODE_STATEMENT_ROOT
            	     *         $1
            		 *
            	     *     ::= DeleteStatement
            	     *         NODE_STATEMENT_ROOT
            	     *         $1
            	     *
            		 *     ::= UnknownStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatementList">
             Parses the StatementList non-terminal.
            
             StatementList
                 ::= Statement StatementSeparator _EndOfStatementTerminal
                     $1 -> [$2] -> $3
            
                 ::= Statement StatementSeparator StatementList
                     $1 -> [$2] -> $3
            
                 ::= _EndOfStatementTerminal
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseStatementSeparator" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseCreateStatement">
             Parses the CreateStatement non-terminal.
            
             CreateStatement
                 ::= _CREATE_TABLE AlmostAnything
                     NODE_CREATE_STATEMENT
                     $1 $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSelectStatement">
             Parses the SelectStatement non-terminal.
            
             SelectStatement
                 ::= QueryExpression OrderByClause ForClause
                     NODE_SELECT_STATEMENT
                     $1 -> [$2] -> [$3]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQueryExpression">
             Parses the QueryExpression non-terminal.
            
             QueryExpression
                 ::= _SELECT List FromClause WhereClause GroupByClause HavingClause SetOperation
                     NODE_QUERY_EXP
                     $1 -> $2 -> [$3] -> $4 -> [$5] -> [$6] -> [$7]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDeleteStatement">
             Parses the DeleteStatement non-terminal.
            
             DeleteStatement
                 ::= _DELETE _FROM QualifiedName WhereClause
                     NODE_DELETE_STATEMENT
                     $1 -> $2 -> $3 -> $4
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseInsertStatement">
             Parses the InsertStatement non-terminal.
            
             InsertStatement
                 ::= _INSERT _INTO QualifiedName ColumnList _VALUES ParenthesizedExpression
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
            
                 ::= _INSERT _INTO QualifiedName ColumnList SubQuery
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5
            
                 ::= _INSERT _INTO QualifiedName ColumnList _DEFAULT _VALUES
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUpdateStatement">
             Parses the UpdateStatement non-terminal.
            
             UpdateStatement
                 ::= _UPDATE QualifiedName _SET List WhereClause
                     NODE_UPDATE_STATEMENT
                     $1 -> $2 -> $3 -> $4 -> $5
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQualifiedName">
             Parses the QualifiedName non-terminal.
            
             QualifiedName
                 ::= _IdentifierOrUnknownKeyword(false) [ _Dot ... _IdentifierOrUnknownKeyword(false) ] ...
                     NODE_UNKNOWN
                     $1 -> [ $2 -> ... ]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatement">
             Parses the UnknownStatement non-terminal.
            
             UnknownStatement
                 ::= UnknownStatementComponents
                     NODE_UNKNOWN_STATEMENT
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatementComponents">
             Parses the UnknownStatementComponents non-terminal.
            
             UnknownStatementComponents
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _Parameter UnknownStatementComponents
                     $1 -> $2
            
                 ::= Escape UnknownStatementComponents
                     $1 -> $2
            
                 ::= _AnyToken UnknownStatementComponents
                     $1 -> $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseList">
             Parses the List non-terminal.
            
             List
                 ::= AlmostAnything(true,false)
                     NODE_LIST_PART
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseFromClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseWhereClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parsePredicate" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parsePredicateType">
             Parses the PredicateType non-terminal.
            
             PredicateType
            		::= ComparisonPredicate
             	::= BetweenPredicate
             	::= InPredicate
             	::= LikePredicate
             	::= ExisitsPredicate
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseComparisonPredicate">
             Parses the ComparisonPredicate non-terminal.
            
              ComparisonPredicate
             	::= ValueExpression CompOp ValueExpression
              
              CompOp
             	::= _Equal
             
             	::= _LessThan
             
             	::= _LessThanOrEqual
             
             	::= _GreaterThan
             
             	::= _GreaterThanEqual
             
             	::= _Unequal
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseBetweenPredicate">
             Parses the BetweenPredicate non-terminal.
            
              BetweenPredicate
             	::= ValueExpression BetweenExpression 
             		 ValueExpression _And ValueExpression 
             
             BetweenExpression
             	::= Not_opt _Between
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseGroupByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseHavingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseForClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSetOperation" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrespondingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseByPart" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperationLastPart">
             Parses the SetOperationLastPart non-terminal.
            
             SetOperationLastPart
                 ::= QueryExpression
                     NODE_UNKNOWN
                     $1
            
                 ::= AlmostAnything(true,false)
                     NODE_UNKNOWN
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOrderByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAllPart" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseColumnList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperator">
             Parses the SetOperator non-terminal.
            
             SetOperator
                 ::= _UNION
                     $1
            
                 ::= _INTERSECT
                     $1
            
                 ::= _EXCEPT
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAlmostAnything(System.Boolean,System.Boolean,System.Object[])" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseParenthesizedExpression">
             Parses the ParenthesizedExpression non-terminal.
            
             ParenthesizedExpression
                 ::= _LeftParen AlmostAnything(false,true) _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSubQuery">
             Parses the SubQuery non-terminal.
            
             SubQuery
                 ::= _LeftParen QueryExpression _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscape">
             Parses the Escape non-terminal.
            
             Escape
                 ::= CallEscape
                     $1
            
                 ::= FunctionEscape
                     $1
            
                 ::= OuterJoinEscape
                     $1
            
                 ::= TimeEscape
                     $1
            
                 ::= DateEscape
                     $1
            
                 ::= TimestampEscape
                     $1
            
                 ::= EscapeEscape
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimeEscape">
             Parses the TimeEscape non-terminal.
            
             TimeEscape
                 ::= _LeftBrace _T _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIME escape.
                     NODE_TIME_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _T RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDateEscape">
             Parses the DateEscape non-terminal.
            
             DateEscape
                 ::= _LeftBrace _D _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the DATE escape.
                     NODE_DATE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _D RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimestampEscape">
             Parses the TimestampEscape non-terminal.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIMESTAMP escape.
                     NODE_TIMESTAMP_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _TS RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeEscape">
             Parses the EscapeEscape non-terminal.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the ESCAPE escape.
                     NODE_ESCAPE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _ESCAPE RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingStringLiteralEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseFunctionEscape">
             Parses the FunctionEscape non-terminal.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the FUNCTION escapes.
                     NODE_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _FN RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseCallEscape">
             Parses the CallEscape non-terminal.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_PROCEDURE escapes.
                     NODE_CALL_PROCEDURE_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_FUNCTION escapes.
                     NODE_CALL_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5 -> $6 -> $7
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3 -> $4 -> $5...
            
             Common CallEscape endings are parsed via parseRemainingCallEscape.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingCallEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinEscape">
             Parses the OuterJoinEscape non-terminal.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the OUTER_JOIN escapes.
                     NODE_OUTER_JOIN_ESCAPE
                     $1 -> $2 -> $3 -> $4
            
                 ::= _LeftBrace _OJ RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 ->3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOuterJoin" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinOrTableReference">
             Parses the OuterJoinOrTableReference non-terminal.
            
             OuterJoinOrTableReference
                 ::= OuterJoin
                     $1
            
                 ::= TableReference
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseJoinType(DDInt.Parser.BaseSQLTreeNode)">
             Parses the JoinType non-terminal.
            
             JoinType
                 ::= _LEFT _OUTER _JOIN
                     NODE_LEFT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _RIGHT _OUTER _JOIN
                     NODE_RIGHT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _FULL _OUTER _JOIN
                     NODE_FULL_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
             The method updates the type of the node as well.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTableReference">
             Parses the TableReference non-terminal.
            
             TableReference
                 ::= QualifiedName CorrelationName
                     NODE_TABLE_REFERENCE
                     $1 -> [$2]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.lookAheadForVerboseJoinOutsideOJEscape">
            Looks ahead for certain join related keywords.
            
            The state of the parser is unaffected by
            this method.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrelationName" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSearchCondition">
             Parses the SearchCondition non-terminal.
            
             SearchCondition
                 ::= AlmostAnything(true,false);
                     NODE_SEARCH_CONDITION
                     $1
            
             A search condition is everything up to the next ON keyword or
             until the end of the escape is encountered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameters">
             Parses the EscapeParameters non-terminal.
            
             EscapeParameters
                 ::= EscapeParameter _Comma EscapeParameters
                     $1 -> $2 -> $3
            
                 ::= EscapeParameter
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameter">
             Parses the EscapeParameter non-terminal.
            
             EscapeParameter
                 ::= EscapeParameterComponents
                     NODE_ESCAPE_PARAMETER
                     $1
            
             A parameter is everything up to the next comma or right paren.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterComponents" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseRestOfEscape(System.Int32)">
             Parses the RestOfEscape non-terminal.
            
             RestOfEscape
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _RightBrace(translationNeeded)
                     $1
            
                 ::= Escape RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _Parameter RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _AnyToken RestOfEscape(translationNeeded)
                     $1 -> $2
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseParameter" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchGroupBy">
             Parses the GROUP BY terminals.
            
             _GROUP_BY
                 ::= TOKEN_ID_OR_KEYWORD("group") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchHavingTerminal">
             Matches the HAVING terminal.
            
             _HAVING
                 ::= TOKEN_ID_OR_KEYWORD("having")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOrderByTerminal">
             Matches the ORDER BY terminals.
            
             _ORDER_BY
                 ::= TOKEN_ID_OR_KEYWORD("order") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnionTerminal">
             Matches the UNION terminals.
            
             _UNION
                 ::= TOKEN_ID_OR_KEYWORD("union")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntersectTerminal">
             Matches the INTERSECT terminals.
            
             _INTERSECT
                 ::= TOKEN_ID_OR_KEYWORD("intersect")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExceptTerminal">
             Matches the EXCEPT terminal.
            
             _EXCEPT
                 ::= TOKEN_ID_OR_KEYWORD("except")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchByTerminal">
             Matches the BY terminal.
            
             _BY
                 ::= TOKEN_ID_OR_KEYWORD("by")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCreateTable">
             Parses the CREATE TABLE terminals.
            
             _CREATE_TABLE
                 ::= TOKEN_ID_OR_KEYWORD("create") TOKEN_ID_OR_KEYWORD("table")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSelectTerminal">
             Matches the SELECT terminal.
            
             _SELECT
                 ::= TOKEN_ID_OR_KEYWORD("select")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFromTerminal">
             Matches the FROM terminal.
            
             _FROM
                 ::= TOKEN_ID_OR_KEYWORD("from")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhereTerminal">
             Matches the WHERE terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("where")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNotTerminal">
             Matches the NOT terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("not")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNullTerminal">
             Matches the NULL terminal.
            
             _NULL
                 ::= TOKEN_ID_OR_KEYWORD("null")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExistsTerminal">
             Matches the EXISTS terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("exists")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchBetweenTerminal">
             Matches the BETWEEN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("between")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLikeTerminal">
             Matches the LIKE terminal.
            
             _LIKE
                 ::= TOKEN_ID_OR_KEYWORD("like")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInTerminal">
             Matches the IN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("in")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAllTerminal">
             Matches the ALL terminal.
            
             _ALL
                 ::= TOKEN_ID_OR_KEYWORD("all")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCorrespondingTerminal">
             Matches the CORRESPONDING terminal.
            
             _CORRESPONDING
                 ::= TOKEN_ID_OR_KEYWORD("corresponding")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInsertTerminal">
             Matches the INSERT terminal.
            
             _INSERT
                 ::= TOKEN_ID_OR_KEYWORD("insert")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDeleteTerminal">
             Matches the DELETE terminal.
            
             _DELETE
                 ::= TOKEN_ID_OR_KEYWORD("delete")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSetTerminal">
             Matches the SET terminal.
            
             _SET
                 ::= TOKEN_ID_OR_KEYWORD("set")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntoTerminal">
             Matches the INTO terminal.
            
             _INTO
                 ::= TOKEN_ID_OR_KEYWORD("into")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUpdateTerminal">
             Matches the UPDATE terminal.
            
             _UPDATE
                 ::= TOKEN_ID_OR_KEYWORD("update")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchValuesTerminal">
             Matches the VALUES terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("values")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDefaultTerminal">
             Matches the DEFAULT terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("default")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOnTerminal">
             Matches the ON terminal.
            
             _ON
                 ::= TOKEN_ID_OR_KEYWORD("ON")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCrossTerminal">
             Matches the CROSS terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("CROSS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInnerTerminal">
             Matches the INNER terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("INNER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchJoinTerminal">
             Matches the JOIN terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("JOIN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUsingTerminal">
             Matches the USING terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("USING")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftTerminal">
             Matches the LEFT terminal.
            
             _LEFT
                 ::= TOKEN_ID_OR_KEYWORD("left")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightTerminal">
             Matches the RIGHT terminal.
            
             _RIGHT
                 ::= TOKEN_ID_OR_KEYWORD("right")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFullTerminal">
             Matches the FULL terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("full")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterTerminal">
             Matches the OUTER terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("OUTER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterJoinTerminal">
             Matches the OUTER JOIN terminals.
            
             _OUTER _JOIN
                 ::= TOKEN_ID_OR_KEYWORD("outer") TOKEN_ID_OR_KEYWORD("join")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOjTerminal(System.Int32)">
             Matches the OJ terminal.
            
             _OJ
                 ::= TOKEN_ID_OR_KEYWORD("OJ")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCallTerminal">
             Matches the CALL terminal.
            
             _CALL
                 ::= TOKEN_ID_OR_KEYWORD("CALL")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExtTerminal">
             Matches the EXT terminal.
            
             _EXT
                 ::= TOKEN_ID_OR_KEYWORD("EXT")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFnTerminal(System.Int32)">
             Matches the FN terminal.
            
             _FN
                 ::= TOKEN_ID_OR_KEYWORD("FN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDTerminal(System.Int32)">
             Matches the D terminal.
            
             _D
                 ::= TOKEN_ID_OR_KEYWORD("D")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTTerminal(System.Int32)">
            		 * Matches the T terminal.
            		 *
            		 * _T
            		 *     ::= TOKEN_ID_OR_KEYWORD("T")
            		 *         NODE_UNKNOWN
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTsTerminal(System.Int32)">
             Matches the TS terminal.
            
             _TS
                 ::= TOKEN_ID_OR_KEYWORD("TS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEscapeTerminal">
             Matches the ESCAPE terminal.
            
             _ESCAPE
                 ::= TOKEN_ID_OR_KEYWORD("ESCAPE")
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchScalarFunctionNameTerminal" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchStringLiteralTerminal">
             Matches a string literal terminal.
            
             _StringLiteral
                 ::= TOKEN_STRING_LITERAL
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIdentifierOrUnknownKeyword(System.Boolean)">
             Matches a delimited identifier, identifier, or keyword terminal.
            
             Parse modifier:
             bool ignoreKeyWords
            
             _IdentifierOrUnknownKeyword
                 ::= TOKEN_DELIMITED_ID
                     NODE_UNKNOWN
            
                 ::= TOKEN_ID_OR_KEYWORD
                     // Reduction only valid if ignoreKeyWords is true and
                     // the current token is any of the ones defined below.
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnknownTokenTerminal">
             Matches a unknown_token terminal.
            
             _UnknownToken
                 ::= TOKEN_UNKNOWN
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTerminal(System.Int32,System.Int32,System.Boolean)">
            Matches a special character terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSemicolonTerminal">
             Matches the ';' terminal.
            
             _Semicolon
                 ::= TOKEN_SPECIAL_CHAR(";")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEqualOperatorTerminal">
             Matches the '=' terminal.
            
             _EqualOperator
                 ::= TOKEN_SPECIAL_CHAR("=")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCommaTerminal">
             Matches the ',' terminal.
            
             _Comma
                 ::= TOKEN_SPECIAL_CHAR(",")
                     NODE_COMMA
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCompareOpTerminal">
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDotTerminal">
             Matches a '.' terminal.
            
             _Dot
                 ::= TOKEN_SPECIAL_CHAR(".")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftParenTerminal">
             Matches the '(' terminal.
            
             _LeftParen
                 ::= TOKEN_SPECIAL_CHAR("(")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightParenTerminal">
             Matches the ')' terminal.
            
             _RightParen
                 ::= TOKEN_SPECIAL_CHAR(")")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftBraceTerminal(System.Int32)">
             Matches the '{' terminal.
            
             _LeftBrace
                 ::= TOKEN_SPECIAL_CHAR("{")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightBraceTerminal(System.Int32)">
             Matches the '}' terminal.
            
             _RightBrace
                 ::= TOKEN_SPECIAL_CHAR("}")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEndOfStatementTerminal">
             Matches the EOS terminal.
            
             _EndOfStatementTerminal
                 ::= TOKEN_END_OF_SQL
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchAnyToken" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchKeywordTerminal(System.String,System.Boolean)">
            Matches any keywork terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhiteSpaceOrComment">
            Matches a white_space terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAlmostAnyTokens(System.Int32[])">
             Matches all tokens up to a TOKEN_END_OF_SQL or any TOKEN_SPECIAL_CHAR
             whose value is identified in the specified exceptList.
            
             @return returns true if one or more tokens were matched; false,
             otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.getEscapeTranslationNeeded(System.Int32)">
            Indirection to the escape translator in case one was not provided.
        </member>
        <member name="T:DDInt.Parser.BaseSQLPredicateParamProcessor">
            Extracts parameter metadata identifying information for all predicates
            
            Algorithm :
            
            - Make a pass through the tree gathering all param nodes
            
            - For each parameter node, search back up the tree towards the root 
            looking for nearest predicate ancestor if any - adding such predicates 
            to a list
            
            - For each predicate node, identify the part of the predicate that can 
            be used to describe the parameters contained in the predicate.   Each
            predicate type has specific logic/code for determing this.
            
            - Parameter metadata descriptions can be in two forms.  It can be a 
            sub query which produces a single value.  Or it can be "anything else".
            If its a sub query, then the sub query minus anything past the 'where'
            clause describes the parameter.  If it's not a sub query, then the 
            "anything else" is used as column description in a secondary select
            statement built from the parts of the enclosing select statement.
            
            If its a sub query, construct a new "where 0=1" select statement out
            of the sub query.
            
            If its "anything else" construct select statement the enclosing select
            as the basis, with the "anything else" part as the column definition.
            Again with a "where 0=1" clause. 
        </member>
        <member name="M:DDInt.Parser.BaseSQLPredicateParamProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner">
            Tokenizes SQL.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.sql">
            SQL being tokenized.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.stringLiteralDelimitor">
            Literal delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.delimitedIdentifierDelimitorsBegin">
            Delimited Identifier Delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentState">
            State object that will process the next char.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.scanPosition">
            Current scan index in the SQL string.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.nextToken">
            Token being built
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.cachedToken">
            Cached token always return from getToken method
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentTokenValue">
            Current token being built.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setup(System.String,System.Char,System.Char,DDInt.Parser.SQLDialect)">
             Sets up for use.
            
             @param SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getSQL">
             Returns the original SQL.
            
             @returns SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getNextToken">
             Returns the next token in the SQL.
            
             @return BaseSQLToken
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setNextState(System.Int32)">
             Transition to another state.
            
             @param state - state constant
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidFirstCharForIdentifierOrKeyword(DDInt.Parser.SQLDialect,System.Int32)">
             Returns true if the character is a valid first char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidCharForIdentifierOrKeyword(System.Int32)">
             Returns true if the character is a valid (middle or end) char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isWhiteSpace(System.Int32)">
             Returns true if the character is white space
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isNonCommentRelatedSpecialCharacter(System.Int32)">
             Returns true if the character is a special character not already
             part of other token semantics.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setEndOfToken(System.Int32)">
            Signals that a token has been found and sets its type.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidNativeParameterToken(DDInt.Parser.BaseSQLScanner)">
            This method checks to see if the currently tokenized value violates
            any native parameter name rules.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState">
            Base class that represents a scanner state.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStartState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCompareOpState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeCOrCPPCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeSQLCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerRestOfLineCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerIDOrKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerUnknownState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLWhiteSpaceState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.initialize">
            Called when transitioning to 'this' state
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLAddingWrapperContentsState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerAtParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="T:DDInt.Parser.BaseSQLStringGenerator">
            <summary>
            Summary description for BaseSQLStringGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.findVerbOnly">
            If true then the generator quits after the verb is found.
            If a "create" statement is found then both "create" and the next
            word is returned, otherwise just the first word is returned.
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.whereZeroEqualOne">
            If true then the generator generates "where 0 = 1" for 
            "where" clauses
        </member>
        <member name="T:DDInt.Parser.BaseSQLToken">
            <summary>
            Summary description for BaseSQLToken.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_value">
            Token string value.
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_type">
            One of the BaseSQLScanner.TOKEN_ constants.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNode">
            <summary>
            Summary description for BaseSQLTreeNode.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ROOT">
            sub-tree contains escape, with possibly nested escapes
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIME_ESCAPE">
            sub-tree contains time escape
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DATE_ESCAPE">
            sub-tree contains time escape
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIMESTAMP_ESCAPE">
            sub-tree contains time escape
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FUNCTION_ESCAPE">
            sub-tree contains time escape
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_OUTER_JOIN_ESCAPE">
            sub-tree contains outer join escape
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_PROCEDURE_ESCAPE">
            sub-tree contains call procedure escape
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_FUNCTION_ESCAPE">
            sub-tree contains call function escape
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ESCAPE">
            sub-tree contains escape escape
            {escape 'c'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_EXTENSION_ESCAPE">
            sub-tree contains extension escape
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ROOT">
            root node of the entire tree
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_ROOT">
            sub-tree contains a statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SELECT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_INSERT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UPDATE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN_STATEMENT">
            sub-tree contains an unknown statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PAREN_ROOT">
            sub-tree contains contents of ( )
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FROM_CLAUSE">
            sub-tree contains the from clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHERE_CLAUSE">
            sub-tree contains the where clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_GROUPBY_CLAUSE">
            sub-tree contains the group by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SETOP_ROOT">
            sub-tree contains a set operation
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ORDERBY_CLAUSE">
            sub-tree contains the order by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_HAVING_CLAUSE">
            sub-tree contains the having clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIST_PART">
            sub-tree contains part of a comma separated list
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_SEPARATOR">
            sub-tree contains a statement separator.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN">
            node has no special semantic meaning
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ANSI_PARAM">
            node contains a parameter marker
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMA">
            node contains a comma
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHITESPACE">
            node contains whitespace
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMENT">
            node contains a comment
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_QUERY_EXP">
            sub-tree contains a query expression
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TABLE_REFERENCE">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_PARAMETER">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LEFT_OUTER_JOIN_OP">
            sub-tree contains left outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_RIGHT_OUTER_JOIN_OP">
            sub-tree contains right outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FULL_OUTER_JOIN_OP">
            sub-tree contains full outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SEARCH_CONDITION">
            sub-tree contains outer join escape search condition
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CREATE_TABLE_STATEMENT">
            sub-tree contains a create statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FOR_CLAUSE">
            sub-tree contains a for clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_ROOT">
            sub-tree contains a predicate
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_TYPE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMPARISON_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_BETWEEN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_IN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIKE_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_VALUE_EXPRESSION_ROOT">
            sub-tree contains a row value constructor
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DELETE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_AT_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COLON_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_type">
            One of the type constants defined by this class
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_value">
            Value of the node 
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_parent">
            Parent
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_rightSibling">
            Sibling to the right
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_leftMostChild">
            Left-most child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32,System.String)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setParent(DDInt.Parser.BaseSQLTreeNode)">
            Sets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getParent">
            Gets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setNextChild(DDInt.Parser.BaseSQLTreeNode)">
            Set next child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getPrevious">
            Returns the left sibling, or the parent if there is no left sibling.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNodeSearch">
            <summary>
            Summary description for BaseSQLTreeNodeSearch.
            </summary>
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNodeSearch.search(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraverser">
            <summary>
            Summary description for BaseSQLTreeTraverser.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.level">
            Current tree level.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.visitor">
            Callback for visit action.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreePreOrderTraverser">
            <summary>
            Summary description for BaseSQLTreePreOrderTraverser.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlBulkCopyOptions">
            <summary>
            Bitwise flag that specifies one or more options to use with an instance of PsqlBulkCopy.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlBulkCopy">
            <summary> Lets you efficiently bulk load a SQL Server table with data from another source.
            </summary>
            
            <remarks> Microsoft SQL Server includes a popular command-prompt utility named bcp for
            moving data from one table to another, whether on a single server or between servers. The
            PsqlBulkCopy class lets you write managed code solutions that provide similar functionality.
            There are other ways to load data into a SQL Server table (INSERT statements, for example),
            but PsqlBulkCopy offers a significant performance advantage over them.
            
            <para>The PsqlBulkCopy class can be used to write data only to SQL Server tables. However, the
            data source is not limited to SQL Server; any data source can be used, as long as the data
            can be loaded to a DataTable instance or read with a IDataReader instance.
            </para>
            </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.#ctor(Pervasive.Data.SqlClient.PsqlConnection)">
            <summary> Initializes a new instance of the PsqlBulkCopy class using the specified
            open instance of PsqlConnection. 
            </summary>
            
            <param name="connection"> The already open PsqlConnection instance that will be used
            to perform the bulk copy operation.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.#ctor(System.String)">
            <summary> Initializes and opens a new instance of PsqlConnection based on the
            supplied connectionString. The constructor uses the PsqlConnection to initialize
            a new instance of the PsqlBulkCopy class.
            </summary>
            
            <param name="connectionString"> The string defining the connection that will be opened
            for use by the PsqlBulkCopy instance.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.#ctor(System.String,Pervasive.Data.SqlClient.PsqlBulkCopyOptions)">
            <summary> Initializes and opens a new instance of PsqlConnection based on the
            supplied connectionString. The constructor uses that PsqlConnection to initialize
            a new instance of the PsqlBulkCopy class. The PsqlConnection instance behaves
            according to options supplied in the copyOptions parameter.
            </summary>
            
            <param name="connectionString"> The string defining the connection that will be opened
            for use by the PsqlBulkCopy instance.
            </param>
            
            <param name="copyOptions"> A combination of values from the PsqlBulkCopyOptions
            enumeration that determines which data source rows are copied to the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.#ctor(Pervasive.Data.SqlClient.PsqlConnection,Pervasive.Data.SqlClient.PsqlBulkCopyOptions,Pervasive.Data.SqlClient.PsqlTransaction)">
            <summary> Initializes a new instance of the PsqlBulkCopy class using the supplied
            existing open instance of PsqlConnection. The PsqlBulkCopy instance behaves
            according to options supplied in the copyOptions parameter. If a non-null PsqlTransaction
            is supplied, the copy operations will be performed within that transaction.
            </summary>
            
            <param name="connection"> The already open PsqlConnection instance that will be used
            to perform the bulk copy.
            </param>
            
            <param name="copyOptions"> A combination of values from the PsqlBulkCopyOptions
            enumeration that determines which data source rows are copied to the destination table.
            </param>
            
            <param name="externalTransaction"> An existing PsqlTransaction instance under which
            the bulk copy will occur.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.Dispose(System.Boolean)">
            <summary> Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            
            <param name="disposing"> true to release both managed and unmanaged resources; false to
            release only unmanaged resources.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.Close">
            <summary> Closes the PsqlBulkCopy instance.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.WriteToServer(System.Data.IDataReader)">
            <summary> Copies all rows in the supplied IDataReader to a destination table specified
            by the DestinationTableName property of the PsqlBulkCopy object.
            </summary>
            
            <param name="reader"> A IDataReader whose rows will be copied to the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.WriteToServer(System.Data.DataRow[])">
            <summary> Copies all rows from the supplied DataRow array to a destination table
            specified by the DestinationTableName property of the PsqlBulkCopy object.
            </summary>
            
            <param name="rows"> An array of DataRow objects that will be copied to the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.WriteToServer(System.Data.DataTable)">
            <summary> Copies all rows in the supplied DataTable to a destination table specified
            by the DestinationTableName property of the PsqlBulkCopy object.
            </summary>
            
            <param name="table"> A DataTable whose rows will be copied to the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
            <summary> Copies only rows that match the supplied row state in the supplied DataTable
            to a destination table specified by the DestinationTableName property of the
            PsqlBulkCopy object.
            </summary>
            
            <param name="table"> A DataTable whose rows will be copied to the destination table.
            </param>
            
            <param name="rowState"> A value from the DataRowState enumeration. Only rows matching
            the row state are copied to the destination.
            </param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopy.BatchSize">
            <summary> Number of rows in each batch. At the end of each batch, the rows in the batch
            are sent to the server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopy.BulkCopyTimeout">
            <summary> Number of seconds for the operation to complete before it times out. 
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopy.ColumnMappings">
             <summary> Returns a collection of PsqlBulkCopyColumnMapping items. Column
             mappings define the relationships between columns in the data source and columns
             in the destination.
             </summary>
             
             <remarks> If the data source and the destination table have the same number of
             columns, and the ordinal position of each source column within the data source matches
             the ordinal position of the corresponding destination column, the ColumnMappings
             collection is unnecessary. However, if the column counts differ, or the ordinal positions
             are not consistent, you must use ColumnMappings to make sure that data is copied into
             the correct columns.
            
             <para> During the execution of a bulk copy operation, this collection can be accessed,
             but it cannot be changed. Any attempt to change it will throw an InvalidOperationException.
             </para>
             </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopy.DestinationTableName">
            <summary> Name of the destination table on the server. 
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopy.NotifyAfter">
            <summary> Defines the number of rows to be processed before generating a notification
            event.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping">
            <summary> Defines the mapping between a column in a SQLServerBulkCopy instance's data source
            and a column in the instance's destination table.
            </summary>
            
            <remarks> Column mappings define the mapping between data source and the target table.
            
            <para> If mappings are not defined—that is, the ColumnMappings collection is empty—the
            columns are mapped implicitly based on ordinal position. For this to work, source
            and target schemas must match. If they do not, an InvalidOperationException is thrown.
            </para>
            
            <para> If the ColumnMappings collection is not empty, not every column present in the data
            source has to be specified. Those not mapped by the collection are ignored.
            </para>
            
            <para> You can refer to source and target columns by either name or ordinal. You can mix
            by-name and by-ordinal column references in the same mappings collection.
            </para>
            </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.#ctor">
            <summary> Default constructor that initializes a new SQLServerBulkCopyColumnMapping
            object.
            </summary>
            
            <remarks> If you use this constructor, you must then define the source for the mapping
            using the SourceColumn property or the SourceOrdinal property, and define the destination
            for the mapping using the DestinationColumn property or the DestinationOrdinal property.
            </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new column mapping, using column ordinals to refer to source and
            destination columns.
            </summary>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data
            source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
            <summary> Creates a new column mapping, using a column ordinal to refer to the source
            column and a column name for the target column.
            </summary>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data
            source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination
            table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
            <summary> Creates a new column mapping, using a column name to refer to the source column
            and a column ordinal for the target column.
            </summary>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.#ctor(System.String,System.String)">
            <summary> Creates a new column mapping, using column names to refer to source and
            destination columns.
            </summary>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the
            destination table.
            </param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.DestinationColumn">
            <summary> Name of the column being mapped in the destination database table.
            </summary>
            
            <remarks> The DestinationColumn and DestinationOrdinal properties are mutually
            exclusive. The last value set takes precedence.
            </remarks>
            
            <returns> The string value of the DestinationColumn property.
            </returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.DestinationOrdinal">
            <summary> Ordinal value of the destination column within the destination table.
            </summary>
            
            <remarks> The DestinationColumn and DestinationOrdinal properties are mutually
            exclusive. The last value set takes precedence.
            </remarks>
            
            <returns> The integer value of the DestinationOrdinal property, or -1 if the
            property has not been set.
            </returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.SourceColumn">
            <summary> Name of the column being mapped in the data source.
            </summary>
            
            <remarks> The SourceColumn and SourceOrdinal properties are mutually
            exclusive. The last value set takes precedence
            </remarks>
            
            <returns> The string value of the SourceColumn property.
            </returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping.SourceOrdinal">
            <summary> The ordinal position of the source column within the data source.
            </summary>
            
            <remarks> The SourceColumn and SourceOrdinal properties are mutually
            exclusive. The last value set takes precedence
            </remarks>
            
            <returns> The integer value of the SourceOrdinal property.
            </returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection">
            <summary> Collection of PsqlBulkCopyColumnMapping objects that inherits from CollectionBase.
            </summary>
            
            <remarks> Column mappings define the mapping between data source and the target table.
            
            <para>If mappings are not defined—that is, the ColumnMappings collection is empty—the
            columns are mapped implicitly based on ordinal position. For this to work, source
            and target schemas must match. If they do not, an InvalidOperationException is thrown.
            </para>
            
            <para>If the ColumnMappings collection is not empty, not every column present in the data
            source has to be specified. Those not mapped by the collection are ignored.
            </para>
            
            <para>You can refer to source and target columns by either name or ordinal. You can mix
            by-name and by-ordinal column references in the same mappings collection.
            </para>
            </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Add(Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping)">
            <summary> Adds the specified mapping to the PsqlBulkCopyColumnMappingCollection.
            </summary>
            
            <param name="bulkCopyColumnMapping">
            The PsqlBulkCopyColumnMapping object that describes the mapping to be added to the
            collection.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
            <summary> Creates a new PsqlBulkCopyColumnMapping and adds it to the collection,
            using ordinals to specify both source and destination columns.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within the
            destination table.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
            <summary> Creates a new PsqlBulkCopyColumnMapping and adds it to the collection,
            using an ordinal for the source column and a string for the destination column.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination table.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
            <summary> Creates a new PsqlBulkCopyColumnMapping and adds it to the collection,
            using a column name to describe the source column and an ordinal to specify the
            destination column.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Add(System.String,System.String)">
            <summary> Creates a new PsqlBulkCopyColumnMapping and adds it to the collection,
            using column names to specify both source and destination columns.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination
            table.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Clear">
            <summary> Clears the contents of the collection.
            </summary>
            
            <remarks> The Clear method is most commonly used when you use a single PsqlBulkCopy 
            instance to process more than one bulk copy operation. If you create column mappings 
            for one bulk copy operation, you must clear the PsqlBulkCopyColumnMappingCollection 
            after the WriteToServer method and before processing the next bulk copy.
            
            <para> Performing several bulk copies using the same PsqlBulkCopy instance will usually
            be more efficient from a performance point of view than using a separate PsqlBulkCopy
            for each operation.
            </para>
            </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Contains(Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping)">
            <summary> Gets a value indicating whether a specified PsqlBulkCopyColumnMapping
            object exists in the collection.
            </summary>
            
            <param name="value"> A valid PsqlBulkCopyColumnMapping object.
            </param>
            
            <returns> true if the specified mapping exists in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.CopyTo(Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping[],System.Int32)">
            <summary> Copies the elements of the PsqlBulkCopyColumnMappingCollection to an
            array of PsqlBulkCopyColumnMapping items, starting at a particular index.
            </summary>
            
            <param name="array"> The one-dimensional PsqlBulkCopyColumnMapping array that is
            the destination of the elements copied from PsqlBulkCopyColumnMappingCollection.
            The array must have zero-based indexing. 
            </param>
            
            <param name="index"> The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.IndexOf(Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping)">
            <summary>Gets the index of the specified PsqlBulkCopyColumnMapping object.
            </summary>
            
            <param name="value"> The PsqlBulkCopyColumnMapping object for which to search.
            </param>
            
            <returns> The zero-based index of the column mapping, or -1 if the column mapping
            is not found in the collection.
            </returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Insert(System.Int32,Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping)">
            <summary> Insert a new PsqlBulkCopyColumnMapping at the index specified.
            </summary>
            
            <param name="index"> Integer value of the location within the PsqlBulkCopyColumnMappingCollection
            at which to insert the new PsqlBulkCopyColumnMapping.
            </param>
            
            <param name="value"> PsqlBulkCopyColumnMapping object to be inserted in the collection.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Remove(Pervasive.Data.SqlClient.PsqlBulkCopyColumnMapping)">
            <summary> Removes the specified PsqlBulkCopyColumnMapping element from the
            PsqlBulkCopyColumnMappingCollection.
            </summary>
            
            <param name="value"> PsqlBulkCopyColumnMapping object to be removed from the
            collection.
            </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
             <summary> Removes the mapping at the specified index from the collection.
             </summary>
             
             <remarks> The RemoveAt method is most commonly used when you use a single
             PsqlBulkCopy instance to process more than one bulk copy operation. If you
             create column mappings for one bulk copy operation, you must remove mappings
             that no longer apply after the WriteToServer method is called and before 
             defining mapping for the next bulk copy. You can clear the entire collection 
             by using the Clear method, or remove mappings individually using the Remove 
             method or the RemoveAt method.
            
             <para> Performing several bulk copies using the same PsqlBulkCopy instance
             will usually be more efficient from a performance point of view than using 
             a separate PsqlBulkCopy for each operation.
             </para>
             </remarks>
             
             <param name="index"> The zero-based index of the PsqlBulkCopyColumnMapping
             object to be removed from the collection.
             </param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlBulkCopyColumnMappingCollection.Item(System.Int32)">
            <summary> Gets the PsqlBulkCopyColumnMapping object at the specified index.
            </summary>
            
            <param name="index"> The zero-based index of the PsqlBulkCopyColumnMapping
            to find.
            </param>
            
            <returns> A PsqlBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlColumn">
            <summary>
            Summary description for PsqlColumn.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getDecimal(System.Int32)">
            <summary>
            Returns the column value as a decimal.  Provider can override
            to allow returning columns other numeric columns as decimal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getDouble(System.Int32)">
            <summary>
            Returns the column value as a double.  Provider can override
            to allow returning columns other numeric columns as double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getFloat(System.Int32)">
            <summary>
            Returns the column value as a float.  Provider can override
            to allow returning columns other numeric columns as float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getInt64(System.Int32)">
            <summary>
            Returns the column value as a long.  Provider can override
            to allow returning columns other numeric columns as long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getInt32(System.Int32)">
            <summary>
            Returns the column value as a int.  Provider can override
            to allow returning columns other numeric columns as int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlColumn.getInt16(System.Int32)">
            <summary>
            Returns the column value as a short.  Provider can override
            to allow returning columns other numeric columns as short.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlColumnCollection">
            <summary>
            Summary description for PsqlColumnCollection.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlColumnInfoCache">
            <summary>
            Summary description for PsqlColumnInfoCache.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlStatementCacheBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlCommand">
            <summary>
            Initializes a new instance of the PsqlCommand class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.#ctor">
            <summary>
            Initializes a new instance of the PsqlCommand class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.#ctor(System.String)">
            <summary>
            Gets or sets the text command to run
            against the data source.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.#ctor(System.String,Pervasive.Data.SqlClient.PsqlConnection)">
            <summary>
            Gets or sets the PsqlConnection 
            used by this instance of the PsqlCommand.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
            <param name="connection">The name of the current connection.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.#ctor(System.String,Pervasive.Data.SqlClient.PsqlConnection,Pervasive.Data.SqlClient.PsqlTransaction)">
            <summary>
            This instance of the PsqlCommand uses the Connection property 
            to get or set the PsqlConnection.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
            <param name="connection">The name of the current connection.</param>
            <param name="transaction">The name of the current transaction.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of an 
            IDbCommand.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against the
            PsqlConnection object, and returns the number 
            of rows affected. This method is intended for commands that do not return 
            results.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the 
            first row of the resultset that the query returns. Any additional rows 
            or columns are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.Prepare">
            <summary>
            Creates a prepared or compiled version 
            of the command on the data source.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a PsqlParameter object.
            </summary>
            <returns>A PsqlParameter object</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.ExecuteReader">
            <overloads>
            Sends the CommandText to the Connection, and builds an PsqlDataReader 
            using one of the CommandBehavior values.
            </overloads>
            <returns>An PsqlDataReader object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the CommandText to the Connection, and builds a PsqlDataReader 
            using one of the CommandBehavior values.
            </summary>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A PsqlDataReader object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.System#ICloneable#Clone">
            <summary>
            Creates a new instance of a PsqlCommand class with the same value 
            as an existing instance.
            </summary>
            <returns>A PsqlCommand object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommand.getParameterStatus(System.Data.IDataParameter,System.Int32)">
            <summary>
            Returns parameter status of array binding
            </summary>
            <param name="par">The parameter</param>
            <param name="index">The parameter index in the array</param>
            <returns>Returns true when the parameter value is not DB NULL</returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied 
            to the DataRow, when used by the Update method of 
            a DbDataAdapter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.StatementCacheBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.CommandText">
            <summary>
            Gets or sets the text command to run
            against the data source.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.AddRowid">
            <summary>Adds the ROWID as part of the select list.</summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.ArrayBindCount">
            <summary>
            Specifies the number of rows of parameters 
            that will be used. The application must set this 
            property before executing a command that uses parameter 
            array binding. The count must equal the length of each 
            of the arrays that is set for each parameter value.
            <para>
            When set to 0 (the default), the application will 
            not use parameter array binding.
            </para>
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.ArrayBindStatus">
            <summary>
            Returns an array of row status values.  This property can be
            used to check status after executing a command that used array
            binding. This property will return null when array binding is
            not used. Pervasive's array binding is done as a single atomic 
            operation. Either all rows are successful or all rows will fail.
            When an array bind execution fails, the first row in the parameter
            array that caused the failure will be marked with the best appropriate
            status.  All other status will be marked as failed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before
            terminating the attempt to execute a command and 
            generating an error. The default value is 30 seconds.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.CommandType">
            <summary>
            Indicates or specifies how the CommandText
            property is interpreted.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.Parameters">
            <summary>
            Gets the PsqlParameterCollection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.Connection">
            <summary>
            Gets or sets the PsqlConnection 
            used by this instance of the PsqlCommand.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.Transaction">
            <summary>
            Gets or sets the PsqlTransaction 
            within which the PsqlCommand executes.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommand.RowSetSize">
            <summary>
            Limits the number of rows returned by any query 
            on this Command object to the value specified at execute time. When set
            to 0, the data provider does not limit the number of rows returned.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlRowStatus">
            <summary>
            Indicates the status of each row after an array bind operation.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlRowStatus.OK">
            <summary>
            The operation succeeded. All entries are marked as OK.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlRowStatus.Failed">
            <summary>
            The operation failed. 
            The data provider assigns this value to all status entries except for 
            the row that caused the failure.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlCommandBuilder">
            <summary>
            The PsqlCommandBuilder object automatically generates single-table 
            commands that are used to reconcile changes made to a DataSet with 
            the associated database. A PsqlCommandBuilder object is associated with a 
            PsqlDataAdapter object.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the PsqlCommandBuilder class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.#ctor(Pervasive.Data.SqlClient.PsqlDataAdapter)">
            <summary>
            Initializes a new instance of the PsqlCommandBuilder class.
            </summary>
            <param name="adapter">The PsqlDataAdapter object 
            associated with this PsqlCommandBuilder. </param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
            </summary>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>
            <returns>The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. 
            </summary>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
            <returns>The unquoted identifier, with embedded quotes properly un-escaped.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically-generated 
            PsqlCommand object required to perform Deletes on the Pervasive PSQL database.
            </summary>
            <returns>The automatically-generated PsqlCommand object required to 
            perform Deletes on the Pervasive PSQL database.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated PsqlCommand object required to perform Deletes on the Psql database.
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. 
            If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically generated PsqlCommand object required to 
            perform Deletes on the Pervasive PSQL database.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically-generated 
            PsqlCommand object required to perform Inserts on the Pervasive PSQL database
            </summary>
            <returns>The automatically-generated PsqlCommand object required to 
            perform Inserts on the Pervasive PSQL database.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated PsqlCommand object required to perform Inserts on the database.
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically-generated PsqlCommand object required to perform Inserts.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically-generated 
            PsqlCommand object required to perform Updates on the Pervasive PSQL database
            </summary>
            <returns>The automatically-generated PsqlCommand object required to 
            perform Updates on the Pervasive PSQL database.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated PsqlCommand object required to perform updates on the database.
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically-generated PsqlCommand object required to perform updates.</returns>
            <remarks>The default behavior, when generating parameter names, is to use @p1, @p2, and so on for the various parameters. </remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlCommandBuilder.DeriveParameters(Pervasive.Data.SqlClient.PsqlCommand)">
            <summary>
            Retrieves parameter information 
            from the stored procedure specified in the PsqlCommand 
            and populates the PsqlCommand object's PsqlParameters collection. 
            </summary>
            <param name="command">The PsqlCommand referencing the 
            stored procedure from which the parameter information is to be derived. 
            The derived parameters are added to the PsqlCommand object's 
            PsqlParameters collection. 
            </param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommandBuilder.DataAdapter">
            <summary>
            Gets or sets the PsqlDataAdapter object for which 
            this PsqlCommandBuilder object will generate SQL statements.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlCommandBuilder.AllowUpdateWithoutKey">
            <summary>
            Allows UPDATE or DELETE
            operations to continue for tables that have no key. Normally,
            these operations are not allowed for tables with no key.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlInfoMessageEventHandler">
            <summary>
            The PsqlInfoMessageEventHandler object passes as an input to the 
            PsqlInfoMessageEventHandler and contains information relevant to a warning
            generated by the Pervasive PSQL server.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlConnection">
            <summary>
            The PsqlConnection object represents an open connection to a Pervasive
            database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.#cctor">
            <summary>
            Handles state change events. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.#ctor">
            <summary>
            Initializes a new instance of PsqlConnection.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of PsqlConnection.
            </summary>
            <param name="connectionString">The Pervasive PSQL connection string 
            that includes settings, such as the server name, needed to establish the initial connection. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.CreateCommand">
            <summary>
            Creates and returns a 
            PsqlCommand object associated with 
            the PsqlConnection.
            </summary>
            <returns>A PsqlCommand object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.Open">
            <summary>
            Opens a database connection with the settings 
            specified by the ConnectionString property of the provider-specific
            PsqlConnection object.
            </summary>
            
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the PsqlConnection and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open
            Connection object.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.GetSchema">
            <summary>
            Returns schema information for the data source of this PsqlConnection.
            </summary>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this PsqlConnection using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this PsqlConnection using 
            the specified string for the schema name and the specified string array for the restriction values.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">A set of restriction values for the requested schema.</param>
            <returns>A DataTable that returns schema information.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.System#ICloneable#Clone">
            <summary>
            Creates a new instance of a PsqlConnection class with the same value 
            as an existing instance.
            </summary>
            <returns>A PsqlConnection object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.BeginTransaction">
            <summary>
            Begins a transaction at the PSQL database.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction at the PSQL database with the specified 
            Isolation Level.
            </summary>
            <param name="level">The transaction isolation level for this connection.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.SetOEMLicenseInfo(System.String,System.String)">
            <summary>
            The SetOEMLicenseInfo method is for OEM customers only.
            Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.
            </summary>
            <param name="licFileName">Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.</param>
            <param name="licFilePassword">Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.ClearAllPools">
            <summary>
            Empties the connection pool.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnection.ClearPool(Pervasive.Data.SqlClient.PsqlConnection)">
            <summary>
            Empties the connection pool associated with the specified connection.
            </summary>
            <param name="connection">The PsqlConnection to be cleared from the pool.</param>
            <remarks>The ClearPool method clears the connection pool that is associated with connection. 
            If additional connections associated with the connection pool
            are in use at the time of the call, 
            they are discarded when Close is called on them.</remarks>
        </member>
        <member name="E:Pervasive.Data.SqlClient.PsqlConnection.InfoMessage">
            <summary>
            This event handler receives an argument of type PsqlInfoMessageEvenArgs
            containing data relevant to this event. Clients that want to process 
            warnings and informational messages sent by the database server should
            create a PsqlInfoMessageEventHandler delegate to listen to this event.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.ConnectionString">
            <summary>
            Gets or sets 
            the string used to open a database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while 
            trying to establish a connection, before terminating the attempt and 
            generating an error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.Database">
            <summary>
            Gets the name of the current database 
            or the database that will be used when a connection is open.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.ServerVersion">
            <summary>
            Returns a string containing the version of the 
            Pervasive PSQL server to which the client is connected.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.Port">
            <summary>
            Returns the value specified for the 
            Port attribute in the connection string. Read-only. 
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.Host">
            <summary>
            Returns the value specified for the Host 
            attribute in the connection string. Read-only.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.ServerName">
            <summary>
            Returns the address of the server or host name. 
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.ServerDSN">
            <summary>
            Gets the name of the Pervasive PSQL server to which to connect.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnection.DataSource">
            <summary>
            Gets the name of the Pervasive PSQL server to which to connect.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlConnectionOptions">
            <summary>
            Summary description for PsqlConnectionOptions.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder">
            <summary>
            Provides a way to create and manage the contents of connection 
            strings used by the PsqlConnection class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the PsqlConnectionStringBuilder class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PsqlConnectionStringBuilder class.
            The connection string provides the data for the instance's connection
            information.
            </summary>
            <param name="connectionString">The basis for the object's internal connection information. Parsed into name/value pairs. 
            Invalid key names raise a KeyNotFoundException.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the PsqlConnectionStringBuilder instance.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether an element in the PsqlConnectionStringBuilder  
            contains a specific key.
            </summary>
            <param name="keyword">The key to locate in the ConnectionStringBuilder.</param>
            <returns>True if the PsqlConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </returns>
            <remarks>The PsqlConnectionStringBuilder contains a fixed-size 
            collection of key/value pairs. This means that the ContainsKey method only determines 
            whether a particular key name is valid.</remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the 
            PsqlConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed 
            from the connection string in this PsqlConnectionStringBuilder instance.</param>
            <returns>True if the key existed within the connection string and was removed, False if the key did not exist</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this 
            PsqlConnectionStringBuilder instance.
            </summary>
            <param name="keyword">True if the PsqlConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </param>
            <returns>True if the PsqlConnectionStringBuilder contains an element that has 
            the specified key; otherwise, False. </returns>
            <remarks>The PsqlConnectionStringBuilder contains a fixed-size 
            collection of key/value pairs. This means that the ShouldSerialize method only determines 
            whether a particular key name is valid.</remarks>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding 
            to the supplied key from this PsqlConnectionStringBuilder.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to keyword.</param>
            <returns>True if keyword was found within the connection string; otherwise, False.</returns>
            <remarks>Calling TryGetValue with a nonexistent key places the value null 
            (or, in Visual Basic, the value Nothing) in the value parameter. </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Keys">
            <summary>
            Gets an ICollection that contains the keys in the DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.IsFixedSize">
            <summary>
            Overridden. Gets a value that indicates whether 
            the PsqlConnectionStringBuilder has a fixed size.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.AlternateServers">
            <summary>
            Gets or sets a list of alternate database servers to which 
            the data provider will try to connect if the primary 
            database server is unavailable. Specifying a value for this 
            property enables connection failover for the data provider. 
            </summary>
            <remarks>
            <para>This property corresponds to the Alternate Servers connection string option.</para>
            <para>The value you specify must be in the form of a string 
            that defines connection information for each alternate server.
            For the Pervasive PSQL data provider, you must specify the port number and the name 
            or the IP address of each alternate server. </para>
            <para>The string has the format:</para> 
            <para><code>(Host=hostvalue;Port=portvalue[;...])</code></para>
            
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.DatabaseName">
            <summary>
            Gets or sets the internal database name of the database to which you want to connect. 
            Use this property when you need to connect to a Pervasive PSQL data source
            for which a ServerDSN has not been defined.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Encoding">
            <summary>
            Specifies an IANA name or Windows code page number to be used for translating the string data stored in the database.
            <para>The default value is an empty string; the current Windows Active Code Page (ACP) is used.</para>
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Encrypt">
            <summary>
            Determines whether the data provider uses Encrypted 
            Network Communications, also known as wire protocol.
            <para>When set to always, the data provider uses encryption. If set to 
            never, the data provider does not use encryption.
            </para>
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Encryption">
            <summary>
            Determines the minimum level of encryption allowed by the 
            data provider. The default is medium, which corresponds to 56-bit 
            encryption when using the default encryption module.
            Other values are low and high.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Host">
             <summary>
             Gets or sets either the name or the IP address of the server 
             to which you want to connect. For example, if your network 
             supports named servers, you can specify a server name such as 
             <code>Psql Server</code>. Or, you can specify an IP address 
             such as <code>199.226.224.34</code>. 
             <para>To use a PSQL server running on the local machine, 
            specify <code>localhost</code>. </para>
             </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.InitialCommandTimeout">
            <summary>
            This option can be used to override the default command timeout of 30 seconds.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.InitializationString">
            <summary>
            Specifies one statement that will be issued 
            immediately after connecting to the database to manage session settings.
            The initial default is an empty string.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.LongDataChunkSize">
            <summary>
            The amount of long data to assemble and send to server in a single packet.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.LoadBalancing">
            <summary>
            Determines whether the data provider uses 
            client load balancing in its attempts to connect 
            to primary and alternate database servers. 
            The list of alternate servers is specified by the Alternate Servers property.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Port">
            <summary>
            Gets or sets the TCP port of the listener running on 
            the Pervasive PSQL database. 
            </summary>
            <remarks><para>This property corresponds to the Port connection string option.</para>
            <para>The initial default is 1583.</para> 
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.PVTranslate">
            <summary>
            Specifies whether connection will check the Pervasive server encoding
            to use.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ServerDSN">
             <summary>
             The name of the data source on the server, 
             such as ServerDSN=SERVERDEMO. 
            <para>The default value is DEMODATA.</para>
             </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Timestamp">
            <summary>
            Specifies whether Pervasive TimeStamps are stored and retrieved as strings 
            in the ADO.NET data provider.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.TimeType">
            <summary>
            Specifies whether Pervasive Times are retrieved as Timespan or DateTime 
            in the ADO.NET data provider.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ConnectionReset">
             <summary>
             Gets or sets a Boolean value that pecifies whether a connection that is removed from 
             the connection pool for reuse by an application will have its 
             state reset to the initial configuration settings of the connection. 
              
             </summary>
             <remarks><para>This property corresponds to the Connection Reset connection string option.</para>
             <para>When set to False (the initial default), the data provider does not 
            reset the state of the connection.</para>
             <para>
             Resetting the state impacts performance because the new connection must issue additional 
             commands to the server, for example, resetting the current database to the value 
             specified at connect time.</para></remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ConnectionRetryCount">
            <summary>
            Gets or sets the number of times the data provider tries to connect 
            to the primary server, and, if specified, the alternate servers after 
            the initial unsuccessful attempt. 
            
            </summary>
            <remarks><para>This property corresponds to the Connection Retry Count connection string option.</para>
            <para>The value can be any integer from 0 to 65535. </para>
            
            <para>When set to 0 (the initial default), the data provider does not 
            try to reconnect after the initial unsuccessful attempt. </para>
            <para>If a connection is not established during the retry attempts, the data provider returns an error that 
            is generated by the last server to which it attempted to connect.</para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ConnectionRetryDelay">
            <summary>
            Gets or sets the number of seconds the data provider waits after 
            the initial unsuccessful connection attempt before retrying 
            a connection to the primary server, and, if specified, 
            the alternate servers. 
            </summary>
            <remarks><para>This property corresponds to the Connection Retry Delay connection string option.</para> 
            <para>The value can be any integer from 0 to 65535. </para>
            <para>The initial default is 3 (seconds). When set to 0, 
            there is no delay between retrying the connection. </para>
            <para>NOTE: This property has no effect unless the ConnectionRetryCount property is set to an integer greater than 0. </para>
            <para>This property and the ConnectionRetryCount property, 
            which specifies the number of times the data provider attempts to connect 
            after the initial unsuccessful attempt, can be used in conjunction with 
            connection failover.</para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ConnectionTimeout">
            <summary>
            Gets or sets the number of seconds after which the attempted 
            connection to the Pervasive PSQL server will fail if not yet connected. If connection failover is enabled, this option applies to each connection attempt. 
            </summary>
            <remarks>This property corresponds to the Connection Timeout connection string 
            option.
            <para>When set to 0, the data provider never times out on a connection attempt. 
            The initial default is 30 seconds. </para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.EnableTrace">
             <summary>
             Gets or sets a Boolean value that specifies whether tracing is enabled. The initial default is False.
             </summary>
             <remarks>During debugging, sensitive data can be read, even if it is stored as a private or internal variable, and access is limited to the same assembly. To maintain security, trace logs 
             show passwords as five asterisks (*****).
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.LoadBalanceTimeout">
            <summary>
            Gets or sets the number of seconds to keep connections in a 
            connection pool. The Min Pool Size property 
            can cause some connections to ignore this value.
            </summary>
            <remarks><para>This property corresponds to the Load Balance Timeout connection string option. </para>
            <para>The value can be any integer from 0 to 65535. 
            When set to 0 (the initial default), the connections have the maximum timeout.</para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.MaxPoolSize">
             <summary>
             Gets or sets the maximum number of connections within a single pool. When the maximum number is reached, no additional connections can be added to the connection pool. 
             The value can be any integer from 1 to 65535. 
             </summary>
             <remarks><para>This property corresponds to the Max Pool Size connection string 
             option.</para>
             <para>The initial default is 100. </para>
             </remarks>
            
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.MaxStatementCacheSize">
             <summary>
             Gets or sets the maximum number of statements that can be held in the statement cache.
             Setting the cache size to 0 will disable statement caching.
             </summary>
             <remarks><para>This property corresponds to the Max Statement Cache Size connection string 
             option.</para>
             <para>The initial default is 10. </para>
             </remarks>
            
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.MinPoolSize">
            <summary>
            Gets or sets the minimum number of connections are opened and 
            placed in a connection pool when it is created. The connection 
            pool retains this number of connections, even when some 
            connections have exceeded their Load Balance Timeout value.
            </summary>
            <remarks><para>This property corresponds to the Min Pool Size connection string 
            option.</para>
            <para>The value can be any integer from 0 to 65535. </para>
            
            <para>When set to 0 (the initial default), no additional connections are placed in the connection pool when it is created. </para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.ParameterMode">
            <summary>
            Gets or sets the parameter mode,  The parameter mode controls the parameter marker format
            and the whether parameters are bound ordinally or by name.
            </summary>
            <remarks>This property corresponds to the Parameter Mode connection string option.</remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Password">
            <summary>
            Gets or sets a case-insensitive password used to connect to your 
            Pervasive PSQL database.
            </summary>
            <remarks>This property corresponds to the Password connection string option.</remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            Gets or sets a Boolean value that specifies whether to display secure information in clear text 
            in the ConnectionString property of the Connection object. 
            
            </summary>
            <remarks>This property corresponds to the Persist Security Info 
            connection string option.
            <para>When set to true, the value of the Password connection string 
            option is displayed in clear text. </para>
            <para>When set to false (the initial default), the data provider 
            does not display secure information in clear text.</para></remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.Pooling">
            <summary>
            Gets or sets a Boolean value that specifies whether connections are pooled. 
            </summary>
            <remarks><para>This property corresponds to the Pooling connection string option.</para>
            <para>When set to true (the initial default), 
            connection pooling is enabled. </para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.SchemaCollectionTimeout">
            <summary>
            Gets or sets the number of seconds after which the attempted 
            schema collection operation to the Psql server will fail if not yet completed. 
            </summary>
            <remarks>This property corresponds to the Schema Collection Timeout connection string 
            option.
            <para>When set to 0, the data provider never times out on a schema collection operation attempt. 
            The initial default is 120 seconds. </para>
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.SchemaOptions">
            <summary>
            Bit flags that can be used control the amount of schema information returned by the GetSchema method.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.SocketReceiveBufferSize">
            <summary>
            Sets the socket receive buffer size.  The default (0) implies the provider should use
            pre-set optimal value.  -1 implies the provider should use the OS default.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.SocketSendBufferSize">
            <summary>
            Sets the socket send buffer size.  The default (0) implies the provider should use the
            pre-set optimal value.  -1 implies the provider should use the OS default.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.StatementCacheMode">
            <summary>
            Gets or sets the statement cache mode,  The statement cache mode controls the behavior of the statement
            cache.  Statements can be cached automatically or only cached when a command is explicitly marked.
            </summary>
            <remarks>This property corresponds to the Statement Cache Mode connection string option.</remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.TCPNoDelay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.TraceFile">
            <summary>
            <para>Gets or sets the path and name of the trace file.</para>
            <para>The initial default is \\PVSW_NETTrace.txt. 
            If the trace file does not exist, the data provider creates it.</para>
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.UseCurrentSchema">
            <summary>
            Indicates whether the schema collections should automatically restrict using the current schema when 
            the schema restriction is omitted.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlConnectionStringBuilder.UserID">
            <summary>
            Gets or sets the default user name used to connect to your Psql 
            database.
            </summary>
            <remarks>This property corresponds to the User ID connection string option.</remarks>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlCounters">
            <summary>
            Summary description for PervasiveCounters.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlDataAdapter">
            <summary>
            Represents a set of data commands 
            and a connection to a Pervasive PSQL database that are used to fill the 
            DataSet and update the Pervasive PSQL database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.#ctor">
            <summary>
            Initializes a new instance of the PsqlDataAdapter class. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.#ctor(Pervasive.Data.SqlClient.PsqlCommand)">
            <summary>
            Initializes a new instance of the PsqlDataAdapter class.
            </summary>
            <param name="selectCommand">Gets or sets a SQL statement used to select
            records in the Pervasive PSQL database.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PsqlDataAdapter class.
            </summary>
            <param name="selectCommandText">A SQL 
            statement used to select records in the Pervasive PSQL database.</param>
            <param name="selectConnectionString">The connection string.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlConnection)">
            <summary>
            Initializes a new instance of the PsqlDataAdapter class.
            </summary>
            <param name="selectCommandText">A SQL 
            statement used to select records in the Pervasive PSQL database.</param>
            <param name="selectConnection">The open connection to the Pervasive PSQL database.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Represents the method that will handle the RowUpdated event of a PsqlDataAdapter.
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The PsqlCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns>A RowUpdatedEventArgs that contains the event data.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Occurs during an Update before a command is executed against the Pervasive PSQL database. 
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The PsqlCommand to execute when performing the Update. </param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns>A DbRowUpdatingEventArgs that contains the event data.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Occurs during an Update before a command is executed against the Pervasive PSQL database.
            </summary>
            <param name="value">Raises the RowUpdating event of an ADO.NET data provider.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Represents the method that will handle the RowUpdated event of a PsqlDataAdapter.
            </summary>
            <param name="value">A RowUpdatedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataAdapter.SelectCommand">
            <summary>
            Gets or sets a SQL statement used to select
            records in the Pervasive PSQL database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataAdapter.InsertCommand">
            <summary>
            Gets or sets a SQL statement that is used 
            to insert new records into the Pervasive PSQL database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataAdapter.UpdateCommand">
            <summary>
            Gets or sets a SQL statement that is used to
            update records in the Pervasive PSQL database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataAdapter.DeleteCommand">
            <summary>
            Gets or sets a SQL statement that is used for
            deleting records from the Pervasive PSQL data source.
            </summary>
        </member>
        <member name="E:Pervasive.Data.SqlClient.PsqlDataAdapter.RowUpdating">
            <summary>
            Occurs during an Update before a command
            is executed against the Pervasive PSQL database.
            </summary>
        </member>
        <member name="E:Pervasive.Data.SqlClient.PsqlDataAdapter.RowUpdated">
            <summary>
            Represents the method that 
            will handle the RowUpdated event of a PsqlDataAdapter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataAdapter.UpdateBatchSize">
            <summary>
            Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlRowUpdatingEventHandler">
            <summary>
            Represents the method that 
            will handle the RowUpdated event of a PsqlDataAdapter.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlRowUpdatedEventHandler">
            <summary>
            Represents the method that 
            will handle the RowUpdated event of a PsqlDataAdapter.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlRowUpdatingEventArgs">
            <summary>
            Provides data for the RowUpdating 
            event of the Pervasive PSQL data provider.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdated event 
            of the Pervasive PSQL data provider.
            </summary>
            <param name="row">The DataRow to send through an Update.</param>
            <param name="command">The PsqlCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlRowUpdatingEventArgs.Command">
            <summary>
            Represents a SQL statement or stored procedure to execute against a Pervasive PSQL database.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlRowUpdatedEventArgs">
            <summary>
            The PsqlRowUpdatedEventArgs object provides data for the RowUpdated 
            event of the Pervasive PSQL data provider.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            The PsqlRowUpdatedEventArgs object provides data for the RowUpdated 
            event of the Pervasive PSQL data provider.
            </summary>
            <param name="row">Gets the DataRow to send through an Update.</param>
            <param name="command">Gets or sets the PsqlCommand to execute when performing the Update.</param>
            <param name="statementType">Gets the data type of the SQL statement to execute.</param>
            <param name="tableMapping">Gets the DataTableMapping sent through the Update.</param>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlRowUpdatedEventArgs.Command">
            <summary>
            Gets or sets the PsqlCommand executed when an UPDATE is called.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlDataReader">
            <summary>
            The PsqlDataReader class allows you to retrieve a read-only stream of rows
            from a database. The PsqlDataReader does not cache data in memory, which 
            makes it a good choice when you must retrieve large amounts of data. Because  
            only one row is in memory at any given time, system overhead is reduced.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.Close">
            <summary>
            Closes the DataReader. 
            Always call the Close method when you finish using the PsqlDataReader.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.Read">
            <summary>
            Advances the PsqlDataReader to the 
            next result.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.NextResult">
            <summary>
            Advances the PsqlDataReader object 
            to the next result.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetSchemaTable">
            <summary>
            The GetSchemaTable() method returns a DataTable that describes the 
            column metadata of the data provider's DataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetName(System.Int32)">
            <summary>
            Gets the column name of the specified
            column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The name of the column.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source
            data type.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The name of the source data type.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type 
            of the object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetEnumerator">
            <summary>
            Returns an IEnumerator that can be used 
            to iterate through the rows in the data reader.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the rows in the data reader.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetValue(System.Int32)">
            <summary>
            Gets value of a column at a specified 
            ordinal, returning the value in the column's native format.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value to return.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetValues(System.Object[])">
            <summary>
            Gets all of the attribute columns in the 
            current row.
            </summary>
            <param name="values">An array of type Object into which to copy the 
            attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>A Boolean that is the value of the column.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a
            byte.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a byte.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified
            column offset into the buffer as an array. It starts at the given buffer
            offset.
            </summary>
            <returns>The actual number of bytes read.</returns>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index 
            within the field where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to read the 
            stream of bytes.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a character.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a character.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters into
            the buffer as an array, starting from the specified buffer offset of the
            specified column offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row 
            where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a GUID (globally-unique identifier).
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a GUID.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
            <returns>The value of the specified column as a 16-bit signed integer</returns>
            <param name="i">The zero-based column ordinal.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a 32-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 32-bit signed integer.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a 64-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a single-precision, floating-point number.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a single-precision 
            floating-point number.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of a specified column as a double-precision
            floating-point number.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 
            double-precision floating-point number.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a string.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a string.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a specified column as a Decimal object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a decimal object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a DateTime object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a DateTime object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether 
            the column contains missing values.
            </summary>
            <param name="i">The zero-based cardinal ordinal.</param>
            <returns>true if the specified column value is equivalent to DBNull; 
            otherwise, false.</returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataReader.IsClosed">
            <summary>
            Indicates whether the PsqlDataReader 
            is closed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataReader.RecordsAffected">
            <summary>
            Gets the number of rows 
            changed, inserted, or deleted by executing a SQL statement.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataReader.HasRows">
            <summary>
            Gets a value indicating whether the PsqlDataReader has one or
            more rows.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the 
            current row.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlDataReader.Depth">
            <summary>
            Gets a value that shows how deeply 
            the current row is nested.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlDbType">
            <summary>
            Gets or sets the System.Data.DbType of the parameter.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.BFloat4">
            <summary>
            Data type for a single-precision floating point number.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.BFloat8">
            <summary>
            Data type for a double-precision real number.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.BigInt">
            <summary>
            Integer data type representing signed 64-bit integers.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Binary">
            <summary>
            The data type for a Pervasive Binary data type.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Bit">
            <summary>
            The data type for a Pervasive BIT data type.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Char">
            <summary>
            A Pervasive CHAR data type that contains a fixed-length character. 
            This maps to String.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Currency">
            <summary>
            Data type with an implied four digit scale of decimal places.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Date">
            <summary>
            A Pervasive DATE data type that 
            contains a fixed-length representation of a date.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.DateTime">
            <summary>
            A Pervasive DATETIME data type that 
            contains a fixed-length representation of a DateTime.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Decimal">
            <summary>
            A Pervasive NUMBER data type that contains variable-length numeric data. 
            with a maximum precision and scale of 64. This maps to Decimal.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Double">
            <summary>
            Data type for a double-precision floating point number.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Float">
            <summary>
            Data type for a Pervasive float.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Identity">
            <summary>
            A signed 4-byte integer. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Integer">
            <summary>
            Integer data type representing signed 32-bit integers.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.LongVarBinary">
            <summary>
            A Pervasive LONGVARBINARY data type that contains variable-length binary data with a maximum 
            size of 2,147,483,647 bytes. This maps to an Array of type Byte.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.LongVarChar">
            <summary>
            Variable-length character data with a maximum length of 2<exp>31</exp> - 1 (2,147,483,647) characters. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Money">
            <summary>
            Data type for Money.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Numeric">
            <summary>
            Numeric data type with fixed precision and scale. The maximum precision is 15.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.NumericSA">
            <summary>
            COBOL data type that is the same as the NUMERIC data type, except that the 
            embedded sign has an ASCII value. The maximum precision is 15.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.NumericSTS">
            <summary>
            COBOL data type that is the same as the NUMERIC data type, 
            except that the sign is saved in a separate byte. The maximum precision is 14.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Real">
            <summary>
            A 4-byte FLOAT.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.SmallIdentity">
            <summary>
            Integer data type representing signed 16-bit integers.  
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.SmallInt">
            <summary>
            Integer data from -2<exp>15</exp> (-32,768) through 2<exp>15</exp> - 1 (32,767). 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Time">
            <summary>
            A Pervasive TIME data type that 
            contains a fixed-length representation of a time.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Timestamp">
            <summary>
            A Pervasive TIMESTAMP data type that 
            contains a fixed-length representation of a timestamp.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.TinyInt">
            <summary>
            Integer data from -128 through 127. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.UBigInt">
            <summary>
            Integer data type representing unsigned 64-bit integers.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.Guid">
            <summary>
            A Pervasive GUID(Global Unique Identifier) data type.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.UInteger">
            <summary>
            Integer data type representing unsigned 32-bit integers.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.USmallInt">
            <summary>
            Integer data type representing unsigned 16-bit integers.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.UTinyInt">
            <summary>
            Byte data type.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlDbType.VarChar">
            <summary>
            A variable-length stream of characters.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlError">
            <summary>
            Collects information relevant to errors and warnings 
            generated by the database server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlError.Message">
            <summary>
            Returns the error message text from the 
            database server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlError.Number">
            <summary>
            Returns the error number from the database server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlError.ErrorPosition">
            <summary>
            Returns the offset in the SQL statement 
            for which the error applies. If the offset is not applicable to the
            error, 0 is returned.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlError.SQLState">
            <summary>
            Returns the SQL state associated with the
            current error condition.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlErrorCollection">
            <summary>
            The PsqlErrorCollection object is created by a PsqlException to 
            contain all of the errors generated by the Pervasive server.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the data provider's Error objects 
            from the ErrorCollection to the specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from the ErrorCollection. 
            The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlErrorCollection.GetEnumerator">
            <summary>
            Returns the IEnumerator interface for a given array.
            </summary>
            <returns>The IEnumerator interface for an array.</returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlErrorCollection.Count">
            <summary>
            Gets the number of Error objects 
            in the collection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlErrorCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether
            access to the ErrorCollection is thread-safe (synchronized).
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlErrorCollection.SyncRoot">
            <summary>
            Gets the object used to synchronize
            access to the data provider's ErrorCollection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlErrorCollection.Item(System.Int32)">
            <summary>
            Collects information relevant to errors and warnings 
            generated by the database server.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlExceptionReason">
            <summary>
            The PsqlExceptionReason property returns the reason code when the 
            Pervasive server returns an error.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_ENCRYPTION_ERROR">
            <summary>
            Client/Server Encryption error.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_BAD_ISOLATION_LEVEL">
            <summary>
            Invalid isolation level.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_SP_PARAMETER_COUNT_MISMATCH">
            <summary>
            Stored Procedure parameter count did not match.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_LITERAL_FOR_INPUT_ONLY">
            <summary>
            Literal for input only.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_NOT_CONNECTED">
            <summary>
            Operation requires a connected state.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_BAD_HOST_PORT">
            <summary>
            Cannot create socket.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_BAD_DATA_TYPE">
            <summary>
            Bad Pervasive data type.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.USER_CANCELED_OPERATION">
            <summary>
            The user canceled the operation.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.DTC_NOT_SUPPORTED">
            <summary>
              Distributed transactions not supported.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.NO_TCP_ADDRESS_FOUND">
            <summary>
            No TCP address was found, or the TCP address specified was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.CANNOT_USE_SP_WITH_ARRAY_BIND">
            <summary>
            Cannot use a stored procedure with an array bind.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.CANNOT_USE_OUT_PARMS_WITH_ARRAY_BIND">
            <summary>
            Cannot use out parameters with an array bind.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.OUTPUT_ARRAY_BIND_NOT_OK_WITH_INPUT">
            <summary>
            An output array bind cannot be used with input.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.OUTPUT_ARRAY_BIND_ONLY_FOR_SP">
            <summary>
            The output array bind is only for stored procedures.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.BAD_SERVER_TYPE">
            <summary>
            The specified server type is invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_LNA_GET_ERRORS">
            <summary>
            Get errors occurred.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_UNKNOWN_ERROR">
            <summary>
            Unknown Pervasive error occurred.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_LNA_BAD_RESPONSE">
            <summary>
            The response was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_LNA_SESSION_CLOSED">
            <summary>
            The connection has been closed.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_INVALID_PARAM_NUM">
            <summary>
            The parameter number was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_LNA_INVALID_DATA_TYPE">
            <summary>
            The data type was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_INVALID_DATA_TYPE">
            <summary>
            The data type was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_INCORRECT_CURSOR_TYPE">
            <summary>
            The specified cursor type is incorrect.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_RESULTSET_NOT_UPDATABLE">
            <summary>
            The resultset is not updatable.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_INVALID_COL_NUM">
            <summary>
            The column number was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_SQL_INVALID_BIND_SIZE">
            <summary>
            The bind size was invalid.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_TXN_NOPARALLEL">
            <summary>
            Psql does not support Parallel transactions.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_BAD_PARAMETER_DIRECTION">
            <summary>
            Invalid parameter direction.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_COMMAND_TEXT_NOT_SP">
            <summary>
            Command text not Stored Procedure.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_COMMAND_TYPE_NOT_SP">
            <summary>
            Command type not Stored Procedure.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.PERVASIVE_SP_AMBIGOUS">
            <summary>
            Ambiguous Stored Procedure.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlExceptionReason.ERR_NOT_IMPL">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlException">
            <summary>
            Returns the reason code when the 
            Pervasive PSQL server returns an error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlException.Errors">
            <summary>
            Returns a PsqlErrorCollection of one or more
            PsqlError objects.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlException.Message">
            <summary>
            Returns the error message for the exception.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlException.Number">
            <summary>
            Returns the numeric value associated with a specific error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlException.ErrorPosition">
            <summary>
            Returns the offset in the SQL statement 
            for which the error applies. If the offset is not applicable to the
            error, 0 is returned.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlException.SQLState">
            <summary>
            Returns the SQL state associated with the
            current error condition.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlFactory">
            <summary>
            Represents a set of methods for creating instances of 
            the Pervasive PSQL data provider's implementation of the data source classes.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlFactory.Instance">
            <summary>
            Gets an instance of the PsqlFactory. This can be used 
            to retrieve strongly typed data objects.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateCommand">
            <summary>
            Returns a strongly typed DBCommand instance.
            </summary>
            <returns>A new strongly typed instance of DbCommand.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            Returns a new CodeAccessPermission.
            </summary>
            <param name="state">A member of the PermissionState enumeration.</param>
            <returns>A strongly typed instance of CodeAccessPermission.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateCommandBuilder">
            <summary>
            Returns a strongly typed DBCommandBuilder instance.
            </summary>
            <returns>A new strongly typed instance of DbCommandBuilder.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateConnection">
            <summary>
            Returns a strongly typed instance of DbConnection.
            </summary>
            <returns>A new strongly typed instance of DbConnection.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateDataAdapter">
            <summary>
            Returns a strongly typed DBDataAdapter instance.
            </summary>
            <returns>A new strongly typed instance of DbDataAdapter.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a strongly typed instance of DbConnectionStringBuilder.
            </summary>
            <returns>A new strongly typed instance of DbConnectionStringBuilder.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlFactory.CreateParameter">
            <summary>
            Returns a strongly typed DBParameter instance.
            </summary>
            <returns>A new strongly typed instance of DbParameter.</returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlInfoMessageEventArgs">
            <summary>
            The PsqlInfoMessageEventArgs object is passed as input 
            to the PsqlInfoMessageEventHandler. It contains information relevant to
            a warning generated by the Pervasive server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlInfoMessageEventArgs.Errors">
            <summary>
            The ErrorCollection class is created by the data provider's Exception object
            to contain all of the errors generated by the Pervasive database server.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlInfoMessageEventArgs.Message">
            <summary>
            The Message property gets the full text of the message sent from the database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlInfoMessageEventArgs.Source">
            <summary>
            The Source property gets the name of the object that generated the error.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlInternalParameter">
            <summary>
            Summary description for PsqlInternalParameter.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlInternalParameterCollection.#ctor(System.Int32)">
            <summary>
            Constructor for preloading the collection with the given
            number of parameters.  It is anticipated that this constructor
            will be used only to create a dummy internal parameter collection
            for the sake of the Prepare method.  Since the user does not
            actually need to provide parameters before calling prepare, we
            still need to patch up the SQL statement parameter markers which
            requires an internal parameter collection.
            </summary>
            <param name="paramCount"></param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlInternalParameterCollection.copyBackOutputParams(Pervasive.Data.SqlClient.PsqlSession,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>
            Copy the output parameter values from the internal parameter objects
            to the user parameter objects.
            </summary>
            <param name="userParams"></param>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames">
            <summary>
            Provides a list of constants for the well-known MetaDataCollections: DataSourceInformation, DataTypes, MetaDataCollections, ReservedWords, and Restrictions.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Catalogs">
            <summary>
            A constant for use with the GetSchema method that represents the Catalog collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Columns">
            <summary>
            A constant for use with the GetSchema method that represents the Columns collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.ForeignKeys">
            <summary>
            A constant for use with the GetSchema method that represents the ForeignKeys collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Indexes">
            <summary>
            A constant for use with the GetSchema method that represents the Indexes collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.PrimaryKeys">
            <summary>
            A constant for use with the GetSchema method that represents the PrimaryKeys collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.ProcedureParameters">
            <summary>
            Returns information about the parameters and return codes of procedures.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Procedures">
            <summary>
            A constant for use with the GetSchema method that represents the Procedures collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Schemata">
            <summary>
            Returns the schema objects that are owned by a given user.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.TablePriviledges">
            <summary>
            Identifies the priviledges on tables defined in the catalog that are available to or granted by a given user.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Tables">
            <summary>
            A constant for use with the GetSchema method that represents the Tables collection.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlMetaDataCollectionNames.Views">
            <summary>
            A constant for use with the GetSchema method that represents the Views collection.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlParameter">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlDbType)">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. 
            The default is an empty string ("").</param>
            <param name="type">Returns the type of the PsqlDbType.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. 
            The default is an empty string ("").</param>
            <param name="value">Returns the value of the PsqlDbType.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">Returns the type of the PsqlDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">Returns the type of the PsqlDbType.</param>
            <param name="size">Size is a public property that gets or sets the maximum size, in bytes,
            of the data within the column.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the PSqlDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
            <param name="direction">A value that indicates whether the parameter 
            is input-only, output-only, bidirectional, or the return value parameter 
            of a stored procedure.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to use when loading Value.</param>
            <param name="sourceColumnNullMapping">The source column NULL mapping.</param>
            <param name="paramValue">The value of the PsqlDbType.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.#ctor(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the PsqlParameter class.
            </summary>
            <param name="parameterName">The name of the PsqlParameter. The default is an empty string ("").</param>
            <param name="dbType">Returns the type of the PsqlDbType. </param>
            <param name="size">Gets or sets the maximum size, in bytes, of the data within the column.</param>
            <param name="direction">Whether the parameter is input-only, output-only, bidirectional, or the 
            return value parameter of a stored procedure. </param>
            <param name="isNullable">Whether the parameter accepts null values.</param>
            <param name="precision">The maximum number of digits used to represent 
            the Value property.</param>
            <param name="scale">The number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column that is mapped to the DataSet 
            and used for loading or returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to use when loading Value.</param>
            <param name="paramValue">The value of the PsqlDbType.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.ToString">
            <summary>
            Returns the parameter name as string representation of the parameter.
            </summary>
            <returns>The parameter name as a string representation of the ParameterName.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.ResetDbType">
            <summary>
            Resets the DbType property to its original settings.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.ResetPsqlDbType">
            <summary>
            Resets the PsqlDbType property to its original settings.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.System#ICloneable#Clone">
            <summary>
            A copy of the instance of the Parameter class.
            </summary>
            <returns>A PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameter.inferDbType">
            <summary>
            Infers the DbType for this parameter from the data provider's native type if 
            it has been set. DbType.String should be returned when the type
            cannot be inferred.
            </summary>
            <returns>DbType.String</returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.DbType">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.PsqlDbType">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of 
            digits used to represent the Value property.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places 
            to which Value is resolved.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes,
            of the data within the column.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.Direction">
            <summary>
            Gets or sets a value that indicates 
            whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates 
            whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the 
            PsqlParameter object.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates 
            whether the source column is nullable. 
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.SourceVersion">
            <summary>
            Gets or sets the DataRowVersion to 
            use when loading Value.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.ArrayBindStatus">
            <summary>
            An array of PsqlBindStatus values. This array can be specified
            by user to indicate specific values as NULL.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.NativeDbTypeAsString">
            <summary>
            Returns a string describing the native data
            type. It is intended to be used by the tracing code.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameter.DbTypeAsString">
            <summary>
            Returns a string describing the native data
            type. It is intended to be used by the tracing code.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlParameterStatus">
            <summary>
            Indicates parameter value status when using array binding.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlParameterStatus.OK">
            <summary>
            A status of OK means the operation succeeded. All entries are marked as OK. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.PsqlParameterStatus.Null">
            <summary>
            A status of Null means the operation failed. The data provider assigns this value to 
            all entries except for the row that caused the failure. The exception is
            thrown for the failed operation reflects the error for the first row to fail. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlParameterCollection">
            <summary>
            The PsqlParameterCollection class is a collection of parameters that are
            relevant to an PsqlCommand. The class also represents the mapping of the 
            parameters to the columns in a DataSet.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameter">The PsqlParameter to add to the collection.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(System.String,Pervasive.Data.SqlClient.PsqlDbType)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="type">The Psql data type of the parameter.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The PsqlParameter to add to the collection.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the PsqlType values.</param>
            <param name="size">The width of the column.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32,System.String)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the PsqlType values.</param>
            <param name="size">The width of the column.</param>
            <param name="sourceColumn">SourceColumn is a public property that gets or sets the name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Add(System.String,Pervasive.Data.SqlClient.PsqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds the specified PsqlParameter to the 
            PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the PsqlType values.</param>
            <param name="size">The width of the column.</param>
            <param name="direction">A value that indicates 
            whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.</param>
            <param name="isNullable">A value that indicates 
            whether the parameter accepts null values.</param>
            <param name="precision">The maximum number of 
            digits used to represent the Value property.</param>
            <param name="scale">The number of decimal places 
            to which Value is resolved.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to 
            use when loading Value.</param>
            <param name="paramValue">The value of the PsqlDbType.</param>
            <returns>The new PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of values to the end of the PsqlParameterCollection.
            </summary>
            <param name="values">The Array values to add.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.AddRange(Pervasive.Data.SqlClient.PsqlParameter[])">
            <summary>
            Adds elements to the end of the PsqlParameterCollection.
            </summary>
            <param name="values">The PsqlParameter values to be added.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a value to the end of the PsqlParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
            <returns>An PsqlParameter object.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Contains(Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Gets a value that indicates whether an 
            PsqlParameter object exists in the collection.
            </summary>
            <param name="param">The name of the PsqlParameter 
            object to find.</param>
            <returns>true if the collection contains the PsqlParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value that indicates whether a 
            PsqlParameter object exists in the collection.
            </summary>
            <param name="parameterName">The name of the PsqlParameter 
            object to find.</param>
            <returns>true if the collection contains the PsqlParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies PsqlParameter objects from 
            the PsqlParameterCollection to a specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from the current Array.</param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.CopyTo(Pervasive.Data.SqlClient.PsqlParameter[],System.Int32)">
            <summary>
            Copies PsqlParameter objects from the PsqlParameterCollection to a specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the current Array. </param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.GetEnumerator">
            <summary>
            Returns the IEnumerator interface for a given array.
            </summary>
            <returns>The IEnumerator interface for an array.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the PsqlParameter object within the collection.
            </summary>
            <param name="value">The name of the PsqlParameter object to find.</param>
            <returns>The zero-based location of the PsqlParameter in the collection.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.IndexOf(Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Gets the location of the PsqlParameter 
            object within the collection.
            </summary>
            <param name="param">The name of the PsqlParameter 
            object to find.</param>
            <returns>The zero-based location of the PsqlParameter in the collection.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the PsqlParameter 
            object within the collection.
            </summary>
            <param name="parameterName">The zero-based location of the PsqlParameter in the collection.</param>
            <returns>The zero-based location of the PsqlParameter in the collection.</returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an PsqlParameter object into the collection at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="value">The PsqlParameter to add to the collection.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Insert(System.Int32,Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Inserts a PsqlParameter object into the collection
            at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is 
            to be inserted within the collection.</param>
            <param name="param">The PsqlParameter to add to the collection.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified PsqlParameter from 
            the collection.
            </summary>
            <param name="value">The PsqlParameter object to remove from the collection.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.Remove(Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Removes the specified PsqlParameter from 
            the collection.
            </summary>
            <param name="param">The PsqlParameter object to remove from 
            the collection.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the PsqlParameter object from the collection.
            </summary>
            <param name="index">The zero-based index of the PsqlParameter object to remove.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the PsqlParameter object from the collection.
            </summary>
            <param name="parameterName">The name of the PsqlParameter to remove.</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.getNthNonReturnValueParameter(System.Int32)">
            <summary>
            Gets the Nth parameter from the collection that is not a return
            value. Our spec allows the user to put the return value in 
            any spot in the collection, so we need to skip it when counting
            parameters for a stored procedure.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlParameterCollection.getParameterOrdinal(Pervasive.Data.SqlClient.PsqlParameter)">
            <summary>
            Gets the ordinal number (0 based) of the given parameter.
            </summary>
            <param name="userParameter"></param>
            <returns></returns>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.Count">
            <summary>
            Gets the number of PsqlParameter objects in the collection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether the PsqlParameterCollection has a fixed size.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether the PsqlParameterCollection is thread-safe.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the PsqlParameterCollection is read-only.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.SyncRoot">
            <summary>
            Gets the object used to synchronize access to the PsqlParameterCollection.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.Item(System.Int32)">
            <summary>
            Initializes a new 
            instance of the PsqlParameter class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.Item(System.String)">
            <summary>
            Initializes a new 
            instance of the PsqlParameter class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlParameterCollection.ReturnValueParameter">
            <summary>
            Gets the first Return Value parameter found in the collection.
            If none is found, null is returned.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlPermission">
            <summary>
            The PsqlPermission class enables the Pervasive PSQL Data Provider 
            to ensure that a user has a security level sufficient to access an Pervasive 
            database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlPermission.#ctor">
            <summary>
            Enables the Pervasive PSQL data provider 
            to ensure that a user has a security level sufficient to access a Pervasive 
            database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            The PsqlPermission class enables the Pervasive PSQL Data Provider 
            to ensure that a user has a security level sufficient to access a Pervasive 
            database.
            </summary>
            <param name="state">One of the System.Security.Permissions.PermissionState values</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlPermission.Copy">
            <summary>
            Returns the PsqlPermission as an IPermission.
            </summary>
            <returns>A copy of the current permission object.</returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlPermissionAttribute">
            <summary>
            The PsqlPermissionAttribute object initializes a new instance of 
            the PsqlPermissionAttribute class with one of the SecurityAction values.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            The SecurityAction property specifies the security actions that can be performed using 
            declarative security.
            </summary>
            <param name="action">One of the System.Security.Permissions.SecurityAction 
            values representing an action that can be performed using declarative security</param>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlPermissionAttribute.CreatePermission">
            <summary>
            The CreatePermission() method returns a PsqlPermission object that is 
            configured according to the attribute properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlTransactionState">
            <summary>
            Summary description for PsqlSession.
            </summary>
            
        </member>
        <member name="T:Pervasive.Data.SqlClient.PervasiveStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.BAD_SERVER_TYPE">
            <summary>
              Looks up a localized string similar to The Server Type option must be either DEDICATED or SHARED..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.CANNOT_USE_LONG_WITH_ARRAY_BIND">
            <summary>
              Looks up a localized string similar to LONG and LONG RAW are not supported when array binding parameter values..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.CANNOT_USE_OUT_PARMS_WITH_ARRAY_BIND">
            <summary>
              Looks up a localized string similar to Array bind feature is only supported with input parameters..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.COMMUNICATION_LINK_FAILURE">
            <summary>
              Looks up a localized string similar to Communication Link Failure.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.COUNTER_CATEGORY_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Counters for DataDirect Connect for ADO.NET Pervasive Data Provider.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_AlternateServers">
            <summary>
              Looks up a localized string similar to A list of database servers to which the data provider will try to connect if the primary database server is unavailable..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_DatabaseName">
            <summary>
              Looks up a localized string similar to The internal database name to which you wish to connect..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Encoding">
            <summary>
              Looks up a localized string similar to Allows user to specify the code page to be used for translating the string data stored in the database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Encrypt">
            <summary>
              Looks up a localized string similar to When Set to always, the data provider uses Encrypted Network Connectivity.  When set to Never, the data provider does not use Encrypted Network Connectivity .
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Encryption">
            <summary>
              Looks up a localized string similar to Determines the minimum level of encryption allowed by the data provider (low, medium, high).
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Host">
            <summary>
              Looks up a localized string similar to Either the name or the IP address of the Pervasive PSQL server to which you want to connect..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_InitializationString">
            <summary>
              Looks up a localized string similar to Specifies one statement that will be issued immediately after connecting to the database to manage session settings..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_LoadBalancing">
            <summary>
              Looks up a localized string similar to When true, client load balancing is used in attempts to connect to primary and alternate database servers..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Password">
            <summary>
              Looks up a localized string similar to A case-insensitive password used to connect to your Pervasive PSQL database..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_Port">
            <summary>
              Looks up a localized string similar to The TCP port of the listener running on the Pervasive PSQL database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_ServerDSN">
            <summary>
              Looks up a localized string similar to The name of the data source on the server..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_TimeStamp">
            <summary>
              Looks up a localized string similar to Make default mapping of Timestamp string instead of DateTime..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Description_UserID">
            <summary>
              Looks up a localized string similar to The default user name used to connect to your Pervasive PSQL database..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.DTC_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to DTC is not supported.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_LNA_BAD_RESPONSE">
            <summary>
              Looks up a localized string similar to Invalid LNA response packet.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_LNA_GET_ERRORS">
            <summary>
              Looks up a localized string similar to Error retrieving error information.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_LNA_INVALID_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Invalid binding data type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_LNA_SESSION_CLOSED">
            <summary>
              Looks up a localized string similar to LNA session closed.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_NOT_IMPL">
            <summary>
              Looks up a localized string similar to Function not implemented.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_INCORRECT_CURSOR_TYPE">
            <summary>
              Looks up a localized string similar to Incorrect cursor type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_INVALID_BIND_SIZE">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_INVALID_COL_NUM">
            <summary>
              Looks up a localized string similar to Invalid column number.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_INVALID_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Invalid SQL data type.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_INVALID_PARAM_NUM">
            <summary>
              Looks up a localized string similar to Invalid parameter number.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_RESULTSET_NOT_UPDATABLE">
            <summary>
              Looks up a localized string similar to Resultset not updatable.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_SQL_UNKNOWN_ERROR">
            <summary>
              Looks up a localized string similar to Unknown error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.ERR_TXN_NOPARALLEL">
            <summary>
              Looks up a localized string similar to Psql does not support Parallel transactions.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.NO_TCP_ADDRESS_FOUND">
            <summary>
              Looks up a localized string similar to No suitable TCP address was found for the {0} in the TNSNAMES.ORA file..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.OUTPUT_ARRAY_BIND_NOT_OK_WITH_INPUT">
            <summary>
              Looks up a localized string similar to The MaxOutputArrayCount property is only supported for output parameters..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.OUTPUT_ARRAY_BIND_ONLY_FOR_SP">
            <summary>
              Looks up a localized string similar to The output array binding feature is only supported for stored procedures and functions..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Pervasive_BAD_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Specified data type is not a member of the PervasiveDbType enumeration..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.PERVASIVE_BAD_HOST_PORT">
            <summary>
              Looks up a localized string similar to Unable to establish socket connection to Pervasive server using host: {0} and port: {1}.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Pervasive_BAD_ISOLATION_LEVEL">
            <summary>
              Looks up a localized string similar to Cannot set unsupported isolation level.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.PERVASIVE_ENCRYPTION_ERROR">
            <summary>
              Looks up a localized string similar to Client/server encryption error.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Pervasive_LITERAL_FOR_INPUT_ONLY">
            <summary>
              Looks up a localized string similar to Literal argments are only supported for input only parameters..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Pervasive_NOT_CONNECTED">
            <summary>
              Looks up a localized string similar to Operation requires a connected state..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.Pervasive_SP_PARAMETER_COUNT_MISMATCH">
            <summary>
              Looks up a localized string similar to The specified stored procedure requires more parameters than the user has specified..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.PLSQL_BOOLEAN_TYPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Stored procedures or functions that use the PL/SQL BOOLEAN data type as a parameter type or return value type are not supported..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.PLSQL_RECORD_TYPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Stored procedures or functions that use the PL/SQL RECORD data type as a parameter type or return value type are not supported..
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.SOURCE_NAME">
            <summary>
              Looks up a localized string similar to DataDirect Connect for ADO.NET Pervasive Data Provider.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PervasiveStrings.USER_CANCELED_OPERATION">
            <summary>
              Looks up a localized string similar to CANCEL: user requested cancel of current operation.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlTableNameParser">
            <summary>
            Summary description for PsqlTableNameParser.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlTrace">
            <summary>
            The data provider supports tracing through the PsqlTrace class.
            The data provider can trace all of its method calls and the returns from those
            method calls to a trace file specified by the user.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlTrace.DumpFootprints">
            <summary>
            Displays the footprint of all source files
            in a data provider.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlTrace.EnableTrace">
            <summary>
            Enables tracing. By default, tracing is not enabled.
            </summary>
            <remarks>
            Setting EnableTrace starts the tracing process. 
            Therefore, you must define the property values for the trace file 
            before you enable tracing. Once the tracing process starts, 
            the values of the TraceFile and RecreateTrace properties cannot be changed.
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlTrace.TraceFile">
            <summary>
            Specifies the path and name of the trace file.
            </summary>
            <remarks>
            TraceFile is a provider-specific method of the PsqlTrace class.
            
            The initial default value is \PsqlTrace.txt. If the trace file does 
            not exist, the data provider creates it.
            </remarks>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlTrace.RecreateTrace">
            <summary>
            Recreates the trace file each time the application restarts. 
            By default, the trace file is appended.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlTransaction">
            <summary>
            The PsqlTransaction class represents the transaction that will be 
            performed on a database using the data provider.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlTransaction.Commit">
            <summary>
            Completes a transaction. Modifications made during a transaction 
            become a permanent part of the database.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.PsqlTransaction.Rollback">
            <summary>
            Cancels modifications made during a transaction, and  
            no changes are made to the database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlTransaction.Connection">
            <summary>
            Represents an open connection to a Pervasive PSQL database.
            </summary>
        </member>
        <member name="P:Pervasive.Data.SqlClient.PsqlTransaction.IsolationLevel">
            <summary>
            Defines the isolation level for the entire transaction.
            If the value is changed, the new value is used at execution time.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.PsqlUtility">
            <summary>
            PsqlUtility is a collection of static functions and constant
            defines that are unique to the Pervasive provider.
            </summary>
        </member>
        <member name="T:Blowfish_NET.Blowfish">
            <summary>  
              Blowfish ECB implementation
            </summary>
            <remarks>
              Use this class to encrypt or decrypt byte arrays or a single
              block with Blowfish in the ECB (Electronic Code Book) mode,
              they key length can be flexible from zero up to 56 bytes.
            </remarks>
        </member>
        <member name="F:Blowfish_NET.Blowfish.MAXKEYLENGTH">
            <summary>
              maximum (and recommended) key size in bytes
            </summary>
        </member>
        <member name="F:Blowfish_NET.Blowfish.BLOCKSIZE">
            <summary>
              block size in bytes
            </summary>
            <remarks>
              (please note that data has to be aligned to the block size) 
            </remarks>
        </member>
        <member name="M:Blowfish_NET.Blowfish.#ctor(System.Byte[])">
            <summary>
              standard constructor
            </summary>
            <param name="key"> 
              the key material, up to MAXKYELENGTH bytes, oversized material is ignored
            </param>
        </member>
        <member name="M:Blowfish_NET.Blowfish.Burn">
            <summary>
              deletes all internal data structures and invalidates this instance
            </summary>
            <remarks>
              Call this method as soon as the work with a particular instance is
              done. By this no sensitive translated key material remains. The
              instance is invalid after this call and usage can lead to unexpected
              results.
            </remarks> 
            <returns>
              self reference
            </returns>
        </member>
        <member name="M:Blowfish_NET.Blowfish.SelfTest">
            <summary>
              executes a selftest
            </summary>
            <remarks>
              Call this method to make sure that the instance is able to produce
              valid output according to the specification.
            </remarks>
            <returns>
              true: selftest passed / false: selftest failed
            </returns>
        </member>
        <member name="M:Blowfish_NET.Blowfish.Encrypt(System.UInt32@,System.UInt32@)">
            <summary>
              encrypts a single block
            </summary>
            <remarks>
              Use this method to encrypt one logical block, which is passed
              as two 32bit halves. If you extract the block from a sequence
              of bytes you have to do it in the network byte order.
            </remarks>
            <param name="unHiRef">
              reference to the high 32 bits of the block
            </param>
            <param name="unLoRef">
              reference to the low 32 bits of the block
            </param>
            <returns>
              self reference
            </returns>
        </member>
        <member name="M:Blowfish_NET.Blowfish.Encrypt(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
              encrypts single bytes
            </summary>
            <remarks>
              Use this method to encrypt bytes from one array to another one.
              You can also use the same array for input and output. Note that
              the number of bytes must be adjusted to the block size of the
              algorithm. Overlapping bytes will not be encrypted. No check for
              buffer overflows are made.
            </remarks>
            <param name="dataIn"> input buffer </param>
            <param name="dataOut"> output buffer </param>
            <param name="nPosIn"> where to start reading in the input buffer </param>
            <param name="nPosOut"> where to start writing to the output buffer </param>
            <param name="nCount"> number ob bytes to encrypt </param>
            <returns>
              self reference
            </returns>
        </member>
        <member name="M:Blowfish_NET.Blowfish.Decrypt(System.UInt32@,System.UInt32@)">
            <summary>
              decrypts a single block
            </summary>
            <remarks>
              Use this method to decrypt one logical block, which is passed
              as two 32bit halves. If you extract the block from a sequence
              of bytes you have to do it in the network byte order.
            </remarks>
            <param name="unHiRef">
              reference to the high 32 bits of the block
            </param>
            <param name="unLoRef">
              reference to the low 32 bits of the block
            </param>
            <returns>
              self reference
            </returns>
        </member>
        <member name="M:Blowfish_NET.Blowfish.Decrypt(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
              decrypts single bytes
            </summary>
            <remarks>
              Use this method to decrypt bytes from one array to another one.
              You can also use the same array for input and output. Note that
              the number of bytes must be adjusted to the block size of the
              algorithm. Overlapping bytes will not be decrypted. No check for
              buffer overflows are made.
            </remarks>
            <param name="dataIn"> input buffer </param>
            <param name="dataOut"> output buffer </param>
            <param name="nPosIn"> where to start reading in the input buffer </param>
            <param name="nPosOut"> where to start writing to the output buffer </param>
            <param name="nCount"> number ob bytes to decrypt </param>
            <returns>
              self reference
            </returns>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ColumnInfo">
            <summary>Encapsulates result set column information and binding. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ParamDesc">
            <summary>Encapsulates a parameter descriptor and SQL datatype binding. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamDesc.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads a parameter descriptor from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamDesc.selectBinding">
            <summary>Selects an appropriate binding based on the column attributes. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads column information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.WriteBindingTo(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Writes column binding information to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.ReadValueFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads a column value from an LNA response based on the binding. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.WriteValueTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Object)">
            <summary>Reads a column value from an LNA response based on the binding. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.HasLongData">
            <summary>Returns whether this column has a long value. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.IsSigned">
            <summary>Returns whether this column has a long value. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfo.selectBinding">
            <summary>Selects an appropriate binding based on the column attributes. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ColumnInfoSet">
            <summary>Encapsulates a set of column information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.GetItem(System.Int32)">
            <summary>Returns the column information at the given index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads column information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.WriteBindingTo(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Writes column binding information to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.AddColumn(System.Int16,System.Int32,System.Int16,System.Int16,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>Adds a column description to the set. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.AddColumn(Pervasive.Data.SqlClient.Lna.ColumnInfo)">
            <summary>Adds a ColumnInfo object to the set. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ColumnInfoSet.WriteFixedColumns(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Object[],System.Int16,System.Boolean[])">
            <summary>Writes out fixed length values. If there is a longvar column, then
            we write out SQL_DATA_AT_EXEC followed by the column index as a 32 bit value. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ConnectionInfo">
            <summary>Encapsulates server connection information and capabilities. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ConnectionInfo.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads connection information from an Lna response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ConnectionOptions">
            <summary>Encapsulates server connection options. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ConnectionOptions.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads connection options from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.Context.initiate(System.Byte[],System.Byte[])">
            		 * The initiator calls this method in order to request a new secure sesion
            		 * with the acceptor. The method will return once a new shared secret has
            		 * been agreed upon.
            		 * 
            		 * @param privateKey [in] the private key of the initiator
            		 * @param publicKey  [in] the public key of the initiator (if applicable)
            		 * @return true if a secure connection has been established
            			throws WireEncryptionError
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.Context.wrapBuffer(System.Byte[],System.Int32)">
            Takes a bytebuffer object and creates the appropriate protocol 
            buffer object.  
            @param bbuf
            @return
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.FetchReader">
            <summary>Interface for reading fetch data from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.FetchReader.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads fetch data from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.FetchReader.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse,Pervasive.Data.SqlClient.Lna.ColumnInfoSet)">
            <summary>Reads fetch data from an LNA response, using the given column information.
            Should only be called for the initial fetch data returned by ExecDirFetch. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.Open">
            <summary>Opens this result cache and performs the first fetch. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.Close">
            <summary>Closes this result cache and frees any associated resources. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.IsClosed">
            <summary>Returns whether this result cache is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.IsRow(System.Int32)">
            <summary>Returns the current row number. 
            </summary>
            <summary>Returns whether the given row number represents the current row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.Absolute(System.Int32)">
            <summary>Moves the cursor to the given row number. Throw an exception
            if the cache is Forward-Only. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.Relative(System.Int32,System.Boolean)">
            <summary>Moves the cursor relative to the current row by the given amount. If the
            adjacent flag is true then moving off ROW_BEFORE_FIRST and ROW_AFTER_LAST
            is allowed (used for next and previous jdbc calls).	
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.MoveToCurrentRow">
            <summary>Moves the cursor from the insert row back to the current row. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.MoveToInsertRow">
            <summary>Moves the cursor to the insert row. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.InsertRow">
            <summary>Inserts the contents of the insert row into the database. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.UpdateRow">
            <summary>Updates the database with contents of the current row. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.DeleteRow">
            <summary>Deletes the current row from the database. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.RefreshRow">
            <summary>Refetches the current row from the database. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.CancelRowUpdates">
            <summary>Cancels any updates on the current row and reverts to the old values. Throw an exception
            if the cache is not updatable. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.GetObject(System.Int32)">
            <summary>Returns the status of the current row. 
            </summary>
            <summary>Returns the value of a column given its 1-based index. Implementations must
            throw an exception if the columnIndex is out of range.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ResultCache.UpdateObject(System.Int32,System.Object)">
            <summary>Updates the value of a column given its 1-based index. Implementations must
            first throw an exception if this cahce is not updatable. If the cache is
            updatable then it must throw an exception if the columnIndex is out of
            range.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.#ctor(Pervasive.Data.SqlClient.Lna.LnaStatement,Pervasive.Data.SqlClient.Lna.ColumnInfoSet)">
            <summary>Constructs a new ForwardReadResultCache based on the given executed
            statement and column information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.Finalize">
            <summary>Called by the garbage collector to perform cleanup
            before the object is destroyed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.Open">
            <summary>Opens this result cache and performs the first fetch. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.Close">
            <summary>Closes this result cache and frees any associated resources. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.IsClosed">
            <summary>Returns whether this result cache is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.IsRow(System.Int32)">
            <summary>Returns whether the given row number represents the current row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.Absolute(System.Int32)">
            <summary>Moves the cursor to the given row number. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.HasRows">
            <summary>Has Rows in result set
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.Relative(System.Int32,System.Boolean)">
            <summary>Moves the cursor relative to the current row by the given amount. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.MoveToCurrentRow">
            <summary>Moves the cursor from the insert row back to the current row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.MoveToInsertRow">
            <summary>Moves the cursor to the insert row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.InsertRow">
            <summary>Inserts the contents of the insert row into the database. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.UpdateRow">
            <summary>Updates the database with contents of the current row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.DeleteRow">
            <summary>Deletes the current row from the database. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.RefreshRow">
            <summary>Refetches the current row from the database. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.CancelRowUpdates">
            <summary>Cancels any updates on the current row and reverts to the old values. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.GetObject(System.Int32)">
            <summary>Returns the value of the given column. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.UpdateObject(System.Int32,System.Object)">
            <summary>Updates the value of the given column. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads fetch data from an LNA response. Reads the Row Status array first.
            Then, it Reads a size and data for each column. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse,Pervasive.Data.SqlClient.Lna.ColumnInfoSet)">
            <summary>Reads fetch data from an LNA response, using the given column information.
            Should only be called for the initial fetch data returned by ExecDirFetch. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.ValidRow">
            <summary>Returns whether this result cache is currently on a valid row. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.DoFetch">
            <summary>Fetches data into the fetch buffer and updates its position and count. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.CloseStream">
            <summary>Closes any currently open long data stream. Ignores IOExceptions. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.CheckBuffers">
            <summary>Allocates the fetch buffer(s) if none exist or are incorrectly sized. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ForwardReadResultCache.FreeBuffers">
            <summary>Frees the fetch buffer(s). 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaConnection">
            <summary>Represents an ODBC connection allocated on the server. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaObject">
            <summary>
            Abstract class representing an LNA object allocated on the server.
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.Lna.LnaObject.m_session">
            <summary>LNASession used to send requests to the server. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.Lna.LnaObject.m_parent">
            <summary>LnaObject parent of this object (possibly null). 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.Lna.LnaObject.m_children">
            <summary>List of open LnaObject children of this object (possibly null).
            NOTE: This vector is not instantiated until the first child is added. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.Lna.LnaObject.m_errorsCleared">
            <summary>Indicates whether the current errors have been cleared for this object. 
            </summary>
        </member>
        <member name="F:Pervasive.Data.SqlClient.Lna.LnaObject.m_encoding">
            <summary>Character encoding is used for reading and writing string data from the database buffer 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.#ctor(Pervasive.Data.SqlClient.Lna.LnaSession)">
            <summary>Constructs a new top-level LnaObject based on the given LNASession. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.#ctor(Pervasive.Data.SqlClient.Lna.LnaObject)">
            <summary>Constructs a new LnaObject based on the given parent LnaObject. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.Finalize">
            <summary>Called by the garbage collector to perform cleanup
            before the object is destroyed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.IsClosed">
            <summary>Returns whether this object is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.AddChild(Pervasive.Data.SqlClient.Lna.LnaObject)">
            <summary>Adds an open child object to our list of open children. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.RemoveChild(Pervasive.Data.SqlClient.Lna.LnaObject)">
            <summary>Removes an open child object from our list of open children. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.ClearErrors">
            <summary>Clears all current errors for this object.  getErrors() will return null
            until a new operation indicates an error. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.GetErrors">
            <summary>Retrieves error information for last RPC function
            as a chain of SQLExceptions. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.GetErrors(System.Int32,System.Int32)">
            <summary>Retrieves error information for last RPC function
            as a chain of SQLExceptions. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaObject.CheckError(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Throws one or more SQLExceptions if the LNA response return code
            indicates an error. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.#ctor(Pervasive.Data.SqlClient.Lna.LnaEnvironment)">
            <summary>Constructs a new LnaConnection based on the given LnaEnvironment. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.ScrollCapable">
            <summary>Returns whether or not this connection is scroll capable.  
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.Close">
            <summary>Closes this object by disconnecting from the server, after closing
            all open children. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.IsClosed">
            <summary>Returns whether this object is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads connection information from an Lna response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.Disconnect">
            <summary>Closes a connection with the database server. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetConnOpt(System.Int16)">
            <summary>Gets a value for a connection option. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.SetConnOpt(System.Int16,System.Int32)">
            <summary>Sets the int value of a connection option. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.SetConnOpt(System.Int16,System.String)">
            <summary>Sets the String value of a connection option. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.AllocStmt">
            <summary>Allocates a new statement handle. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.Transact(System.Int16)">
            <summary>Ends a transaction with a commit or rollback. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetTables(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.String[])">
            <summary>getTables - Called from DatabaseMetaData: getTables() 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetColumns(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.String)">
            <summary>getColumns 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetSpecialColumns(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>getSpecialColumns - Called from DatabaseMetaData: getVersionColumns(),
            getBestRowIdentifier 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetProcedures(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String)">
            <summary>getProcedures 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetProcedureColumns(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.String)">
            <summary>getProcedureColumns 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetStatistics(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>getStatistics 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetPrimaryKeys(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String)">
            <summary>getPrimaryKeys 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetForeignKeys(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>getForeignKeys - Called from DatabaseMetaData: getCrossReference(),
            getImportedKeys, getExportedKeys
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaConnection.GetErrors">
            <summary>Retrieves error information for last RPC function
            as a chain of LnaExceptions. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaConstants">
            <summary>
            Summary description for LnaConstants.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaEnvironment">
            <summary>Represents an ODBC environment allocated on the server. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.#ctor(Pervasive.Data.SqlClient.Lna.LnaSession)">
            <summary>Constructs a new LnaEnvironment based on the given LnaSession. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.Close">
            <summary>Closes this object by closing the underlying LNA session, after closing
            all open children. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.IsClosed">
            <summary>Returns whether this object is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.Connect(System.String)">
            <summary>Establishes a connection with the database server. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.gcd(System.Int32,System.Int32)">
            <summary>Finds the greatest common divisor of two integers. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.encrypt(System.Byte[])">
            <summary>Encrypts a byte array. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaEnvironment.decrypt(System.Byte[])">
            <summary>Decrypts a byte array. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaException">
            <summary>
            Summary description for LnaException.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaPacket">
            <summary>This object represents one LNA response packet.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaPacket.ReadFrom(System.IO.Stream)">
            <summary>Reads the header of an LNA packet from the given input stream.
            The rest of the packet is read in from LnaResponse.readPacketData(). 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaPacket.EncryptedReadFrom(System.IO.Stream,Blowfish_NET.Blowfish)">
            <summary>Reads the header of an LNA packet from the given input stream.
            The rest of the packet is read in from LnaResponse.readPacketData(). 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaRequest">
            <summary>Encapsulates an LNA request packet. Note that this class is not
            synchronized, as it is designed to be used by a single thread. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.NetworkBinaryWriter">
            <summary>
            Writes to a stream whose data should be in network byte order. The passed
            in values are assumed to be in host byte order.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.#ctor(Pervasive.Data.SqlClient.Lna.LnaObject)">
            <summary>Constructs a new LnaRequest object using the default data buffer size. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.#ctor(Pervasive.Data.SqlClient.Lna.LnaObject,System.Int32)">
            <summary>Constructs a new LnaRequest object using the given data buffer size. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.SeekToEnd">
            <summary>Moves to end of buffer. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.Seek(System.Int32)">
            <summary>Seeks to the given position in the buffer. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteTime(System.TimeSpan)">
            <summary>Appends a Time value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteDate(System.DateTime)">
            <summary>Appends a Date value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteGuid(System.Guid)">
            <summary>Appends a GUID to the request data.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteTimestamp(System.DateTime)">
            <summary>Appends a java.sql.Timestamp value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteTimestampAsString(System.String)">
            <summary>Appends a Timestamp value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteString(System.String)">
            <summary>Appends a String value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteNullTermString(System.String)">
            <summary>Appends a null-terminated String value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteString(System.String,System.Text.Encoding)">
            <summary>Appends a String value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteNullTermString(System.String,System.Text.Encoding)">
            <summary>Appends a null-terminated String value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteBytes(System.Byte[])">
            <summary>Appends a byte[] value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteBytes(System.Byte[],System.Int32)">
            <summary>Appends a byte[n] value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteBigDecimal(System.Decimal)">
            <summary>Appends a BigDecimal value to the request data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.WriteTo(System.IO.Stream)">
            <summary>Writes the entire LNA request to the given output stream. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.EncryptedWriteTo(System.IO.Stream,Blowfish_NET.Blowfish)">
            <summary>Writes the entire LNA request to the given output stream. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaRequest.ResizeStringToFit(System.String,System.Int32)">
            <summary>Chops the given string on a char boundary, ensuring that a maximum byte
            size is not exceeded.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaResponse">
            <summary>Encapsulates an LNA response packet. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.NetworkBinaryReader">
            <summary>
            Reads from a stream assuming it is in network byte order. Converts to
            host byte order.
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.#ctor">
            <summary>Constructs a new LnaResponse object. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadTime">
            <summary>Reads a java.sql.Time value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadDate">
            <summary>Reads a java.sql.Date value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadGuid">
            <summary>Reads a java.sql.Date value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadTimestamp">
            <summary>Reads a Timestamp value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadTimestampAsString">
            <summary>Reads a Timestamp value as a string from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadString">
            <summary>Reads a String value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadNullTermString">
            <summary>Reads a null-terminated String value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadString(System.Text.Encoding)">
            <summary>Reads a String value from the response data with a specified encoding.
            Passing a "null" encoding will cause the system default to be used. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadNullTermString(System.Text.Encoding)">
            <summary>Reads a null-terminated String value from the response data using the specified encoding. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadBytes">
            <summary>Reads a byte[] value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadBytes(System.Int32)">
            <summary>Reads a byte[n] value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadBytes(System.Byte[],System.Int32)">
            <summary>Reads a byte[n] value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadBigDecimal">
            <summary>Reads a BigDecimal value from the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.skipBytes(System.Int32)">
            <summary>Skips the given number of bytes in the response data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.IsFull">
            <summary>Returns whether or not this response has a packet object. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.SetCurrentThread">
            <summary>This object stores the currently executing thread and then
            waits. Because it is waiting this method must be synchronized 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.Interrupt">
            <summary>Interrupts the thread that made the request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaResponse.ReadPacketData(System.IO.Stream)">
            <summary>This reads the body of the LNAPacket into a byte array that
            is only reallocated when necessary. This has been added in
            an attempt to limit the number of object creations.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaSession">
            <summary>Interface implemented by LNA session management objects. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.Open">
            <summary>Opens the connection managed by this session.
            Does nothing if session is already open. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.Close">
            <summary>Closes the connection managed by this session.
            Does nothing if session is already closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.IsClosed">
            <summary>Returns whether this session is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.Handshake(System.String)">
            <summary>Exchange protocol stack information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.Request(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Executes the given request and returns the response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSession.Request(Pervasive.Data.SqlClient.Lna.LnaRequest,Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Executes the given request and returns the response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.#ctor(Pervasive.Data.SqlClient.Lna.LnaUrl,Pervasive.Data.SqlClient.PsqlEncrypt,Pervasive.Data.SqlClient.PsqlEncryption,Pervasive.Data.SqlClient.PsqlTimestampType,Pervasive.Data.SqlClient.PsqlTimeType,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>Constructs a new LNASocketSession based on the given URL. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Finalize">
            <summary>Called by the garbage collector to perform cleanup
            before the object is destroyed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Open">
            <summary>Opens the connection managed by this session.
            Does nothing if session is already open. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Close">
            <summary>Closes the connection managed by this session.
            Does nothing if session is already closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.IsClosed">
            <summary>Returns whether this session is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Handshake(System.String)">
            <summary>Exchange protocol stack information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Request(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Executes the given request and returns the response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaSocketSession.Request(Pervasive.Data.SqlClient.Lna.LnaRequest,Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Executes the given request and returns the response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaStatement">
            <summary>Represents an ODBC statement allocated on the server. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.#ctor(Pervasive.Data.SqlClient.Lna.LnaConnection)">
            <summary>Constructs a new LnaStatement based on the given LnaConnection. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.Close">
            <summary>Closes this object by freeing the statement handle. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.IsClosed">
            <summary>Returns whether this object is currently closed. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads statement information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.CancelStmt">
            <summary>Cancels processing of this statement. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.FreeStmt(System.Int16)">
            <summary>Frees the statement handle. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.GetStmtOpt(System.Int16)">
            <summary>Gets the value of a statement option. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.SetStmtOpt(System.Int16,System.Int32)">
            <summary>Sets the value of a statement option. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.Prepare(System.String,Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.ParamDescSet)">
            <summary>Prepares a SQL statement for execution. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.Execute(Pervasive.Data.SqlClient.Lna.ParamInfoSet)">
            <summary>Executes a previously prepared SQL statement. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecDirect(System.String,Pervasive.Data.SqlClient.Lna.ParamInfoSet,Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.ParamDescSet,System.Boolean)">
            <summary>Prepares and executes a SQL statement. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCTablesSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP RPC_TablesSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCColumnsSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP RPC_ColumnsSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCForeignKeysSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP ColumnPrivilegesSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCStatisticsSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP StatisticsSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCPrimaryKeysSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP PrimaryKeysSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCProceduresSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP ProceduresSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExecRPCProcedureColumnsSP1(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.PsqlParameterCollection)">
            <summary>Prepares and executes the internal LNA SP ProcedureColumnsSP1
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.MoreResults">
            <summary>Determines if more results are available for this statement. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.Fetch(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.FetchReader)">
            <summary>Fetches one row of a forward-only result set. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ArrayFetch(Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.FetchReader)">
            <summary>Fetches one or more rows of a forward-only result set. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.ExtendedFetch(System.Int16,System.Int32,Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.FetchReader)">
            <summary>Fetches one or more rows of a scrollable, updatable result set.
            The Request:
            bits	desc
            32		handle
            16		fetch type
            32		rowset size
            bool	refresh row?
            bool	async?
            16		bind info size
            32		bind info size
            for each bind info col:
            16		C Type
            32		max value
            16		long data
            32		Bookmark bindinfo size (should be 1)
            for each bookmark (again, should be one):
            16		C Type		(should be zero)
            32		max value	(should be zero)
            16		long data	(should be zero)
            The Response:
            32		rows
            32		data length
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.SetPos(System.Int16,System.Int16,System.Int16,Pervasive.Data.SqlClient.Lna.ColumnInfoSet,Pervasive.Data.SqlClient.Lna.ParamInfoSet,System.Int16[],System.Object[],System.Boolean[])">
            <summary>Sets the current row within the fetched rowset. Returns an integer which is
            the new status for the row at position "pos". 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.GetLongData(System.Int16,System.Int16,System.Int32,System.Byte[])">
            <summary>Retrieves long data for the given column of the current row. Returns
            size or -1 for null. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.SendParams(Pervasive.Data.SqlClient.Lna.ParamInfoSet)">
            <summary>Sends all requested data-at-execution parameters and returns actual
            updated row count. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.SendLongCols(Pervasive.Data.SqlClient.Lna.ParamInfoSet)">
            <summary>Sends the long columns for setPosition(). Specifically, for
            SQL_UPDATE and SQL_ADD.	
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.GetNextResult(Pervasive.Data.SqlClient.Lna.ColumnInfoSet)">
            <summary>Get next result
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.StartParamData">
            <summary>Indicates the start of a new data-at-execution parameter.
            Returns -2 if more parameters are required; otherwise, returns the
            row count for the executed statement. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.PutLongData(System.Int16,System.Object)">
            <summary>Sends multiple chunks of long data for the current data-at-execution parameter. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.PutLongDataChunk(System.Int16,System.Byte[],System.Int32)">
            <summary>Sends a single chunk of long data for the current data-at-execution parameter. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.PutLongDataChunk(System.Object)">
            <summary>Sends a single chunk of long data for the current data-at-execution parameter. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.LnaStatement.GetErrors">
            <summary>Retrieves error information for last RPC function
            as a chain of LnaExceptions. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaUrl">
            <summary>
            Summary description for LnaUrl.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LnaValueInfo">
            <summary>
            LnaValueInfo is a helper class used to parse the TNSNAMES.ORA file.
            Each keyword can have a list of other keyword value pairs.  This object
            is used to represent the value of keyword.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.LongDataReader">
            <summary>
            Object for holding long data as a stream.
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ParamDescSet">
            <summary>Encapsulates a set of parameter descriptors. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamDescSet.#ctor">
            <summary>Constructs a new ParamDescSet. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamDescSet.GetItem(System.Int32)">
            <summary>Returns the parameter descriptor at the given index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamDescSet.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads parameter descriptors from an LNA response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ParamInfo">
            <summary>Encapsulates the metadata and value for a parameter. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfo.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads a parameter from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfo.WriteTo(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Writes a parameter to an LNA request. Performs a few sanity checks
            on the data before sending it to the engine. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfo.WriteDataAtExec(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfo.HasLongData">
            <summary>Returns whether this parameter has a long value (InputStream or Reader). 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ParamInfoSet">
            <summary>Encapsulates a set of parameter information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.#ctor">
            <summary>Constructs a new ParamInfoSet. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.#ctor(Pervasive.Data.SqlClient.Lna.ParamDescSet)">
            <summary>Constructs a new ParamInfoSet from the given ParamDescSet. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.AddParamDesc(Pervasive.Data.SqlClient.Lna.ParamDesc,System.Int16,System.Int16,System.Object)">
            <summary>Adds a new ParamInfo object to the set. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.GetItem(System.Int32)">
            <summary>Returns the parameter information at the given 0-based index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.GetObject(System.Int32)">
            <summary>Returns the parameter value for the given 1-based index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads parameter information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.SetDataType(System.Int32,System.Int16,System.Int16)">
            <summary>Reads parameter information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.WriteTo(Pervasive.Data.SqlClient.Lna.LnaRequest)">
            <summary>Writes parameter information to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.SetInParameter(System.Int32,System.Object)">
            <summary>Sets the value of an input parameter given its 1-based index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.ClearParameterValues">
            <summary>Sets all parameter values to null. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.SetInParameter(System.Int32,System.Object,System.Int32,System.Int32)">
            <summary>Sets the value of an input parameter given its 1-based index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.RegisterOutParameter(System.Int32,System.Int16)">
            <summary>Registers an output parameter given its 1-based index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.ReadParamBlockFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads an output parameter information block from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.WriteParamBlockTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Int16)">
            <summary>Writes a parameter information block to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.ParamInfoSet.CountParams(System.Int16)">
            <summary>Counts the number of parameters that are not of the given type. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.ResultCacheConst">
            <summary>Manages fetching, caching, and navigation of a result set.
            Provides most of the functionality of a JDBC ResultSet except for
            datatype conversion.
            <p>
            For consistency with SQL and JDBC, all row and column indices are 1-based.
            </p>
            Implementers of this interface need to do the following validation:
            <ul>
            <li>in getObject, check range of columnIndex, throw exception if necessary</li>
            <li>in updateObject, if cache is not updatable throw exception</li>
            <li>in updateObject, check range of columnIndex, throw exception if necessary</li>
            </ul>
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.StatementOptions">
            <summary>Encapsulates server statement options. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.StatementOptions.#ctor">
            <summary>Constructs a new unbound StatementOptions object. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.StatementOptions.#ctor(Pervasive.Data.SqlClient.Lna.LnaStatement,Pervasive.Data.SqlClient.Lna.StatementOptions)">
            <summary>Constructs a new StatementOptions object bound to the given LnaStatement,
            with initial values from the given StatementOptions. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.StatementOptions.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads statement options from an LNA response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.TableType">
            <summary>Encapsulates server table-type information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TableType.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads table type information from an LNA response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.TableTypeSet">
            <summary>Encapsulates a set of table type information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TableTypeSet.GetItem(System.Int32)">
            <summary>Returns the table type information at the given index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TableTypeSet.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads table type information from an LNA response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.TypeInfo">
            <summary>Encapsulates server data-type information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TypeInfo.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads type information from an LNA response. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.TypeInfoSet">
            <summary>Encapsulates a set of type information. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TypeInfoSet.GetItem(System.Int32)">
            <summary>Returns the type information at the given index. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TypeInfoSet.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads type information from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TypeInfoSet.FindType(System.Int16)">
            <summary>Finds the type information for the given SQL datatype. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.TypeInfoSet.FindType(System.Int16,System.Boolean)">
            <summary>Finds the type information for the given SQL datatype and signed flag. 
            </summary>
        </member>
        <member name="T:Pervasive.Data.SqlClient.Lna.VarData">
            <summary>Static utility class for Reading and writing LNA variant data. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse)">
            <summary>Reads variant data from an LNA response. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.ReadFrom(Pervasive.Data.SqlClient.Lna.LnaResponse,System.Int16)">
            <summary>Reads variant data from an LNA response based on the given binding. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.ReadBytesFrom(Pervasive.Data.SqlClient.Lna.LnaResponse,System.Byte[])">
            <summary>Reads byte[] variant data from an LNA response. Returns the size of the
            data Read, or -1 if null value. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Object)">
            <summary>Writes variant data to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Int16,System.Object)">
            <summary>Writes variant data to an LNA request based on the given binding.
            Treats InputStreams and Readers as data-at-execution parameters. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteIntTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Int32)">
            <summary>Writes an int as variant data to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteStringTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.String)">
            <summary>Writes a String as variant data to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteNullTermStringTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.String)">
            <summary>Writes a null-terminated String as variant data to an LNA request. 
            </summary>
        </member>
        <member name="M:Pervasive.Data.SqlClient.Lna.VarData.WriteBytesTo(Pervasive.Data.SqlClient.Lna.LnaRequest,System.Int16,System.Byte[],System.Int32)">
            <summary>Writes a byte[n] as variant data to an LNA request. 
            </summary>
        </member>
    </members>
</doc>
