<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DDTek.Sybase</name>
    </assembly>
    <members>
        <member name="F:DDInt.Common.CommonEscape.TIME">
            Implemented via BaseTimestampEscape class.
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.DATE">
            Implemented via BaseTimestampEscape class.
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.TIMESTAMP">
            Implemented via BaseTimestampEscape class.
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.FUNCTION">
            Implemented via BaseFunctionEscape class.
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.OUTER_JOIN">
            Implemented via BaseJoinEscape class.
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_PROCEDURE">
            Implemented via BaseCallEscape class.
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.CALL_FUNCTION">
            Implemented via BaseCallEscape class.
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Common.CommonEscape.ESCAPE">
            Implemented via CommonEscapeEscape class.
            {escape 'c'}
        </member>
        <member name="F:DDInt.Common.CommonEscape.EXTENSION">
            Implemented via CommonExtensionEscape class.
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Common.CommonEscape.generator">
            Used to obtain the text of sub-trees.
        </member>
        <member name="F:DDInt.Common.CommonEscape.escapeRoot">
            Records the escape type text.
        </member>
        <member name="M:DDInt.Common.CommonEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
            Constructor.
        </member>
        <member name="F:DDInt.Common.CommonEscapeParameterList.leftmostParameter">
            The leftmost parameter in the escape's parameter list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getParameter(System.Int32)">
             Returns the specified parameter as a String.
            
             @return the specified parameter as a String.
            
             @param parameterIndex - specified as 1-based ordinal.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.getAllParameters">
             Returns a comma-separated String of all the parameters in the
             list.
            
             @return - Comma-separated String of all the parameters in the list.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.setLeftmostparameter">
            Initialize the leftmost parameter pointer.  It can be null.
        </member>
        <member name="M:DDInt.Common.CommonEscapeParameterList.generateText(DDInt.Parser.BaseSQLTreeNode)">
            Generate the text of the parameter or parameter list at the specified
            node.
        </member>
        <member name="P:DDInt.Common.CommonEscapeParameterList.ParameterCount">
             Returns the number of parameters in the parameter list.
            
             @return the number of parameters in the parameter list.
        </member>
        <member name="M:DDInt.Common.CommonCallEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList ...
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList ...
        </member>
        <member name="M:DDInt.Common.CommonConnectionOptions.GetOptionName(System.String)">
            <summary>
            Return the actual option name against this key
            </summary>
            <param name="keyName">Key or Synonym</param>
            <returns>Option Name</returns>
        </member>
        <member name="T:DDInt.Common.CEM">
            <summary>
            The CEM (shorthand for CommonErrorManagement) is a set of static methods
            for raising exceptions through a standard manner.  By using these methods
            to raise exceptions, we can trace all exceptions thrown by the common layer,
            obtain error strings from a resource file and map error conditions to
            the appropriate exception.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonEscapeEscape.getEscapeCharacter">
             Returns the escape character defined in the escape.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral ...
            
             @return the escape character defined in the escape.
        </member>
        <member name="F:DDInt.Common.CommonEscapeTranslator.NO_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <!-- Badly formed XML comment ignored for member "F:DDInt.Common.CommonEscapeTranslator.UNADORN_TRANSLATION_NEEDED" -->
        <member name="F:DDInt.Common.CommonEscapeTranslator.FULL_TRANSLATION_NEEDED">
            Describes the type of escape m_translation required.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateCallEscape(DDInt.Common.CommonCallEscape)">
             Returns translated call escape or null if the escape cannot be
             translated.
            
             @return translated call escape or null if the escape cannot be
             translated.
            
             @param callEscape - call escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateFunctionEscape(DDInt.Common.CommonFunctionEscape)">
             Returns translated function escape or null if the escape cannot be
             translated.
            
             @return translated function escape or null if the escape cannot be
             translated.
            
             @param functionEscape - fn escape semantic information obtained from
             the parse.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateTimestampEscape(DDInt.Common.CommonTimestampEscape)">
             Returns translated t, d, or ts escape or null if the escape cannot
             be translated.
            
             @return translated t, d, or ts  escape or null if the escape cannot
             be translated.
            
             @param timestampEscape - t, d, or ts escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscapeEscape(DDInt.Common.CommonEscapeEscape)">
             Returns translated escape escape or null if the escape cannot
             be translated.
            
             @return translated escape escape or null if the escape cannot
             be translated.
            
             @param escapeEscape - escape escape semantic information
             obtained from the parse
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.getTranslationNeeded(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeFromClause(DDInt.Common.CommonJoinEscape)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.insertOuterJoinOperator(System.Text.StringBuilder,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonEscapeTranslator.translateJoinEscapeWhereClause(DDInt.Common.CommonJoinEscape,System.String)" -->
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateEscape(DDInt.Parser.BaseSQLTreeNode,System.String)">
             Oversees the m_translation of the escape.
            
             @param escapeSemantics - semantic information obtained from the parse.
             @param currentWhere - where clause associated with the escape.  Is null if doesn't exist.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getTranslation">
             Returns the translated escape.
            
             @return Returns the translated escape.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.getNewWhere">
             Returns Updated WHERE clause or null if WHERE clause hasn't changed.
            
             @return Updated WHERE clause or null if WHERE clause hasn't changed.
        </member>
        <member name="M:DDInt.Common.CommonEscapeTranslator.translateExtensionEscape(DDInt.Common.CommonExtensionEscape)">
             Returns translated extension escape or null if the escape cannot
             be translated.
            
             @return translated extension escape or null if the escape cannot
             be translated.
            
             @param extensionEscape - extension escape semantic information
             obtained from the parse
        </member>
        <member name="M:DDInt.Common.CommonExtensionEscape.validateExtensionName(System.String)">
             Determines if the value specified is a valid extension.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.NONE">
            Scalar function types.  These match the indexes of the scalar function
            names found in scalarFunctionNames.
        </member>
        <member name="F:DDInt.Common.CommonFunctionEscape.scalarFunctionNames">
             Valid scalar function names.
            
             Each function name's index doubles as the BaseSQLTreeNode operator.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.validateScalarFunctionName(System.String)">
             Determines if the value specified is a valid scalar function.
            
             @return the index into scalarFunctionNames of the scalar function name
             that matches the value specified, or -1 if no match exists.
        </member>
        <member name="M:DDInt.Common.CommonFunctionEscape.setLeftmostparameter">
             Initialize the leftmost parameter pointer.  It can be null.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList ...
        </member>
        <member name="P:DDInt.Common.CommonFunctionEscape.FunctionText">
             Returns the function text w/o the escape adorning.  For example,
             returns "UCASE (NAME)" instead of "{fn UCASE (NAME)}".
            
             @return the function text w/o the escape adorning.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.NODE_RIGHT_OUTER_JOIN_OP">
            Join operator values.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojRoot">
            OJ root node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.ojCursor">
            Current outer join position node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.trCursor">
            Current table reference postion node.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.joinOperator">
            Join operator or BaseSQLTreeNode.NODE_UNKNOWN if there are
            no more outer joins to enumeratre.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentSearchConditionNode">
            The value of the currently traversed search condition clause.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.currentTableNameNode">
            Table name from enumerated table reference.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstOuterJoinRequest">
            True if getNextOuterJoin () has been called before; false, otherwise.
        </member>
        <member name="F:DDInt.Common.CommonJoinEscape.firstTableReferenceRequest">
            True if getNextTableReference () has been called before; false,
            otherwise.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextOuterJoin" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonJoinEscape.moveToNextTableReference" -->
        <member name="M:DDInt.Common.CommonJoinEscape.isJoinOperator(System.Int32)">
             Returns true if the specified operator is an outer join operator;
             false, otherwise.
            
             @return true if the specified operator is an outer join operator;
             false, otherwise.
            
             @param op - operator being tested.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentSearchCondition">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentJoinOperator">
             Returns the current search condition.
            
             @return the current search condition.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentTableName">
             Returns the table name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the table name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="M:DDInt.Common.CommonJoinEscape.getCurrentCorrelationName">
             Returns the correlation name for the currently enumerated outer join
             or null if none exists.
            
             TableReference
                 ::= QualifiedName [CorrelationName]
            
             @return the correlation name for the currently enumerated outer join.
             or null if none exists.
        </member>
        <member name="T:DDTek.Common.CommonStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BAD_CONNECTION">
            <summary>
              Looks up a localized string similar to Connection must be valid and open.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BAD_FIELD_OFFSET">
            <summary>
              Looks up a localized string similar to Field offset is greater than length..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_ABORTED">
            <summary>
              Looks up a localized string similar to The bulk copy operation has been aborted..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_CONFLICTING_TRANSACTION_OPTION">
            <summary>
              Looks up a localized string similar to Must not specify the BulkCopyOption UseInternalTransaction and pass an external Transaction at the same time..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_CONVERSION_FAILED">
            <summary>
              Looks up a localized string similar to The bulk copy operation has failed due to a conversion error between a source column value and destination column value..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_IN_PROGRESS_CHANGES_PROHIBITED">
            <summary>
              Looks up a localized string similar to A ColumnMappingCollection cannot be changed during the execution of a bulk copy operation..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_INVALID_DESTINATION_TABLE">
            <summary>
              Looks up a localized string similar to Cannot access destination table &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_NON_UNIFORM_COLUMN_MAPPING_COLLECTION">
            <summary>
              Looks up a localized string similar to The mappings in a ColumnMappingCollection must be uniform: either all integer/integer pairs, all string/string pairs, all integer/string pairs, or all string/integer pairs..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_ROW_LIMIT_EXCEEDED">
             <summary>
               Looks up a localized string similar to This DataDirect Connect for ADO.NET Bulk Load feature you are attempting to use is an Evaluation copy. The Bulk Load row count limit has been exceeded. If you would like to license a provider to remove this limit, please contact DataDirect Technologies.  USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930 
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or Tel: +32 15 30 77 00
            France: Toll-free [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_COPY_UNDEFINED_COLUMN_MAPPING">
            <summary>
              Looks up a localized string similar to A ColumnMapping must define a source and destination column..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.BULK_SOURCE_COLUMN_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The given ColumnName &apos;{0}&apos; does not match up with any column in data source..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_CHANGE_CURRENTUSER">
            <summary>
              Looks up a localized string similar to Changing the &apos;CurrentUser&apos; requires the Reauthentication Enabled connection option be set to true.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_GENERATE_COMMAND">
            <summary>
              Looks up a localized string similar to command object is not suitable for command generation..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_GENERATE_DELETE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_GENERATE_UPDATE">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_GENERATE_UPDATE2">
            <summary>
              Looks up a localized string similar to Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any modifiable columns..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_SPECIFY_OPTION_AGAIN">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option or its alias cannot be specified more than once in a connection string..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_UPDATE_JOIN">
             <summary>
               Looks up a localized string similar to Dynamic SQL generation is not supported against multiple base tables.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CANNOT_USE_ARRAY_BINDING">
            <summary>
              Looks up a localized string similar to Only ExecuteNonQuery can use parameter array binding..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_Advanced">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_BulkLoad">
            <summary>
              Looks up a localized string similar to Bulk Load.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_ClientMonitoring">
            <summary>
              Looks up a localized string similar to Client Monitoring.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_ConnectionPooling">
            <summary>
              Looks up a localized string similar to Connection Pooling.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_Failover">
            <summary>
              Looks up a localized string similar to Failover.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_Performance">
            <summary>
              Looks up a localized string similar to Performance.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_SchemaInformation">
            <summary>
              Looks up a localized string similar to Schema Information.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_Security">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_StandardConnection">
            <summary>
              Looks up a localized string similar to Standard Connection.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Category_Tracing">
            <summary>
              Looks up a localized string similar to Tracing.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CMDTXT_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to CommandText property has not been initialized..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_INDEX_INT32">
            <summary>
              Looks up a localized string similar to Invalid index {0} for this {1} with Count={2}..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_INDEX_STRING">
             <summary>
               Looks up a localized string similar to An {0} with {1} &apos;{2}&apos; is not contained by this {3}.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_INVALID_TYPE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects, not {2} objects..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_IS_NOT_PARENT">
             <summary>
               Looks up a localized string similar to The {0} is already contained by another {1}.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_IS_PARENT">
             <summary>
               Looks up a localized string similar to The {0} with is already contained by this {1}.
            .
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_NULL_VALUE">
            <summary>
              Looks up a localized string similar to The {0} only accepts non-null {1} type objects..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_REMOVE_INVALID_OBJECT">
            <summary>
              Looks up a localized string similar to Attempted to remove an {0} that is not contained by this {1}..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLLECTION_TIMED_OUT">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because the execution of the command timed out.  The &apos;Schema Collection Timeout&apos; connect option may need to be increased..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.COLUMN_INDEX_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find specified column in results.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_ALREADY_OPEN">
            <summary>
              Looks up a localized string similar to The connection is already Open (state=Open)..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_POOL_TIMEOUT">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_REQUIRED">
            <summary>
              Looks up a localized string similar to Operation requires connection object in SELECT command..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_REQUIRED_TO_DERIVE_PARAMS">
            <summary>
              Looks up a localized string similar to The DeriveParameters method requires that the given command object references an open connection..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_STATE_CLOSED">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is closed..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_STATE_OPEN">
            <summary>
              Looks up a localized string similar to The connection&apos;s current state is open..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONNECTION_STRING_SYNTAX">
            <summary>
              Looks up a localized string similar to Format of the initialization string does not conform to specification starting at index {0}..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CONSTR_NOT_INITIALIZED">
            <summary>
              Looks up a localized string similar to The ConnectionString property has not been initialized..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CPU_COUNT_VIOLATION">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of DataDirect Connect for ADO.NET which may run on systems that  include up to {0} processors.  The current system is configured with {1} processors.  The 15 day grace period has expired – please contact DataDirect Technologies to upgrade this license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or T [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CPU_COUNT_WARN">
             <summary>
               Looks up a localized string similar to This system includes a licensed version of DataDirect Connect for ADO.NET which may run on systems that include up to {0} processors.  The current system is configured with {1} processors.  Please contact DataDirect within the next 15 days to upgrade the license.
            USA and Canada: 800-876-3101
            United Kingdom: Toll-free: 0800 169 1907 or Tel: +44 (0) 1753-218 930
            Benelux: Toll-free: (French) 0800 12 045, Toll-free: (Dutch) 0800 12 046, Toll-free: (Netherlands) 0800 022 0524 or Tel: +32 15 30 77 00
            France:  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.CROSS_PROVIDER_BULK_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to Cross provider bulk load is not supported..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.DATA_READER_IS_CLOSED">
            <summary>
              Looks up a localized string similar to Invalid attempt to {0} when reader is closed..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.DATA_READER_NO_DATA">
            <summary>
              Looks up a localized string similar to No data exists for the row or column..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_AlternateServers">
            <summary>
              Looks up a localized string similar to A list of database servers to which the data provider will try to connect if the primary database server is unavailable..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_BulkLoadProtocol">
            <summary>
              Looks up a localized string similar to Specifies the Bulk Load Protocol to be used..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_CommonWorkArounds">
            <summary>
              Looks up a localized string similar to Use this field only when instructed by DataDirect Technical Support..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ConnectionPoolBehavior">
            <summary>
              Looks up a localized string similar to Specifies the connection pool algorithm used. When set to Fifo, the pooling mechanism ensures equitable usage of connections across the pool, and is the recommended behavior for applications with heavy load. When set to Lifo, the  pooling mechanism enforces a discriminatory usage of connections across the pool by always using the most recently returned connection. This option is best employed for applications that wish to establish long term affinity with database connections. The value is ignored when Reau [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ConnectionReset">
            <summary>
              Looks up a localized string similar to When true, the connection state is reset when the connection is removed from the connection pool..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ConnectionRetryCount">
            <summary>
              Looks up a localized string similar to The number of times the data provider tries to connect to the primary server, and, if specified, the alternate servers after the initial unsuccessful attempt..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ConnectionRetryDelay">
            <summary>
              Looks up a localized string similar to The number of seconds the data provider waits after the initial unsuccessful connection attempt before retrying a connection to the primary server, and, if specified, the alternate servers..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ConnectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted connection to the server will fail if not yet connected..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_DefaultSchemaRestriction">
            <summary>
              Looks up a localized string similar to The default value to use when the Schema restriction is omitted from GetSchema calls.  The initial default is an empty string (no restriction)..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_EnableTrace">
            <summary>
              Looks up a localized string similar to When set to 1 or higher, enables tracing. When set to 0, tracing is disabled..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_Enlist">
            <summary>
              Looks up a localized string similar to When true, the data provider automatically attempts to enlist the connection in creating the thread&apos;s current transaction context..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_GssClient">
            <summary>
              Looks up a localized string similar to Specifies which GSS client library the provider should use to communicate with the Key Distribution Center (KDC) when authentication in a MIT Kerberos environment.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_HostNameInCertificate">
            <summary>
              Looks up a localized string similar to Defines the host name in the certificate used as part of the SSL Server Certificate validation..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_InitialCommandTimeout">
            <summary>
              Looks up a localized string similar to The initial (default) CommandTimeout for commands that use this connection.  Setting the CommandTimeout property on the command will override this option..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_LicensePath">
            <summary>
              Looks up a localized string similar to The fully qualified path to the DDTek.lic license file..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_LoadBalanceTimeout">
            <summary>
              Looks up a localized string similar to The time (from 1 to 65535 seconds, or 0 for unlimited time) to keep connections in a connection pool. .
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_LoadBalancing">
            <summary>
              Looks up a localized string similar to When true, client load balancing is used in attempts to connect to primary and alternate database servers..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_MaxPoolSize">
            <summary>
              Looks up a localized string similar to The maximum number of connections within a single pool..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_MaxStatementCacheSize">
            <summary>
              Looks up a localized string similar to The Max Statement Cache Size limits the size of the statement cache.  The default is 10.  Setting this size to 0 will disable the statement cache..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_MinPoolSize">
            <summary>
              Looks up a localized string similar to The minimum number of connections that are opened and placed in a connection pool when it is created..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ParameterMode">
            <summary>
              Looks up a localized string similar to When set to ANSI, &apos;?&apos; are processed as Parameter Markers and bound ordinally. When set to BindByOrdinal, native parameters markers are used and bound ordinally. When set to BindByName, native parameter markers are used and bound by name..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_PersistSecurityInfo">
            <summary>
              Looks up a localized string similar to When true, secure information is displayed in clear text in the ConnectionString property of the Connection object..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_Pooling">
            <summary>
              Looks up a localized string similar to When true, connections are pooled..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ReauthenticationEnabled">
            <summary>
              Looks up a localized string similar to Specifies if a provider may Reauthenticate.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_SchemaCollectionTimeout">
            <summary>
              Looks up a localized string similar to The number of seconds after which the attempted schema collection operation to the server will fail if not yet completed..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_SchemaOptions">
            <summary>
              Looks up a localized string similar to Specifies a schema option that influences how a provider returns schema meta data..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_StatementCacheMode">
            <summary>
              Looks up a localized string similar to The Statement Cache Mode controls the behavior of the statement cache.  By default the statements will only be cached when the command is explicity set.  This mode can be changed to automatically cache statements..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_SynchronizeConnection">
            <summary>
              Looks up a localized string similar to Specifies whether synchronization on the connection is required.  Typically, this is not required.  This is normally only needed if a connection is being shared across multiple threads.  The default is false..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ThrottleCollectionsData">
            <summary>
              Looks up a localized string similar to Specifies whether a provider returns very large collection meta data..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_TraceFile">
            <summary>
              Looks up a localized string similar to The path and name of the trace file..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_TransactionTimeout">
            <summary>
              Looks up a localized string similar to Controls the length of time the provider will wait when committing or rolling back a transaction.  0 implies the provider should not timeout.  Any positive integer represents the number of seconds the provider should wait before timing out.  -1, the default, implies the the provider will use the connection timeout setting..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_UseCurrentSchema">
            <summary>
              Looks up a localized string similar to Indicates whether the schema collections should automatically restrict using the current schema when the schema restriction is omitted..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.Description_ValidateServerCertificate">
            <summary>
              Looks up a localized string similar to Specifies whether the server certificate is verified as valid according to a Certificate Authority..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.EMPTY_DATABASE_NAME">
            <summary>
              Looks up a localized string similar to Database cannot be null, the empty string, or string of only whitespace..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.ENLIST_FAILED">
            <summary>
              Looks up a localized string similar to Error occured when enlisting connection in distributed transaction..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_ERROR">
            <summary>
              Looks up a localized string similar to Security Services Error: {0}.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_APPL_EXPIRED">
            <summary>
              Looks up a localized string similar to This application has expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_BAD_ENCTYPE">
            <summary>
              Looks up a localized string similar to Bad encryption type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_BAD_KEYSIZE">
            <summary>
              Looks up a localized string similar to Key size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_BAD_MSIZE">
            <summary>
              Looks up a localized string similar to Message size is incompatible with encryption type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_BADMSGTYPE">
            <summary>
              Looks up a localized string similar to Invalid message type specified for encoding.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_BADNAME">
            <summary>
              Looks up a localized string similar to Credential cache name malformed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_END">
            <summary>
              Looks up a localized string similar to End of credential cache reached.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in credentials cache.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_IO">
            <summary>
              Looks up a localized string similar to Credentials cache I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_NOMEM">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in credentials cache code).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_NOTFOUND">
            <summary>
              Looks up a localized string similar to Matching credential not found.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Credentials cache type is already registered..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown credential cache type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CC_WRITE">
            <summary>
              Looks up a localized string similar to Error writing to credentials cache.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported credentials cache format version number.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CHPW_FAIL">
            <summary>
              Looks up a localized string similar to Password change failed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CHPW_PWDNULL">
            <summary>
              Looks up a localized string similar to New password cannot be zero length.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CONFIG_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of Kerberos configuration file.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CONFIG_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find Kerberos configuration file.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CONFIG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to No supported encryption types (config file error?).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CONFIG_NODEFREALM">
            <summary>
              Looks up a localized string similar to Configuration file does not specify default realm.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CONFIG_NOTENUFSPACE">
            <summary>
              Looks up a localized string similar to Insufficient space to return complete information.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_CRYPTO_INTERNAL">
            <summary>
              Looks up a localized string similar to Cryptosystem internal error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_EAI_FAIL">
            <summary>
              Looks up a localized string similar to unknown getaddrinfo failure.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_EAI_NODATA">
            <summary>
              Looks up a localized string similar to no data available for host/domain name.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_EAI_NONAME">
            <summary>
              Looks up a localized string similar to host/domain name not found.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_EAI_SERVICE">
            <summary>
              Looks up a localized string similar to service name unknown.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_ERR_BAD_HOSTNAME">
            <summary>
              Looks up a localized string similar to Hostname cannot be canonicalized.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_ERR_HOST_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot determine realm for host.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_ERR_NUMERIC_REALM">
            <summary>
              Looks up a localized string similar to Cannot determine realm for numeric host address.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_ERR_RCSID">
            <summary>
              Looks up a localized string similar to (RCS Id string for the krb5 error table).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_FCC_INTERNAL">
            <summary>
              Looks up a localized string similar to Internal credentials cache error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_FCC_NOFILE">
            <summary>
              Looks up a localized string similar to No credentials cache found.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_FCC_PERM">
            <summary>
              Looks up a localized string similar to Credentials cache file permissions incorrect.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_FWD_BAD_PRINCIPAL">
            <summary>
              Looks up a localized string similar to Bad principal name while trying to forward credentials.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_GET_IN_TKT_LOOP">
            <summary>
              Looks up a localized string similar to Looping detected inside krb5_get_in_tkt.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_IN_TKT_REALM_MISMATCH">
            <summary>
              Looks up a localized string similar to Client/server realm mismatch in initial ticket request.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_INVALID_FLAGS">
            <summary>
              Looks up a localized string similar to Invalid KDC option combination (library internal error) [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KDC_UNREACH">
            <summary>
              Looks up a localized string similar to Cannot contact any KDC for requested realm.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KDCREP_MODIFIED">
            <summary>
              Looks up a localized string similar to KDC reply did not match expectations.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KDCREP_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great in KDC reply.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KEYTAB_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported key table format version number.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_BADNAME">
            <summary>
              Looks up a localized string similar to Key table name malformed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_END">
            <summary>
              Looks up a localized string similar to End of key table reached.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_FORMAT">
            <summary>
              Looks up a localized string similar to Bad format in keytab.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_IOERR">
            <summary>
              Looks up a localized string similar to Error writing to key table.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_KVNONOTFOUND">
            <summary>
              Looks up a localized string similar to Key version number for principal in key table is incorrect.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_NAME_TOOLONG">
            <summary>
              Looks up a localized string similar to Keytab name too long.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_NOTFOUND">
            <summary>
              Looks up a localized string similar to Key table entry not found.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_NOWRITE">
            <summary>
              Looks up a localized string similar to Cannot write to specified key table.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Key table type is already registered..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_KT_UNKNOWN_TYPE">
            <summary>
              Looks up a localized string similar to Unknown Key table type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LIB_EXPIRED">
            <summary>
              Looks up a localized string similar to This Krb5 library has expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LIBOS_BADLOCKFLAG">
            <summary>
              Looks up a localized string similar to Invalid flag for file lock mode.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LIBOS_BADPWDMATCH">
            <summary>
              Looks up a localized string similar to Password mismatch.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LIBOS_CANTREADPWD">
            <summary>
              Looks up a localized string similar to Cannot read password.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LIBOS_PWDINTR">
            <summary>
              Looks up a localized string similar to Password read interrupted.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LNAME_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of translation database entry.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LNAME_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find lname translation database.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_LNAME_NOTRANS">
            <summary>
              Looks up a localized string similar to No translation available for requested principal.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_MUTUAL_FAILED">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NO_2ND_TKT">
            <summary>
              Looks up a localized string similar to Request missing second ticket [for dual tgt library calls].
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NO_LOCALNAME">
            <summary>
              Looks up a localized string similar to No local name found for principal name.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NO_TKT_IN_RLM">
            <summary>
              Looks up a localized string similar to Cannot find ticket for requested realm.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NO_TKT_SUPPLIED">
            <summary>
              Looks up a localized string similar to Request did not supply a ticket.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NOCREDS_SUPPLIED">
            <summary>
              Looks up a localized string similar to No credentials supplied to library routine.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_NOPERM_ETYPE">
            <summary>
              Looks up a localized string similar to Encryption type not permitted.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_OBSOLETE_FN">
            <summary>
              Looks up a localized string similar to Program called an obsolete, deleted function.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PARSE_ILLCHAR">
            <summary>
              Looks up a localized string similar to Illegal character in component name.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PARSE_MALFORMED">
            <summary>
              Looks up a localized string similar to Malformed representation of principal.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PREAUTH_BAD_TYPE">
            <summary>
              Looks up a localized string similar to Unsupported preauthentication type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Generic preauthentication failure.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PREAUTH_NO_KEY">
            <summary>
              Looks up a localized string similar to Required preauthentication key not supplied.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PRINC_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested principal and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PROG_ATYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for address type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PROG_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for encryption type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PROG_KEYTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for key type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_PROG_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to Program lacks support for checksum type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO">
            <summary>
              Looks up a localized string similar to Replay I/O operation failed XXX.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_EOF">
            <summary>
              Looks up a localized string similar to End-of-file on replay cache I/O.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_IO">
            <summary>
              Looks up a localized string similar to I/O error in replay cache i/o code.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache I/O code).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_PERM">
            <summary>
              Looks up a localized string similar to Permission denied in replay cache code.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_SPACE">
            <summary>
              Looks up a localized string similar to Insufficient system space to store replay information.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_IO_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC/IO error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_MALLOC">
            <summary>
              Looks up a localized string similar to No more memory to allocate (in replay cache code).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_NOIO">
            <summary>
              Looks up a localized string similar to Replay cache type does not support non-volatile storage.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_PARSE">
            <summary>
              Looks up a localized string similar to Replay cache name parse/format error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_REPLAY">
            <summary>
              Looks up a localized string similar to Message is a replay.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_REQUIRED">
            <summary>
              Looks up a localized string similar to Message replay detection requires rcache parameter.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_TYPE_EXISTS">
            <summary>
              Looks up a localized string similar to Replay cache type is already registered.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_TYPE_NOTFOUND">
            <summary>
              Looks up a localized string similar to Replay cache type is unknown.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RC_UNKNOWN">
            <summary>
              Looks up a localized string similar to Generic unknown RC error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_RCACHE_BADVNO">
            <summary>
              Looks up a localized string similar to Unsupported replay cache format version number.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_REALM_CANT_RESOLVE">
            <summary>
              Looks up a localized string similar to Cannot resolve KDC for requested realm.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_REALM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Cannot find KDC for requested realm.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SAM_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to Bad SAM flags in obtain_sam_padata.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAPPLVERS">
            <summary>
              Looks up a localized string similar to Bad application version was sent (via sendauth).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADAUTHVERS">
            <summary>
              Looks up a localized string similar to Bad sendauth version was sent.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SENDAUTH_BADRESPONSE">
            <summary>
              Looks up a localized string similar to Bad response (during sendauth exchange).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SENDAUTH_REJECTED">
            <summary>
              Looks up a localized string similar to Server rejected authentication (during sendauth exchange).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SERVICE_UNKNOWN">
            <summary>
              Looks up a localized string similar to Kerberos service unknown.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_SNAME_UNSUPP_NAMETYPE">
            <summary>
              Looks up a localized string similar to Conversion to service principal undefined for name type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_TKT_NOT_FORWARDABLE">
            <summary>
              Looks up a localized string similar to Requesting ticket can&apos;t get forwardable tickets.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_TRANS_BADFORMAT">
            <summary>
              Looks up a localized string similar to Improper format of realm translation file.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_TRANS_CANTOPEN">
            <summary>
              Looks up a localized string similar to Can&apos;t open/find realm translation file.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5_WRONG_ETYPE">
            <summary>
              Looks up a localized string similar to Requested encryption type not used in message.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5DES_BAD_KEYPAR">
            <summary>
              Looks up a localized string similar to DES key has bad parity.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5DES_WEAK_KEY">
            <summary>
              Looks up a localized string similar to DES key is a weak key.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_BAD_PVNO">
            <summary>
              Looks up a localized string similar to Requested protocol version not supported.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_BADOPTION">
            <summary>
              Looks up a localized string similar to KDC can&apos;t fulfill requested option.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_C_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Client&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Client not found in Kerberos database.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_CANNOT_POSTDATE">
            <summary>
              Looks up a localized string similar to Ticket is ineligible for postdating.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_NOTYET">
            <summary>
              Looks up a localized string similar to Client not yet valid - try again later.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_CLIENT_REVOKED">
            <summary>
              Looks up a localized string similar to Clients credentials have been revoked.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for encryption type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_KEY_EXP">
            <summary>
              Looks up a localized string similar to Password has expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_NAME_EXP">
            <summary>
              Looks up a localized string similar to Client&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_NEVER_VALID">
            <summary>
              Looks up a localized string similar to Requested effective lifetime is negative or too short.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_NULL_KEY">
            <summary>
              Looks up a localized string similar to Client or server has a null key.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_PADATA_TYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for padata type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_POLICY">
            <summary>
              Looks up a localized string similar to KDC policy rejects request.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Preauthentication failed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_PREAUTH_REQUIRED">
            <summary>
              Looks up a localized string similar to Additional pre-authentication required.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE">
            <summary>
              Looks up a localized string similar to Principal has multiple entries in Kerberos database.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_S_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Server&apos;s key is encrypted in an old master key.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Server not found in Kerberos database.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVER_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested server and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_EXP">
            <summary>
              Looks up a localized string similar to Server&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_NOTYET">
            <summary>
              Looks up a localized string similar to Server not yet valid - try again later.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_SERVICE_REVOKED">
            <summary>
              Looks up a localized string similar to Credentials for server have been revoked.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for checksum type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_TGT_REVOKED">
            <summary>
              Looks up a localized string similar to TGT has been revoked.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KDC_ERR_TRTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for transited type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BAD_INTEGRITY">
            <summary>
              Looks up a localized string similar to Decrypt integrity check failed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADADDR">
            <summary>
              Looks up a localized string similar to Incorrect net address.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADDIRECTION">
            <summary>
              Looks up a localized string similar to Incorrect message direction.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADKEYVER">
            <summary>
              Looks up a localized string similar to Key version is not available.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADMATCH">
            <summary>
              Looks up a localized string similar to Ticket/authenticator don&apos;t match.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADORDER">
            <summary>
              Looks up a localized string similar to Message out of order.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADSEQ">
            <summary>
              Looks up a localized string similar to Incorrect sequence number in message.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_BADVERSION">
            <summary>
              Looks up a localized string similar to Protocol version mismatch.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_ILL_CR_TKT">
            <summary>
              Looks up a localized string similar to Illegal cross-realm ticket.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_INAPP_CKSUM">
            <summary>
              Looks up a localized string similar to Inappropriate type of checksum in message.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_METHOD">
            <summary>
              Looks up a localized string similar to Alternative authentication method required.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MODIFIED">
            <summary>
              Looks up a localized string similar to Message stream modified.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MSG_TYPE">
            <summary>
              Looks up a localized string similar to Invalid message type.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_MUT_FAIL">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOKEY">
            <summary>
              Looks up a localized string similar to Service key not available.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_NOT_US">
            <summary>
              Looks up a localized string similar to The ticket isn&apos;t for us.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_REPEAT">
            <summary>
              Looks up a localized string similar to Request is a replay.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_EXPIRED">
            <summary>
              Looks up a localized string similar to Ticket expired.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_INVALID">
            <summary>
              Looks up a localized string similar to Ticket has invalid flag set.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_TKT_NYV">
            <summary>
              Looks up a localized string similar to Ticket not yet valid.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_ERR_V4_REPLY">
            <summary>
              Looks up a localized string similar to Initial Ticket response appears to be Version 4 error.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_PATH_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to Policy rejects transited path.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_AP_WRONG_PRINC">
            <summary>
              Looks up a localized string similar to Wrong principal in request.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_ERR_FIELD_TOOLONG">
            <summary>
              Looks up a localized string similar to Field is too long for this implementation.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_ERR_GENERIC">
            <summary>
              Looks up a localized string similar to Generic error (see e-text).
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.GSS_KRB5KRB_ERR_RESPONSE_TOO_BIG">
            <summary>
              Looks up a localized string similar to Response too big for UDP, retry with TCP.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.HELPER_NOT_FOUND">
            <summary>
              Looks up a localized string similar to The {0} assembly with assembly version number of {1} failed to load.  .
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_COLUMN_INDEX">
            <summary>
              Looks up a localized string similar to The index specified must non-negative and less than the number of columns in the reader..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_CONNECTION_OPTION_VALUE">
            <summary>
              Looks up a localized string similar to Invalid value for key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_ENUMERATION_VALUE">
            <summary>
              Looks up a localized string similar to The {0} enumeration value, {1}, is invalid..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_MIN_MAX_POOL_SIZE_VALUES">
            <summary>
              Looks up a localized string similar to Invalid min or max pool size values, min pool size cannot be greater than the max pool size..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_OFFSET_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Offset value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_PARAMETER_DBTYPE">
            <summary>
              Looks up a localized string similar to Invalid parameter DbType..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_PARAMETER_DIRECTION">
            <summary>
              Looks up a localized string similar to Invalid parameter direction..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_PARAMETER_SIZE">
            <summary>
              Looks up a localized string similar to Invalid parameter size..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_PARAMETER_SOURCE">
            <summary>
              Looks up a localized string similar to Invalid parameter source..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.INVALID_SIZE_VALUE">
            <summary>
              Looks up a localized string similar to Invalid parameter Size value &apos;{0}&apos;. The value must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.KEYWORD_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Keyword not supported: {0}..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.MISSING_RESTRICTION_DEFAULT">
            <summary>
              Looks up a localized string similar to Missing restriction default..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.MUTUALLY_EXCLUSIVE_OPTIONS">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option and the &apos;{1}&apos; option cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NAMED_PARAMETER_MARKER_MISMATCH">
            <summary>
              Looks up a localized string similar to Named parameter marker mismatch. Cannot match named parameter marker {0} within the Parameter collection.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NEED_ADAPTER">
            <summary>
              Looks up a localized string similar to The DataAdapter.SelectCommand property needs to be initialized..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NO_DTC_INSTALLATION">
            <summary>
              Looks up a localized string similar to The optional DTC support components cannot be located.  Please make sure you have installed them and that they are on your path.  See the product documentation for more details..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NO_DTC_LICENSE">
            <summary>
              Looks up a localized string similar to The DataDirect ADO.NET Data Provider you are attempting to use is not licensed for use in Distributed Transactions.  A Server license is required for this feature.  If you would like to purchase a Server license, please call 800-876-3101 or visit DataDirect at www.DataDirect-Technologies.com..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NO_DTC_SUPPORT_PLATFORM">
            <summary>
              Looks up a localized string similar to The DTC is only supported on Windows 2000 or later..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NO_DTC_TRANSACTION">
            <summary>
              Looks up a localized string similar to Not in distributed transaction..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.NO_PARALLEL_TRANSACTIONS">
            <summary>
              Looks up a localized string similar to Parallel transactions not supported..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.OBJECT_DISPOSED">
            <summary>
              Looks up a localized string similar to Cannot use a disposed object..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.ODBC_CALL_ESCAPE_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to ODBC CALL escape is not supported..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.OPEN_CONNECTION_PROPERTY_SET">
            <summary>
              Looks up a localized string similar to Not allowed to change the &apos;{0}&apos; property. {1}.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.PREPARE_REQUIRES_PARAM_SIZE">
            <summary>
              Looks up a localized string similar to Prepare method requires all variable length parameters to have an explicitly set non-zero Size..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.PREPARE_REQUIRES_PARAM_TYPE">
            <summary>
              Looks up a localized string similar to Prepare method requires all parameters to have an explicitly set type..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.QUERY_FAILED">
            <summary>
              Looks up a localized string similar to Unable to build the &apos;{0}&apos; collection because execution of the command failed with the following error: {1}.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.READER_ALREADY_ACTIVE_FOR_CONNECTION">
            <summary>
              Looks up a localized string similar to A data reader is already active for this connection..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.READER_NOT_ON_ROW">
            <summary>
              Looks up a localized string similar to Operation not supported when reader is not positioned to a row..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.READER_OPEN">
            <summary>
              Looks up a localized string similar to A DataReader object is already open for this command..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.REQUIRED_ARGUMENT_WAS_NULL">
            <summary>
              Looks up a localized string similar to A required argument was null..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.REQUIRED_RESTRICTION_NOT_SPECIFIED">
            <summary>
              Looks up a localized string similar to The required restriction, {0}, was not specified..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.SUPERSEDED_OPTIONS_CANT_COEXIST">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; option has been superseded by the &apos;{1}&apos; option. They cannot be specified together in the same connection string..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TOO_MANY_RESTRICTIONS">
            <summary>
              Looks up a localized string similar to More restrictions were provided than the requested schema (&apos;{0}&apos;) supports..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TRANSACTION_CONNECTION_MISMATCH">
            <summary>
              Looks up a localized string similar to The transaction object for this command does not match the connection object for this command..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TRANSACTION_PRESENT">
            <summary>
              Looks up a localized string similar to Cannot enlist in the distributed transaction because an existing transaction is in progress on the connection.  Finish existing transaction and retry..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TRANSACTION_REQURED">
             <summary>
               Looks up a localized string similar to Execute requires the command to have a
            transaction object when the connection assigned to the command is in a
            pending local transaction.  The Transaction property of the command has
            not been initialized..
             </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TRANSACTION_ZOMBIED">
            <summary>
              Looks up a localized string similar to Operation invalid on a inactive transaction object..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.TXN_NOT_ACTIVE">
            <summary>
              Looks up a localized string similar to Transaction already commited or rolled back..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNABLE_TO_LOAD_ASSEMBLY">
            <summary>
              Looks up a localized string similar to EnableLoggingApplicationBlock is set to true but the assembly specified for LABAssemblyName failed to load &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNABLE_TO_LOAD_METHOD">
            <summary>
              Looks up a localized string similar to Unable to load the method or constructor &apos;{0}.{1}&apos;..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNABLE_TO_LOAD_TYPE">
            <summary>
              Looks up a localized string similar to Unable to load the type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNDEFINED_COLLECTION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not defined..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNSUPPORTED_PARAMETER_MODE">
            <summary>
              Looks up a localized string similar to Unsupported Parameter Mode. Uses are restricted to ANSI, BindByOrdinal or BindByName.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UNSUPPORTED_VERSION">
            <summary>
              Looks up a localized string similar to The requested collection ({0}) is not supported by this version of the provider..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_BINDINGS">
            <summary>
              Looks up a localized string similar to Incorrect channel bindings were supplied..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_MECH">
            <summary>
              Looks up a localized string similar to The requested mechanism is unavailable..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_NAME">
            <summary>
              Looks up a localized string similar to An invalid name was supplied..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_NAMETYPE">
            <summary>
              Looks up a localized string similar to A supplied name was of an unsupported type..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_QOP">
            <summary>
              Looks up a localized string similar to The requested quality of protection could not be provided by the context..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_SIG">
            <summary>
              Looks up a localized string similar to A token had an invalid MIC..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BAD_STATUS">
            <summary>
              Looks up a localized string similar to An invalid status code was supplied..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_BUFFER_OVERFLOW">
            <summary>
              Looks up a localized string similar to Output buffer overflow.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_CONTEXT_EXPIRED">
            <summary>
              Looks up a localized string similar to The context has already expired..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_CREDENTIALS_EXPIRED">
            <summary>
              Looks up a localized string similar to The credentials could not be acquired because they have expired..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_DEFECTIVE_CREDENTIAL">
            <summary>
              Looks up a localized string similar to The referenced credentials were invalid..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_DEFECTIVE_TOKEN">
            <summary>
              Looks up a localized string similar to Consistency checks on input token failed..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_DUPLICATE_ELEMENT">
            <summary>
              Looks up a localized string similar to The requested credential element already exists..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_FAILURE">
            <summary>
              Looks up a localized string similar to Unspecified error at the GSS layer..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_NAME_NOT_MN">
            <summary>
              Looks up a localized string similar to The provided name was not a mechanism name..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_NO_CONTEXT">
            <summary>
              Looks up a localized string similar to No context has been established..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_NO_CRED">
            <summary>
              Looks up a localized string similar to No credentials were found for the specified name..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_NO_SERVICE_PRINCIPLE">
            <summary>
              Looks up a localized string similar to No Service Principle Name.
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_UNAUTHORIZED">
            <summary>
              Looks up a localized string similar to The operation is forbidden by local security policy..
            </summary>
        </member>
        <member name="P:DDTek.Common.CommonStrings.UT_GSS_UNAVAILABLE">
            <summary>
              Looks up a localized string similar to The operation is unavailable..
            </summary>
        </member>
        <member name="F:DDInt.Common.CommonTimestampEscape.m_value">
            Time/date/timestamp value.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.#ctor(DDInt.Parser.BaseSQLTreeNode)">
             Constructor.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral ...
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.validateValue">
            Validate the time/date/timestamp value, since the parser only
            recognizes a string literal.  The contents of the string literal
            were not checked.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getYear">
             Returns the year (yyyy) value for the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the year value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMonth">
             Returns the month (mm) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the month value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDay">
             Returns the day (dd) value from the yyyy-mm-dd or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the day value for ODBC 'd' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getHour">
             Returns the hour (hh) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the hour value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getMinutes">
             Returns the minutes (mm) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the minutes value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getSeconds">
             Returns the seconds (ss) value from the hh:mm:ss[.f...] or
             yyyy-mm-dd hh:mm:ss[.f...] escape formats; null, otherwise.
            
             @return the seconds value for ODBC 't' and 'ts' escapes; null,
             otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Common.CommonTimestampEscape.getSecondsFraction" -->
        <member name="M:DDInt.Common.CommonTimestampEscape.getTimestamp">
             Returns the timestamp value in the ODBC format
             (yyyy-mm-dd hh:mm:ss[.f...]).
            
             @return the timestamp value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getTime">
             Returns the time value in the ODBC format (hh:mm:ss[.f...]).
            
             @return the time value in the ODBC format.
        </member>
        <member name="M:DDInt.Common.CommonTimestampEscape.getDate">
             Returns the date value in the ODBC format (yyyy-mm-dd).
            
             @return the date value in the ODBC format.
        </member>
        <member name="T:DDInt.Common.CommonTrace">
            <summary>
            The Connect for .NET Provider supports tracing through the CommonTrace class.
            The provider can trace all of its method calls and the returns from those
            method calls to a trace file specified by the user.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.SetEnableTrace(System.Int32)">
            <summary>
            The EnableTrace() property enables tracing. The default is 0 (disabled).
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonTrace.DumpFootprints">
            <summary>
            The DumpFootprints() method displays the footprint of all source files
            in a data provider.
            </summary>
        </member>
        <member name="P:DDInt.Common.CommonTrace.TraceFile">
            <summary>
            The TraceFile property gets or sets the name of the trace output file.
            </summary>
        </member>
        <member name="M:DDInt.Common.CommonUtility.BytesToString(System.Byte[],System.Int32)">
             This method accepts a byte array and constructs a string which
             represents the contents of the byte array. For instance, a byte
             array containing 0x6162 (two bytes) is returned as the string
             "6162" (four characters).
            
             @param bytes The array which contains the bytes representing
             the UCS2 characters.
            
             @param len The number of "relevant" bytes in the array.
        </member>
        <member name="M:DDInt.Common.CommonUtility.ByteToHex(System.Byte)">
             Used to convert a single byte into a string which contains
             its hexadecimal representation.
            
             @param b The value of the byte whose hexadecimal representation is to
             be constructed.
        </member>
        <member name="T:DDInt.License.LicFile">
            <summary>
            Summary description for LicenseFile.
            </summary>
        </member>
        <member name="T:DDInt.License.LicProvider">
            <summary>
            Class that contains per provider info.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQL" -->
        <member name="F:DDInt.Parser.BaseSQL.SQL_UNKNOWN">
            SQL is of unknown type.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_SELECT">
            SQL is a SELECT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_CREATE_TABLE">
            SQL is a CREATE TABLE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_CALL">
            SQL is a CALL statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_INSERT_TABLE">
            SQL is a INSERT statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_UPDATE_TABLE">
            SQL is a UPDATE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DML_DELETE_TABLE">
            SQL is a DELETE statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.SQL_DDL_UNKNOWN_STMT">
            SQL is an unknown DDL statement.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQL">
            SQL specified by the application.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_hasForUpdate">
            True if sql contains a FOR UPDATE [ OF column_name [ ,...n ] ] clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasReadOnly">
            True if sql contains a FOR READ ONLY clause
        </member>
        <member name="F:DDInt.Parser.BaseSQL.escapeTranslator">
            Used to translate ODBC style escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.processLevel">
            Specifices to what level the SQL needs to be processed.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQL.quote">
            Quote character for string literals and quoted identifiers.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.type">
            One of the SQL_ constants.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.treeRoot">
            Special SQL statement root node.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.createTableColumnSpecificationNodes">
            !!!Change once DB2 has changed interface!!!
            This vector actually just contains a BaseSQLListManipulator.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.selectListManipulator">
            Used to modify the select list.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.hasEscape">
            true if sql contains at least one escape.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.mayHaveParameters">
            A guess as to whether or not the statement contains parameter markers.
            A true indicates that the statement may contain parameter markers.
            A false indicates that the statement does not contain parameter markers.
            False is definitive and true isn't.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.m_isBatch">
            true if contains a batch of SQL statements.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.originalSQLs">
            Batch of BatchSubStatements if in batch mode.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.currentBatch">
            Current batch statment in the interation.
        </member>
        <member name="F:DDInt.Parser.BaseSQL.tableInfo">
            Just holds the object created by BaseSQLParser.  
            
            See the documentation there.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,System.Int32,System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.String,DDInt.Parser.BaseSQL)">
            Constructor for single SQL statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(DDInt.Parser.BaseSQL,System.Int32)">
            Constructor that copies everything except the processing level
        </member>
        <member name="M:DDInt.Parser.BaseSQL.#ctor(System.Char,System.Boolean,DDInt.Common.CommonEscapeTranslator,DDInt.Parser.SQLDialect)">
            Constructor to prepare for a batch of SQL statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.dumpTree">
            Prints the tree to System.out
        </member>
        <member name="M:DDInt.Parser.BaseSQL.processSQL">
            Builds the SQL tree and translates escapes.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.nextBatchStatement">
             Position to the next SQL statement in a batch.
            
             @return - true if moved to next, false if no more statements
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isBatch">
            Returns true if contains a batch of SQL statements.
            If so, next() is used to interate through the batch.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.batchSize">
            Returns number of batch statements being contained
        </member>
        <member name="M:DDInt.Parser.BaseSQL.addToBatch(System.String,System.Int32)">
            Adds a statement to the batch of statements.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.clearBatch">
            Resets batch statement list.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getOriginal">
            Return SQL text originally specified by the application.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getVerb">
             Returns the VERB string.
            
             @return String - the SQL verb associated with original SQL.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getType">
             Get accessor for the "type" field.
            
             @return int - one of the SQL_ constants
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isStatementSuitableForAutoGeneratedKeys">
             Determines if the statement is suitable for the return of auto-generated
             keys. To be suitable, the statement must be a single INSERT.
            
             @return true if statement is suitable for the return of auto-generated
             keys; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.isCallEscapeStatement">
             Determines if statement is a call escape.
            
             @return true if statement is a call escape; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFormatted">
             Returns processed SQL.
            
             @return String - SQL that has (maybe) been massaged for execution
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateTableSpecification">
             Called to get the table specification for an update statement; that is
             UPDATE or INSERT.
            
             @return String - table name
             @return 'null'- not an update statement, or the table name could not
             be found/parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getUpdateColumnSpecification(System.Int32)">
             Returns the name of the column being updated associated with the
             parameter specified.  If there is no column specification then the
             ordinal position of the parameter in the values list is returned.
            
             Note that most of the implementation of this method was written in
             terms of exisiting primitive-like methods.  Some of the called
             methods may not seem to fit the context of this method, but the
             implementations of the called methods perform the correct mechanics.
             Perhaps the primitive-like method names should change to reflect their
             general use.
            
             @param - int valueListParameterPosition - ordinal position of a
             parameter in a values list for an insert or update statement
            
             @return String - column name or ordinal parameter position
             @return null - if column name does not exist or cound not be found,
             and/or oridinal parameter position could not be located in the values
             list
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildSQLTree">
             Creates the SQL tree.
            
             @exception SQLException
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount">
             Returns the number of parameter markers in a SQL statement using
             the SQLDialect in force
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getParameterCount(DDInt.Parser.SQLDialect)">
             Returns the number of parameter markers in a SQL statement using
             the specified SQLDialect.
            
             @return int - parameter count
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStatementCount">
            Returns the number of statements recognized in the executing SQL
            
            Warning: whether or not a statement is properly recognized may be
            affected by the presence of native syntax.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setParameter(System.Int32,System.String)">
             Changes the string value for a parameter marker
            
             @param index - zero based parameter
             @param value - new parameter marker value
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getStringPreceedingParameter(System.Int32)">
             Returns a string containing the string immediately preceeding
             the specified parameter marker. Returns a null object reference if:
                - nothing preceeds the specified parameter marker,
            
             @param index - zero based parameter
        </member>
        <member name="M:DDInt.Parser.BaseSQL.resultType">
             Determines if SQL returns a result set or an update count.
            
             Issues/Bugs:
            
             - Determining SQL type does not take into account that there may
               actually be more than one statement concatenated;
               e.g. "select * from foo select * from bar"
            
             @return bool - true if a select
                               false otherwise
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecificationCount">
             Returns the number of columns definitions in a create table statement.
            
             Note this method MUST be called before calling
             get/setCreateTableColumnSpecification.
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getCreateTableColumnSpecification(System.Int32)">
             Returns a ArrayList of column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setCreateTableColumnSpecification(System.Int32,System.String)">
             Sets the new column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListCount(DDInt.Parser.BaseSQLTreeNode,System.Collections.ArrayList)">
             Returns the number of list elements in the first top level paren expression.
            
             Note this method MUST be called before calling
             get/setFirstTopLevelParenExpListElement
            
             @param list - empty list that will be subsequently used to pass to
             related methods
            
             @return int - number of columns, -1 if not a create table statement.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32)">
             Returns a vector of list elements in the first top level paren expression tokens.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setFirstTopLevelParenExpListElement(System.Collections.ArrayList,System.Int32,System.String)">
             Sets the new list element in the first top level paren expression.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecificationCount">
             Returns the number of column definitions in a SELECT statement.
            
             Note that 1 will be returned if the column spec list is actually empty;
             e.g. "create table foo ()"
            
             Note this method MUST be called before calling
             get/setSelectColumnSpecification.
            
             @return int - number of columns, -1 if not a select statement or ill
             formed select statement
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSelectColumnSpecification(System.Int32)">
             Returns a ArrayList of select column specification tokens.
            
             @param index - zero based index;
                            MUST be valid per getSelectColumnSpecificationCount
             @return ArrayList - contains tokenize values
        </member>
        <member name="M:DDInt.Parser.BaseSQL.setSelectColumnSpecification(System.Int32,System.String)">
             Sets the new select column specification.
            
             @param index - zero based index;
                            MUST be valid per getCreateTableColumnSpecificationCount
             @param String - new column specification
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsValue(System.Collections.ArrayList,System.String)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.selectColumnSpecificationContainsNode(System.Collections.ArrayList,System.Int32)">
            Returns true if column specification contains a the given string
        </member>
        <member name="M:DDInt.Parser.BaseSQL.buildFromParts(System.Collections.ArrayList,System.String)">
        </member>
        <member name="M:DDInt.Parser.BaseSQL.getSingleTableFromSpecification">
            Returns table name if selecting from a single table, otherwise returns null
        </member>
        <member name="M:DDInt.Parser.BaseSQL.lookForSelectNodeType(System.Int32)">
            Returns true if a node of the given type is found in the tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly">
            Returns true if the sql contains a FOR READ ONLY clause; false,
            otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForReadOnly(System.Boolean)">
            Used by the parser to record the presence of a FOR READ ONLY clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate">
            Returns true if the sql contains a FOR UPDATE clause; false, otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasForUpdate(System.Boolean)">
            Used by the parser to record the presence of a FOR UPDATE clause.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasGroupBy">
            Returns true if contains a 'group by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasWhereClause">
            Returns true if contains a 'where' clause
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasHaving">
            Returns true if contains a 'having'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSetOperation">
            Returns true if contains a set operation; e.g. 'union'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasOrderBy">
            Returns true if contains a 'order by'
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasAggregateOrParameterInSelectList(System.String[])">
            Returns true if the select list contains an aggregate function.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.hasSelectDistinct">
            Returns true if select is followed by the distinct keyword
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsParameterMarker(System.String,DDInt.Parser.SQLDialect)">
            		 * Guesses whether or not the statement contains parameter markers.
                     * 
                     * The scan is a guess because it doesn't take into consideration 
                     * delimited strings or comments.
        </member>
        <member name="M:DDInt.Parser.BaseSQL.containsEscape">
            Determines if the statement contains escapes.
        </member>
        <member name="T:DDInt.Parser.BaseSQL.BaseBatchSubStatement">
            Contains a SQL statment and its needed processing level.
        </member>
        <member name="T:DDInt.Parser.BaseSQLEscapeProcessor">
             Finds escapes in the SQL tree, sends them to the escape translator,
             and patches the translations back in.
            
             Note that nested escapes are handled by the escape parser, so they
             are not processed by this class as a separate escape.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraversalVisitor">
            <summary>
            Summary description for BaseSQLTreeTraversalVisitor.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.translator">
            Used to translate escapes.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.escapeNode">
            Escape node that will be replaced with the translation.
        </member>
        <member name="F:DDInt.Parser.BaseSQLEscapeProcessor.whereNode">
            'where' node, if any, associated with the current escape
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.getWhereClause(DDInt.Parser.BaseSQLTreeNode)">
             Finds and returns the 'where' clause.
            
             Look up through the tree until the 'from' is
             found, then look at 'from' siblings until 'where' is found.
        </member>
        <member name="M:DDInt.Parser.BaseSQLEscapeProcessor.replaceEscape(System.String,System.String)">
            Updates the SQL tree with the translated escape.
        </member>
        <member name="T:DDInt.Parser.BaseSQLFromSpecificationGenerator">
            <summary>
            Summary description for BaseSQLFromSpecificationGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLFromSpecificationGenerator.objectsInSpecification">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLListManipulator">
            <summary>
            Summary description for BaseSQLListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListManipulator.listElements">
            Contains the list elements.
            Even indices are index.
            Odd indices are nodes.
        </member>
        <member name="M:DDInt.Parser.BaseSQLListManipulator.setElement(System.Int32,System.String)">
             Sets the list element to the given value.
            
             This is done buy "emptying" this current list value nodes
             (but leaving them intact), creating a sub-tree out of the new value,
             and making this new sub-tree a child of the last node in the 
             original list.
        </member>
        <member name="T:DDInt.Parser.BaseSQLListPartManipulator">
            <summary>
            Summary description for BaseSQLListPartManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the select list:
            select a as x, b as z from foo
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.stopLevel">
            Level at which the LIST_PART is located, used to stop the traversal.
        </member>
        <member name="F:DDInt.Parser.BaseSQLListPartManipulator.selectListReplacement">
            If non-null, replace the select list with this string
        </member>
        <member name="T:DDInt.Parser.BaseSQLNodeLocator">
            <summary>
            Summary description for BaseSQLNodeLocator.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParameterProcessor">
            <summary>
            Summary description for BaseSQLParameterProcessor.
            </summary>
        </member>
        <member name="T:DDInt.Parser.BaseSQLParenExpListManipulator">
            <summary>
            Summary description for BaseSQLParenExpListManipulator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.parenNestingLevel">
            Nesting level of the paren expressions
            For example:  ( A ( B ) )
                          A is at level 0, B is at level 1
        </member>
        <member name="F:DDInt.Parser.BaseSQLParenExpListManipulator.listElementCount">
            Number of list elements.
            For example, there are two elements in the column list:
            create table foo (a int, b int)
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDInt.Parser.BaseSQLParser" -->
        <member name="F:DDInt.Parser.BaseSQLParser.sqlProcessor">
             Used to record positions of certain UPDATE/INSERT statemet clauses.
            
             !!!REVISIT!!!
             Instead of recording positions of various clauses in the sqlProcessor,
             create a BaseSQLTreeNode nodes that encapsulate the meaning and search
             for it when processing the semantics of the statement.  For example,
             BaseSQLTreeNode.NODE_TABLE_NAME node could be used to identify an
             UPDATE statement's table.
            
             !!!REVISIT!!!
             Note that current check to see if sqlProcessor is null are no longer
             needed.  In the past replaced clauses were re-parsed (e.g., escape
             translations).  This is still true, but the parse level is always
             PROCESS_PARAMS, so no UPDATE/INSERT clauses are ever parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.scanner">
            Lexical analyzer.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.nodeSubParse">
            Set by parsing methods to indicate the result of a sub parse
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.tableInfo">
            Each vector element is an array of two Objects.  The first object,
            element  [0], is the root node of the possibly qualfied table name.  
            The second object, element [1], will be the root node of the correlation 
            name.
            
            tableInfo will be maintained when PROCESS_TABLES is on, and will only
            process table information in the context of a 'FROM' clause.
            
            Note that instead of generic containers with casts, a new class for 
            describing the table, and a new class to contain the new table class 
            could be written.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.processLevel">
            Specifices to what level the SQL needs to be parsed.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.intoIsOptional">
            True if the "into" in an insert statement is optional
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.escapeTranslator">
            Used to indicate the type of escape parsing required.
        </member>
        <member name="F:DDInt.Parser.BaseSQLParser.m_sqlDialect">
            Used to indicate the dialect of SQL being parsed.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.#ctor(DDInt.Common.CommonEscapeTranslator,System.Int32,System.Boolean,DDInt.Parser.SQLDialect)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.setUp(DDInt.Parser.BaseSQL)">
            Setter of BaseExceptions.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parse(System.String,System.Char)">
             Parses the given SQL statement and returns the root
             node of the representative tree.
            
             @return BaseSQLTreeNode - root of the SQL tree if successfully parsed.
             @deprecated SQLException - fatal exception
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSQL" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatement">
            		 * Parses the Statement non-terminal.
            		 *
            		 * Statement
            		 *     ::= SelectStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= InsertStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            		 *     ::= UpdateStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
            		 *
            	     *     ::= CreateStatement
            		 *         NODE_STATEMENT_ROOT
            	     *         $1
            		 *
            	     *     ::= DeleteStatement
            	     *         NODE_STATEMENT_ROOT
            	     *         $1
            	     *
            		 *     ::= UnknownStatement
            		 *         NODE_STATEMENT_ROOT
            		 *         $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseStatementList">
             Parses the StatementList non-terminal.
            
             StatementList
                 ::= Statement StatementSeparator _EndOfStatementTerminal
                     $1 -> [$2] -> $3
            
                 ::= Statement StatementSeparator StatementList
                     $1 -> [$2] -> $3
            
                 ::= _EndOfStatementTerminal
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseStatementSeparator" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseCreateStatement">
             Parses the CreateStatement non-terminal.
            
             CreateStatement
                 ::= _CREATE_TABLE AlmostAnything
                     NODE_CREATE_STATEMENT
                     $1 $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSelectStatement">
             Parses the SelectStatement non-terminal.
            
             SelectStatement
                 ::= QueryExpression OrderByClause ForClause
                     NODE_SELECT_STATEMENT
                     $1 -> [$2] -> [$3]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQueryExpression">
             Parses the QueryExpression non-terminal.
            
             QueryExpression
                 ::= _SELECT List FromClause WhereClause GroupByClause HavingClause SetOperation
                     NODE_QUERY_EXP
                     $1 -> $2 -> [$3] -> $4 -> [$5] -> [$6] -> [$7]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDeleteStatement">
             Parses the DeleteStatement non-terminal.
            
             DeleteStatement
                 ::= _DELETE _FROM QualifiedName WhereClause
                     NODE_DELETE_STATEMENT
                     $1 -> $2 -> $3 -> $4
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseInsertStatement">
             Parses the InsertStatement non-terminal.
            
             InsertStatement
                 ::= _INSERT _INTO QualifiedName ColumnList _VALUES ParenthesizedExpression
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
            
                 ::= _INSERT _INTO QualifiedName ColumnList SubQuery
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5
            
                 ::= _INSERT _INTO QualifiedName ColumnList _DEFAULT _VALUES
                     NODE_INSERT_STATEMENT
                     $1 -> $2 -> $3 -> [$4] -> $5 -> $6
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUpdateStatement">
             Parses the UpdateStatement non-terminal.
            
             UpdateStatement
                 ::= _UPDATE QualifiedName _SET List WhereClause
                     NODE_UPDATE_STATEMENT
                     $1 -> $2 -> $3 -> $4 -> $5
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseQualifiedName">
             Parses the QualifiedName non-terminal.
            
             QualifiedName
                 ::= _IdentifierOrUnknownKeyword(false) [ _Dot ... _IdentifierOrUnknownKeyword(false) ] ...
                     NODE_UNKNOWN
                     $1 -> [ $2 -> ... ]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatement">
             Parses the UnknownStatement non-terminal.
            
             UnknownStatement
                 ::= UnknownStatementComponents
                     NODE_UNKNOWN_STATEMENT
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseUnknownStatementComponents">
             Parses the UnknownStatementComponents non-terminal.
            
             UnknownStatementComponents
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _Parameter UnknownStatementComponents
                     $1 -> $2
            
                 ::= Escape UnknownStatementComponents
                     $1 -> $2
            
                 ::= _AnyToken UnknownStatementComponents
                     $1 -> $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseList">
             Parses the List non-terminal.
            
             List
                 ::= AlmostAnything(true,false)
                     NODE_LIST_PART
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseFromClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseWhereClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parsePredicate" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parsePredicateType">
             Parses the PredicateType non-terminal.
            
             PredicateType
            		::= ComparisonPredicate
             	::= BetweenPredicate
             	::= InPredicate
             	::= LikePredicate
             	::= ExisitsPredicate
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseComparisonPredicate">
             Parses the ComparisonPredicate non-terminal.
            
              ComparisonPredicate
             	::= ValueExpression CompOp ValueExpression
              
              CompOp
             	::= _Equal
             
             	::= _LessThan
             
             	::= _LessThanOrEqual
             
             	::= _GreaterThan
             
             	::= _GreaterThanEqual
             
             	::= _Unequal
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseBetweenPredicate">
             Parses the BetweenPredicate non-terminal.
            
              BetweenPredicate
             	::= ValueExpression BetweenExpression 
             		 ValueExpression _And ValueExpression 
             
             BetweenExpression
             	::= Not_opt _Between
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseGroupByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseHavingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseForClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseSetOperation" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrespondingClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseByPart" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperationLastPart">
             Parses the SetOperationLastPart non-terminal.
            
             SetOperationLastPart
                 ::= QueryExpression
                     NODE_UNKNOWN
                     $1
            
                 ::= AlmostAnything(true,false)
                     NODE_UNKNOWN
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOrderByClause" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAllPart" -->
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseColumnList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSetOperator">
             Parses the SetOperator non-terminal.
            
             SetOperator
                 ::= _UNION
                     $1
            
                 ::= _INTERSECT
                     $1
            
                 ::= _EXCEPT
                     $1
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseAlmostAnything(System.Boolean,System.Boolean,System.Object[])" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseParenthesizedExpression">
             Parses the ParenthesizedExpression non-terminal.
            
             ParenthesizedExpression
                 ::= _LeftParen AlmostAnything(false,true) _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseSubQuery">
             Parses the SubQuery non-terminal.
            
             SubQuery
                 ::= _LeftParen QueryExpression _RightParen
                     NODE_PAREN_ROOT
                     $1 -> $2 -> $3
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscape">
             Parses the Escape non-terminal.
            
             Escape
                 ::= CallEscape
                     $1
            
                 ::= FunctionEscape
                     $1
            
                 ::= OuterJoinEscape
                     $1
            
                 ::= TimeEscape
                     $1
            
                 ::= DateEscape
                     $1
            
                 ::= TimestampEscape
                     $1
            
                 ::= EscapeEscape
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimeEscape">
             Parses the TimeEscape non-terminal.
            
             TimeEscape
                 ::= _LeftBrace _T _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIME escape.
                     NODE_TIME_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _T RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseDateEscape">
             Parses the DateEscape non-terminal.
            
             DateEscape
                 ::= _LeftBrace _D _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the DATE escape.
                     NODE_DATE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _D RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTimestampEscape">
             Parses the TimestampEscape non-terminal.
            
             TimestampEscape
                 ::= _LeftBrace _TS _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the TIMESTAMP escape.
                     NODE_TIMESTAMP_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _TS RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeEscape">
             Parses the EscapeEscape non-terminal.
            
             EscapeEscape
                 ::= _LeftBrace _ESCAPE _StringLiteral _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the ESCAPE escape.
                     NODE_ESCAPE_ESCAPE
                     $1 -> $2 -> 3 -> 4
            
                 ::= _LeftBrace _ESCAPE RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> 3...
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingStringLiteralEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseFunctionEscape">
             Parses the FunctionEscape non-terminal.
            
             FunctionEscape
                 ::= _LeftBrace _FN _ScalarFunctionName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the FUNCTION escapes.
                     NODE_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _FN RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseCallEscape">
             Parses the CallEscape non-terminal.
            
             CallEscape
                 ::= _LeftBrace _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_PROCEDURE escapes.
                     NODE_CALL_PROCEDURE_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5
            
                 ::= _LeftBrace _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3...
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL QualifiedName EscapeParameterList _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the CALL_FUNCTION escapes.
                     NODE_CALL_FUNCTION_ESCAPE
                     $1 -> $2 -> $3 -> $4 -> $5 -> $6 -> $7
            
                 ::= _LeftBrace _Parameter _EqualOperator _CALL RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 -> $3 -> $4 -> $5...
            
             Common CallEscape endings are parsed via parseRemainingCallEscape.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseRemainingCallEscape(DDInt.Parser.BaseSQLTreeNode,System.Int32)" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinEscape">
             Parses the OuterJoinEscape non-terminal.
            
             OuterJoinEscape
                 ::= _LeftBrace _OJ OuterJoin _RightBrace
                     // Reduction only valid if FULL_TRANSLATION_NEEDED
                     // is required for the OUTER_JOIN escapes.
                     NODE_OUTER_JOIN_ESCAPE
                     $1 -> $2 -> $3 -> $4
            
                 ::= _LeftBrace _OJ RestOfEscape
                     NODE_UNKNOWN
                     $1 -> $2 ->3...
            
             Unless full translation is needed, the sub-tree is marked NODE_UNKNOWN,
             since the it will not require further translation work.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseOuterJoin" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseOuterJoinOrTableReference">
             Parses the OuterJoinOrTableReference non-terminal.
            
             OuterJoinOrTableReference
                 ::= OuterJoin
                     $1
            
                 ::= TableReference
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseJoinType(DDInt.Parser.BaseSQLTreeNode)">
             Parses the JoinType non-terminal.
            
             JoinType
                 ::= _LEFT _OUTER _JOIN
                     NODE_LEFT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _RIGHT _OUTER _JOIN
                     NODE_RIGHT_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
                 ::= _FULL _OUTER _JOIN
                     NODE_FULL_OUTER_JOIN_OP
                     $1 -> $2 -> $3
            
             The method updates the type of the node as well.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseTableReference">
             Parses the TableReference non-terminal.
            
             TableReference
                 ::= QualifiedName CorrelationName
                     NODE_TABLE_REFERENCE
                     $1 -> [$2]
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.lookAheadForVerboseJoinOutsideOJEscape">
            Looks ahead for certain join related keywords.
            
            The state of the parser is unaffected by
            this method.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseCorrelationName" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseSearchCondition">
             Parses the SearchCondition non-terminal.
            
             SearchCondition
                 ::= AlmostAnything(true,false);
                     NODE_SEARCH_CONDITION
                     $1
            
             A search condition is everything up to the next ON keyword or
             until the end of the escape is encountered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterList" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameters">
             Parses the EscapeParameters non-terminal.
            
             EscapeParameters
                 ::= EscapeParameter _Comma EscapeParameters
                     $1 -> $2 -> $3
            
                 ::= EscapeParameter
                     $1
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.parseEscapeParameter">
             Parses the EscapeParameter non-terminal.
            
             EscapeParameter
                 ::= EscapeParameterComponents
                     NODE_ESCAPE_PARAMETER
                     $1
            
             A parameter is everything up to the next comma or right paren.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseEscapeParameterComponents" -->
        <member name="M:DDInt.Parser.BaseSQLParser.parseRestOfEscape(System.Int32)">
             Parses the RestOfEscape non-terminal.
            
             RestOfEscape
                 ::= _EndOfStatementTerminal
                     $1
            
                 ::= _RightBrace(translationNeeded)
                     $1
            
                 ::= Escape RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _Parameter RestOfEscape(translationNeeded)
                     $1 -> $2
            
                 ::= _AnyToken RestOfEscape(translationNeeded)
                     $1 -> $2
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.parseParameter" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchGroupBy">
             Parses the GROUP BY terminals.
            
             _GROUP_BY
                 ::= TOKEN_ID_OR_KEYWORD("group") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchHavingTerminal">
             Matches the HAVING terminal.
            
             _HAVING
                 ::= TOKEN_ID_OR_KEYWORD("having")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOrderByTerminal">
             Matches the ORDER BY terminals.
            
             _ORDER_BY
                 ::= TOKEN_ID_OR_KEYWORD("order") TOKEN_ID_OR_KEYWORD("by")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnionTerminal">
             Matches the UNION terminals.
            
             _UNION
                 ::= TOKEN_ID_OR_KEYWORD("union")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntersectTerminal">
             Matches the INTERSECT terminals.
            
             _INTERSECT
                 ::= TOKEN_ID_OR_KEYWORD("intersect")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExceptTerminal">
             Matches the EXCEPT terminal.
            
             _EXCEPT
                 ::= TOKEN_ID_OR_KEYWORD("except")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchByTerminal">
             Matches the BY terminal.
            
             _BY
                 ::= TOKEN_ID_OR_KEYWORD("by")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCreateTable">
             Parses the CREATE TABLE terminals.
            
             _CREATE_TABLE
                 ::= TOKEN_ID_OR_KEYWORD("create") TOKEN_ID_OR_KEYWORD("table")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSelectTerminal">
             Matches the SELECT terminal.
            
             _SELECT
                 ::= TOKEN_ID_OR_KEYWORD("select")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFromTerminal">
             Matches the FROM terminal.
            
             _FROM
                 ::= TOKEN_ID_OR_KEYWORD("from")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhereTerminal">
             Matches the WHERE terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("where")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNotTerminal">
             Matches the NOT terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("not")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchNullTerminal">
             Matches the NULL terminal.
            
             _NULL
                 ::= TOKEN_ID_OR_KEYWORD("null")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExistsTerminal">
             Matches the EXISTS terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("exists")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchBetweenTerminal">
             Matches the BETWEEN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("between")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLikeTerminal">
             Matches the LIKE terminal.
            
             _LIKE
                 ::= TOKEN_ID_OR_KEYWORD("like")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInTerminal">
             Matches the IN terminal.
            
             _WHERE
                 ::= TOKEN_ID_OR_KEYWORD("in")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAllTerminal">
             Matches the ALL terminal.
            
             _ALL
                 ::= TOKEN_ID_OR_KEYWORD("all")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCorrespondingTerminal">
             Matches the CORRESPONDING terminal.
            
             _CORRESPONDING
                 ::= TOKEN_ID_OR_KEYWORD("corresponding")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInsertTerminal">
             Matches the INSERT terminal.
            
             _INSERT
                 ::= TOKEN_ID_OR_KEYWORD("insert")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDeleteTerminal">
             Matches the DELETE terminal.
            
             _DELETE
                 ::= TOKEN_ID_OR_KEYWORD("delete")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSetTerminal">
             Matches the SET terminal.
            
             _SET
                 ::= TOKEN_ID_OR_KEYWORD("set")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIntoTerminal">
             Matches the INTO terminal.
            
             _INTO
                 ::= TOKEN_ID_OR_KEYWORD("into")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUpdateTerminal">
             Matches the UPDATE terminal.
            
             _UPDATE
                 ::= TOKEN_ID_OR_KEYWORD("update")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchValuesTerminal">
             Matches the VALUES terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("values")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDefaultTerminal">
             Matches the DEFAULT terminal.
            
             _VALUES
                 ::= TOKEN_ID_OR_KEYWORD("default")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOnTerminal">
             Matches the ON terminal.
            
             _ON
                 ::= TOKEN_ID_OR_KEYWORD("ON")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCrossTerminal">
             Matches the CROSS terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("CROSS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchInnerTerminal">
             Matches the INNER terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("INNER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchJoinTerminal">
             Matches the JOIN terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("JOIN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUsingTerminal">
             Matches the USING terminal.
            
             _CROSS
                 ::= TOKEN_ID_OR_KEYWORD("USING")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftTerminal">
             Matches the LEFT terminal.
            
             _LEFT
                 ::= TOKEN_ID_OR_KEYWORD("left")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightTerminal">
             Matches the RIGHT terminal.
            
             _RIGHT
                 ::= TOKEN_ID_OR_KEYWORD("right")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFullTerminal">
             Matches the FULL terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("full")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterTerminal">
             Matches the OUTER terminal.
            
             _FULL
                 ::= TOKEN_ID_OR_KEYWORD("OUTER")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOuterJoinTerminal">
             Matches the OUTER JOIN terminals.
            
             _OUTER _JOIN
                 ::= TOKEN_ID_OR_KEYWORD("outer") TOKEN_ID_OR_KEYWORD("join")
                     $1
                     $2
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchOjTerminal(System.Int32)">
             Matches the OJ terminal.
            
             _OJ
                 ::= TOKEN_ID_OR_KEYWORD("OJ")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCallTerminal">
             Matches the CALL terminal.
            
             _CALL
                 ::= TOKEN_ID_OR_KEYWORD("CALL")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchExtTerminal">
             Matches the EXT terminal.
            
             _EXT
                 ::= TOKEN_ID_OR_KEYWORD("EXT")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchFnTerminal(System.Int32)">
             Matches the FN terminal.
            
             _FN
                 ::= TOKEN_ID_OR_KEYWORD("FN")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDTerminal(System.Int32)">
             Matches the D terminal.
            
             _D
                 ::= TOKEN_ID_OR_KEYWORD("D")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTTerminal(System.Int32)">
            		 * Matches the T terminal.
            		 *
            		 * _T
            		 *     ::= TOKEN_ID_OR_KEYWORD("T")
            		 *         NODE_UNKNOWN
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTsTerminal(System.Int32)">
             Matches the TS terminal.
            
             _TS
                 ::= TOKEN_ID_OR_KEYWORD("TS")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEscapeTerminal">
             Matches the ESCAPE terminal.
            
             _ESCAPE
                 ::= TOKEN_ID_OR_KEYWORD("ESCAPE")
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchScalarFunctionNameTerminal" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchStringLiteralTerminal">
             Matches a string literal terminal.
            
             _StringLiteral
                 ::= TOKEN_STRING_LITERAL
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchIdentifierOrUnknownKeyword(System.Boolean)">
             Matches a delimited identifier, identifier, or keyword terminal.
            
             Parse modifier:
             bool ignoreKeyWords
            
             _IdentifierOrUnknownKeyword
                 ::= TOKEN_DELIMITED_ID
                     NODE_UNKNOWN
            
                 ::= TOKEN_ID_OR_KEYWORD
                     // Reduction only valid if ignoreKeyWords is true and
                     // the current token is any of the ones defined below.
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchUnknownTokenTerminal">
             Matches a unknown_token terminal.
            
             _UnknownToken
                 ::= TOKEN_UNKNOWN
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchTerminal(System.Int32,System.Int32,System.Boolean)">
            Matches a special character terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchSemicolonTerminal">
             Matches the ';' terminal.
            
             _Semicolon
                 ::= TOKEN_SPECIAL_CHAR(";")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEqualOperatorTerminal">
             Matches the '=' terminal.
            
             _EqualOperator
                 ::= TOKEN_SPECIAL_CHAR("=")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCommaTerminal">
             Matches the ',' terminal.
            
             _Comma
                 ::= TOKEN_SPECIAL_CHAR(",")
                     NODE_COMMA
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchCompareOpTerminal">
            
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchDotTerminal">
             Matches a '.' terminal.
            
             _Dot
                 ::= TOKEN_SPECIAL_CHAR(".")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftParenTerminal">
             Matches the '(' terminal.
            
             _LeftParen
                 ::= TOKEN_SPECIAL_CHAR("(")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightParenTerminal">
             Matches the ')' terminal.
            
             _RightParen
                 ::= TOKEN_SPECIAL_CHAR(")")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchLeftBraceTerminal(System.Int32)">
             Matches the '{' terminal.
            
             _LeftBrace
                 ::= TOKEN_SPECIAL_CHAR("{")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchRightBraceTerminal(System.Int32)">
             Matches the '}' terminal.
            
             _RightBrace
                 ::= TOKEN_SPECIAL_CHAR("}")
                     NODE_UNKNOWN
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchEndOfStatementTerminal">
             Matches the EOS terminal.
            
             _EndOfStatementTerminal
                 ::= TOKEN_END_OF_SQL
                     NODE_UNKNOWN
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDInt.Parser.BaseSQLParser.matchAnyToken" -->
        <member name="M:DDInt.Parser.BaseSQLParser.matchKeywordTerminal(System.String,System.Boolean)">
            Matches any keywork terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchWhiteSpaceOrComment">
            Matches a white_space terminal.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.matchAlmostAnyTokens(System.Int32[])">
             Matches all tokens up to a TOKEN_END_OF_SQL or any TOKEN_SPECIAL_CHAR
             whose value is identified in the specified exceptList.
            
             @return returns true if one or more tokens were matched; false,
             otherwise.
        </member>
        <member name="M:DDInt.Parser.BaseSQLParser.getEscapeTranslationNeeded(System.Int32)">
            Indirection to the escape translator in case one was not provided.
        </member>
        <member name="T:DDInt.Parser.BaseSQLPredicateParamProcessor">
            Extracts parameter metadata identifying information for all predicates
            
            Algorithm :
            
            - Make a pass through the tree gathering all param nodes
            
            - For each parameter node, search back up the tree towards the root 
            looking for nearest predicate ancestor if any - adding such predicates 
            to a list
            
            - For each predicate node, identify the part of the predicate that can 
            be used to describe the parameters contained in the predicate.   Each
            predicate type has specific logic/code for determing this.
            
            - Parameter metadata descriptions can be in two forms.  It can be a 
            sub query which produces a single value.  Or it can be "anything else".
            If its a sub query, then the sub query minus anything past the 'where'
            clause describes the parameter.  If it's not a sub query, then the 
            "anything else" is used as column description in a secondary select
            statement built from the parts of the enclosing select statement.
            
            If its a sub query, construct a new "where 0=1" select statement out
            of the sub query.
            
            If its "anything else" construct select statement the enclosing select
            as the basis, with the "anything else" part as the column definition.
            Again with a "where 0=1" clause. 
        </member>
        <member name="M:DDInt.Parser.BaseSQLPredicateParamProcessor.visit(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            If an escape node is visited, then translate and replace the escape
            sub-tree.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner">
            Tokenizes SQL.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.sql">
            SQL being tokenized.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.stringLiteralDelimitor">
            Literal delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.delimitedIdentifierDelimitorsBegin">
            Delimited Identifier Delimitor.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentState">
            State object that will process the next char.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.scanPosition">
            Current scan index in the SQL string.
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.nextToken">
            Token being built
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.cachedToken">
            Cached token always return from getToken method
        </member>
        <member name="F:DDInt.Parser.BaseSQLScanner.currentTokenValue">
            Current token being built.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setup(System.String,System.Char,System.Char,DDInt.Parser.SQLDialect)">
             Sets up for use.
            
             @param SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getSQL">
             Returns the original SQL.
            
             @returns SQL
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.getNextToken">
             Returns the next token in the SQL.
            
             @return BaseSQLToken
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setNextState(System.Int32)">
             Transition to another state.
            
             @param state - state constant
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidFirstCharForIdentifierOrKeyword(DDInt.Parser.SQLDialect,System.Int32)">
             Returns true if the character is a valid first char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidCharForIdentifierOrKeyword(System.Int32)">
             Returns true if the character is a valid (middle or end) char for an identifier
             or keyword.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isWhiteSpace(System.Int32)">
             Returns true if the character is white space
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isNonCommentRelatedSpecialCharacter(System.Int32)">
             Returns true if the character is a special character not already
             part of other token semantics.
            
             @param char - character to test
             @returns bool - true if so, otherwise false.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.setEndOfToken(System.Int32)">
            Signals that a token has been found and sets its type.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.isValidNativeParameterToken(DDInt.Parser.BaseSQLScanner)">
            This method checks to see if the currently tokenized value violates
            any native parameter name rules.
        </member>
        <member name="T:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState">
            Base class that represents a scanner state.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStartState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCompareOpState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeCOrCPPCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfCCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeSQLCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerRestOfLineCommentState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerIDOrKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfDelimitedIDState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeEndOfStringLiteralState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerUnknownState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLWhiteSpaceState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.initialize">
            Called when transitioning to 'this' state
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLBuildingWrapperKeywordState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLAddingWrapperContentsState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerMaybeColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerColonParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="M:DDInt.Parser.BaseSQLScanner.BaseSQLScannerAtParamState.processNextChar(DDInt.Parser.BaseSQLScanner)">
             Processes a character.
            
             May eat the character, add it to the current token,
             and/or cause a state transition.
            
             @param nextChar - (obvious)
             @param scanner - used to add to current token, and/or cause a transition.
        </member>
        <member name="T:DDInt.Parser.BaseSQLStringGenerator">
            <summary>
            Summary description for BaseSQLStringGenerator.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.findVerbOnly">
            If true then the generator quits after the verb is found.
            If a "create" statement is found then both "create" and the next
            word is returned, otherwise just the first word is returned.
        </member>
        <member name="F:DDInt.Parser.BaseSQLStringGenerator.whereZeroEqualOne">
            If true then the generator generates "where 0 = 1" for 
            "where" clauses
        </member>
        <member name="T:DDInt.Parser.BaseSQLToken">
            <summary>
            Summary description for BaseSQLToken.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_value">
            Token string value.
        </member>
        <member name="F:DDInt.Parser.BaseSQLToken.m_type">
            One of the BaseSQLScanner.TOKEN_ constants.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNode">
            <summary>
            Summary description for BaseSQLTreeNode.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ROOT">
            sub-tree contains escape, with possibly nested escapes
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIME_ESCAPE">
            sub-tree contains time escape
            Example:  {t 'hh:mm:ss'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DATE_ESCAPE">
            sub-tree contains time escape
            Example:  {d 'yyyy-mm-dd'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TIMESTAMP_ESCAPE">
            sub-tree contains time escape
            Example:  {ts 'yyyy-mm-dd hh:mm:ss.ffffff'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FUNCTION_ESCAPE">
            sub-tree contains time escape
            Example:  {fn abs(x)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_OUTER_JOIN_ESCAPE">
            sub-tree contains outer join escape
            Example:  {oj tab1 LEFT OUTER JOIN tab2 ON cond}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_PROCEDURE_ESCAPE">
            sub-tree contains call procedure escape
            Example:  {call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CALL_FUNCTION_ESCAPE">
            sub-tree contains call function escape
            Example:  {? = call EMPS_IN_DEPT (parm1, parm2)}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_ESCAPE">
            sub-tree contains escape escape
            {escape 'c'}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_EXTENSION_ESCAPE">
            sub-tree contains extension escape
            {ext RowSetSize 5}
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ROOT">
            root node of the entire tree
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_ROOT">
            sub-tree contains a statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SELECT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_INSERT_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UPDATE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN_STATEMENT">
            sub-tree contains an unknown statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PAREN_ROOT">
            sub-tree contains contents of ( )
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FROM_CLAUSE">
            sub-tree contains the from clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHERE_CLAUSE">
            sub-tree contains the where clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_GROUPBY_CLAUSE">
            sub-tree contains the group by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SETOP_ROOT">
            sub-tree contains a set operation
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ORDERBY_CLAUSE">
            sub-tree contains the order by clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_HAVING_CLAUSE">
            sub-tree contains the having clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIST_PART">
            sub-tree contains part of a comma separated list
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_STATEMENT_SEPARATOR">
            sub-tree contains a statement separator.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_UNKNOWN">
            node has no special semantic meaning
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ANSI_PARAM">
            node contains a parameter marker
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMA">
            node contains a comma
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_WHITESPACE">
            node contains whitespace
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMMENT">
            node contains a comment
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_QUERY_EXP">
            sub-tree contains a query expression
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_TABLE_REFERENCE">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_ESCAPE_PARAMETER">
            sub-tree contains table reference
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LEFT_OUTER_JOIN_OP">
            sub-tree contains left outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_RIGHT_OUTER_JOIN_OP">
            sub-tree contains right outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FULL_OUTER_JOIN_OP">
            sub-tree contains full outer join escape
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_SEARCH_CONDITION">
            sub-tree contains outer join escape search condition
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_CREATE_TABLE_STATEMENT">
            sub-tree contains a create statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_FOR_CLAUSE">
            sub-tree contains a for clause
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_ROOT">
            sub-tree contains a predicate
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_PREDICATE_TYPE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COMPARISON_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_BETWEEN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_IN_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_LIKE_PREDICATE_ROOT">
            sub-tree contains a predicate type
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_VALUE_EXPRESSION_ROOT">
            sub-tree contains a row value constructor
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_DELETE_STATEMENT">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_AT_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.NODE_COLON_PARAM">
            sub-tree contains a select statement
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_type">
            One of the type constants defined by this class
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_value">
            Value of the node 
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_parent">
            Parent
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_rightSibling">
            Sibling to the right
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeNode.m_leftMostChild">
            Left-most child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.#ctor(System.Int32,System.String)">
            Constructor.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setParent(DDInt.Parser.BaseSQLTreeNode)">
            Sets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getParent">
            Gets the parent.
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.setNextChild(DDInt.Parser.BaseSQLTreeNode)">
            Set next child
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNode.getPrevious">
            Returns the left sibling, or the parent if there is no left sibling.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeNodeSearch">
            <summary>
            Summary description for BaseSQLTreeNodeSearch.
            </summary>
        </member>
        <member name="M:DDInt.Parser.BaseSQLTreeNodeSearch.search(DDInt.Parser.BaseSQLTreeNode,System.Int32)">
            objects in the FROM specification
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreeTraverser">
            <summary>
            Summary description for BaseSQLTreeTraverser.
            </summary>
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.level">
            Current tree level.
        </member>
        <member name="F:DDInt.Parser.BaseSQLTreeTraverser.visitor">
            Callback for visit action.
        </member>
        <member name="T:DDInt.Parser.BaseSQLTreePreOrderTraverser">
            <summary>
            Summary description for BaseSQLTreePreOrderTraverser.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseBulkCopyOptions">
            <summary>
            Bitwise flag that specifies one or more options to use with an instance of SybaseBulkCopy.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseBulkCopy">
            <summary> Lets you efficiently bulk load a SQL Server table with data from another source.
            </summary>
            
            <remarks> Microsoft SQL Server includes a popular command-prompt utility named bcp for
            moving data from one table to another, whether on a single server or between servers. The
            SybaseBulkCopy class lets you write managed code solutions that provide similar functionality.
            There are other ways to load data into a SQL Server table (INSERT statements, for example),
            but SybaseBulkCopy offers a significant performance advantage over them.
            
            <para>The SybaseBulkCopy class can be used to write data only to SQL Server tables. However, the
            data source is not limited to SQL Server; any data source can be used, as long as the data
            can be loaded to a DataTable instance or read with a IDataReader instance.
            </para>
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.#ctor(DDTek.Sybase.SybaseConnection)">
            <summary> Initializes a new instance of the SybaseBulkCopy class using the specified
            open instance of SybaseConnection. 
            </summary>
            
            <param name="connection"> The already open SybaseConnection instance that will be used
            to perform the bulk copy operation.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.#ctor(DDTek.Sybase.SybaseConnection,DDTek.Sybase.SybaseBulkCopyOptions)">
            <summary> Initializes a new instance of the SybaseBulkCopy class using the supplied
            existing open instance of SybaseConnection. The SybaseBulkCopy instance behaves according
            to options supplied in the copyOptions parameter.
            </summary>
            
            <param name="connection"> The already open SybaseConnection instance that will be used
            to perform the bulk copy operation.
            </param>
            
            <param name="copyOptions"> A combination of values from the SybaseBulkCopyOptions
            enumeration that determines which data source rows are copied to the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.#ctor(System.String)">
            <summary> Initializes and opens a new instance of SybaseConnection based on the
            supplied connectionString. The constructor uses the SybaseConnection to initialize
            a new instance of the SybaseBulkCopy class.
            </summary>
            
            <param name="connectionString"> The string defining the connection that will be opened
            for use by the SybaseBulkCopy instance.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.#ctor(System.String,DDTek.Sybase.SybaseBulkCopyOptions)">
            <summary> Initializes and opens a new instance of SybaseConnection based on the
            supplied connectionString. The constructor uses that SybaseConnection to initialize
            a new instance of the SybaseBulkCopy class. The SybaseConnection instance behaves
            according to options supplied in the copyOptions parameter.
            </summary>
            
            <param name="connectionString"> The string defining the connection that will be opened
            for use by the SybaseBulkCopy instance.
            </param>
            
            <param name="copyOptions"> A combination of values from the SybaseBulkCopyOptions
            enumeration that determines which data source rows are copied to the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.Dispose(System.Boolean)">
            <summary> Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            
            <param name="disposing"> true to release both managed and unmanaged resources; false to
            release only unmanaged resources.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.Close">
            <summary> Closes the SybaseBulkCopy instance.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.WriteToServer(System.Data.IDataReader)">
            <summary> Copies all rows in the supplied IDataReader to a destination table specified
            by the DestinationTableName property of the SybaseBulkCopy object.
            </summary>
            
            <param name="reader"> A IDataReader whose rows will be copied to the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.WriteToServer(System.Data.DataRow[])">
            <summary> Copies all rows from the supplied DataRow array to a destination table
            specified by the DestinationTableName property of the SybaseBulkCopy object.
            </summary>
            
            <param name="rows"> An array of DataRow objects that will be copied to the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.WriteToServer(System.Data.DataTable)">
            <summary> Copies all rows in the supplied DataTable to a destination table specified
            by the DestinationTableName property of the SybaseBulkCopy object.
            </summary>
            
            <param name="table"> A DataTable whose rows will be copied to the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)">
            <summary> Copies only rows that match the supplied row state in the supplied DataTable
            to a destination table specified by the DestinationTableName property of the
            SybaseBulkCopy object.
            </summary>
            
            <param name="table"> A DataTable whose rows will be copied to the destination table.
            </param>
            
            <param name="rowState"> A value from the DataRowState enumeration. Only rows matching
            the row state are copied to the destination.
            </param>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopy.BatchSize">
            <summary> Number of rows in each batch. At the end of each batch, the rows in the batch
            are sent to the server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopy.BulkCopyTimeout">
            <summary> Number of seconds for the operation to complete before it times out. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopy.ColumnMappings">
             <summary> Returns a collection of SybaseBulkCopyColumnMapping items. Column
             mappings define the relationships between columns in the data source and columns
             in the destination.
             </summary>
             
             <remarks> If the data source and the destination table have the same number of
             columns, and the ordinal position of each source column within the data source matches
             the ordinal position of the corresponding destination column, the ColumnMappings
             collection is unnecessary. However, if the column counts differ, or the ordinal positions
             are not consistent, you must use ColumnMappings to make sure that data is copied into
             the correct columns.
            
             <para> During the execution of a bulk copy operation, this collection can be accessed,
             but it cannot be changed. Any attempt to change it will throw an InvalidOperationException.
             </para>
             </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopy.DestinationTableName">
            <summary> Name of the destination table on the server. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopy.NotifyAfter">
            <summary> Defines the number of rows to be processed before generating a notification
            event.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseBulkCopyColumnMapping">
            <summary> Defines the mapping between a column in a SybaseBulkCopy instance's data source
            and a column in the instance's destination table.
            </summary>
            
            <remarks> Column mappings define the mapping between data source and the target table.
            
            <para> If mappings are not defined—that is, the ColumnMappings collection is empty—the
            columns are mapped implicitly based on ordinal position. For this to work, source
            and target schemas must match. If they do not, an InvalidOperationException is thrown.
            </para>
            
            <para> If the ColumnMappings collection is not empty, not every column present in the data
            source has to be specified. Those not mapped by the collection are ignored.
            </para>
            
            <para> You can refer to source and target columns by either name or ordinal. You can mix
            by-name and by-ordinal column references in the same mappings collection.
            </para>
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMapping.#ctor">
            <summary> Default constructor that initializes a new SybaseBulkCopyColumnMapping
            object.
            </summary>
            
            <remarks> If you use this constructor, you must then define the source for the mapping
            using the SourceColumn property or the SourceOrdinal property, and define the destination
            for the mapping using the DestinationColumn property or the DestinationOrdinal property.
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new column mapping, using column ordinals to refer to source and
            destination columns.
            </summary>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data
            source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMapping.#ctor(System.Int32,System.String)">
            <summary> Creates a new column mapping, using a column ordinal to refer to the source
            column and a column name for the target column.
            </summary>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data
            source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination
            table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMapping.#ctor(System.String,System.Int32)">
            <summary> Creates a new column mapping, using a column name to refer to the source column
            and a column ordinal for the target column.
            </summary>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMapping.#ctor(System.String,System.String)">
            <summary> Creates a new column mapping, using column names to refer to source and
            destination columns.
            </summary>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the
            destination table.
            </param>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopyColumnMapping.DestinationColumn">
            <summary> Name of the column being mapped in the destination database table.
            </summary>
            
            <remarks> The DestinationColumn and DestinationOrdinal properties are mutually
            exclusive. The last value set takes precedence.
            </remarks>
            
            <returns> The string value of the DestinationColumn property.
            </returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopyColumnMapping.DestinationOrdinal">
            <summary> Ordinal value of the destination column within the destination table.
            </summary>
            
            <remarks> The DestinationColumn and DestinationOrdinal properties are mutually
            exclusive. The last value set takes precedence.
            </remarks>
            
            <returns> The integer value of the DestinationOrdinal property, or -1 if the
            property has not been set.
            </returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopyColumnMapping.SourceColumn">
            <summary> Name of the column being mapped in the data source.
            </summary>
            
            <remarks> The SourceColumn and SourceOrdinal properties are mutually
            exclusive. The last value set takes precedence
            </remarks>
            
            <returns> The string value of the SourceColumn property.
            </returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopyColumnMapping.SourceOrdinal">
            <summary> The ordinal position of the source column within the data source.
            </summary>
            
            <remarks> The SourceColumn and SourceOrdinal properties are mutually
            exclusive. The last value set takes precedence
            </remarks>
            
            <returns> The integer value of the SourceOrdinal property.
            </returns>
        </member>
        <member name="T:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection">
            <summary> Collection of SybaseBulkCopyColumnMapping objects that inherits from CollectionBase.
            </summary>
            
            <remarks> Column mappings define the mapping between data source and the target table.
            
            <para>If mappings are not defined—that is, the ColumnMappings collection is empty—the
            columns are mapped implicitly based on ordinal position. For this to work, source
            and target schemas must match. If they do not, an InvalidOperationException is thrown.
            </para>
            
            <para>If the ColumnMappings collection is not empty, not every column present in the data
            source has to be specified. Those not mapped by the collection are ignored.
            </para>
            
            <para>You can refer to source and target columns by either name or ordinal. You can mix
            by-name and by-ordinal column references in the same mappings collection.
            </para>
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Add(DDTek.Sybase.SybaseBulkCopyColumnMapping)">
            <summary> Adds the specified mapping to the SybaseBulkCopyColumnMappingCollection.
            </summary>
            
            <param name="bulkCopyColumnMapping">
            The SybaseBulkCopyColumnMapping object that describes the mapping to be added to the
            collection.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Add(System.Int32,System.Int32)">
            <summary> Creates a new SybaseBulkCopyColumnMapping and adds it to the collection,
            using ordinals to specify both source and destination columns.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within the
            destination table.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Add(System.Int32,System.String)">
            <summary> Creates a new SybaseBulkCopyColumnMapping and adds it to the collection,
            using an ordinal for the source column and a string for the destination column.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceOrdinal"> The ordinal position of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination table.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Add(System.String,System.Int32)">
            <summary> Creates a new SybaseBulkCopyColumnMapping and adds it to the collection,
            using a column name to describe the source column and an ordinal to specify the
            destination column.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationOrdinal"> The ordinal position of the destination column within
            the destination table.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Add(System.String,System.String)">
            <summary> Creates a new SybaseBulkCopyColumnMapping and adds it to the collection,
            using column names to specify both source and destination columns.
            </summary>
            
            <remarks> Mappings in a collection must be uniform: either all integer/integer pairs, all
            string/string pairs, all integer/string pairs, or all string/integer pairs. If you try to
            add a mapping that is different from others already in the collection, an
            InvalidOperationException is thrown.
            </remarks>
            
            <param name="sourceColumn"> The name of the source column within the data source.
            </param>
            
            <param name="destinationColumn"> The name of the destination column within the destination
            table.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Clear">
            <summary> Clears the contents of the collection.
            </summary>
            
            <remarks> The Clear method is most commonly used when you use a single SybaseBulkCopy 
            instance to process more than one bulk copy operation. If you create column mappings 
            for one bulk copy operation, you must clear the SybaseBulkCopyColumnMappingCollection 
            after the WriteToServer method and before processing the next bulk copy.
            
            <para> Performing several bulk copies using the same SybaseBulkCopy instance will usually
            be more efficient from a performance point of view than using a separate SybaseBulkCopy
            for each operation.
            </para>
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Contains(DDTek.Sybase.SybaseBulkCopyColumnMapping)">
            <summary> Gets a value indicating whether a specified SybaseBulkCopyColumnMapping
            object exists in the collection.
            </summary>
            
            <param name="value"> A valid SybaseBulkCopyColumnMapping object.
            </param>
            
            <returns> true if the specified mapping exists in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.CopyTo(DDTek.Sybase.SybaseBulkCopyColumnMapping[],System.Int32)">
            <summary> Copies the elements of the SybaseBulkCopyColumnMappingCollection to an
            array of SybaseBulkCopyColumnMapping items, starting at a particular index.
            </summary>
            
            <param name="array"> The one-dimensional SybaseBulkCopyColumnMapping array that is
            the destination of the elements copied from SybaseBulkCopyColumnMappingCollection.
            The array must have zero-based indexing. 
            </param>
            
            <param name="index"> The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.IndexOf(DDTek.Sybase.SybaseBulkCopyColumnMapping)">
            <summary>Gets the index of the specified SybaseBulkCopyColumnMapping object.
            </summary>
            
            <param name="value"> The SybaseBulkCopyColumnMapping object for which to search.
            </param>
            
            <returns> The zero-based index of the column mapping, or -1 if the column mapping
            is not found in the collection.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Insert(System.Int32,DDTek.Sybase.SybaseBulkCopyColumnMapping)">
            <summary> Insert a new SybaseBulkCopyColumnMapping at the index specified.
            </summary>
            
            <param name="index"> Integer value of the location within the SybaseBulkCopyColumnMappingCollection
            at which to insert the new SybaseBulkCopyColumnMapping.
            </param>
            
            <param name="value"> SybaseBulkCopyColumnMapping object to be inserted in the collection.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Remove(DDTek.Sybase.SybaseBulkCopyColumnMapping)">
            <summary> Removes the specified SybaseBulkCopyColumnMapping element from the
            SybaseBulkCopyColumnMappingCollection.
            </summary>
            
            <param name="value"> SybaseBulkCopyColumnMapping object to be removed from the
            collection.
            </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.RemoveAt(System.Int32)">
             <summary> Removes the mapping at the specified index from the collection.
             </summary>
             
             <remarks> The RemoveAt method is most commonly used when you use a single
             SybaseBulkCopy instance to process more than one bulk copy operation. If you
             create column mappings for one bulk copy operation, you must remove mappings
             that no longer apply after the WriteToServer method is called and before 
             defining mapping for the next bulk copy. You can clear the entire collection 
             by using the Clear method, or remove mappings individually using the Remove 
             method or the RemoveAt method.
            
             <para> Performing several bulk copies using the same SybaseBulkCopy instance
             will usually be more efficient from a performance point of view than using 
             a separate SybaseBulkCopy for each operation.
             </para>
             </remarks>
             
             <param name="index"> The zero-based index of the SybaseBulkCopyColumnMapping
             object to be removed from the collection.
             </param>
        </member>
        <member name="P:DDTek.Sybase.SybaseBulkCopyColumnMappingCollection.Item(System.Int32)">
            <summary> Gets the SybaseBulkCopyColumnMapping object at the specified index.
            </summary>
            
            <param name="index"> The zero-based index of the SybaseBulkCopyColumnMapping
            to find.
            </param>
            
            <returns> A SybaseBulkCopyColumnMapping object.
            </returns>
        </member>
        <member name="T:DDTek.Sybase.SybaseColumn">
            <summary>
            Summary description for SybaseColumn.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSData">
            <summary>
            Summary description for SybaseTDSData.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSData.parToTds(DDTek.Sybase.SybaseParameter)">
            <summary>
            This method is used to fill in all the necessary TDS data for parameters,
            which are to be sent to server.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSData.tdsToPar(DDTek.Sybase.SybaseParameter)">
            <summary>
            This method is used to extract output parameter m_value from the 
            corresponding TDS data
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetDecimal">
            <summary>
            Returns the column value as a decimal.  Provider can override
            to allow returning columns other numeric columns as decimal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetDouble">
            <summary>
            Returns the column value as a double.  Provider can override
            to allow returning columns other numeric columns as double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetFloat">
            <summary>
            Returns the column value as a float.  Provider can override
            to allow returning columns other numeric columns as float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetInt64">
            <summary>
            Returns the column value as a long.  Provider can override
            to allow returning columns other numeric columns as long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetInt32">
            <summary>
            Returns the column value as a int.  Provider can override
            to allow returning columns other numeric columns as int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseColumn.GetInt16">
            <summary>
            Returns the column value as a short.  Provider can override
            to allow returning columns other numeric columns as short.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DDTek.Sybase.SybaseColumnCollection">
            <summary>
            Summary description for SybaseColumnCollection.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseStatementCacheBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseCommand">
            <summary>
            Represents a SQL statement or stored procedure to execute 
            against a Sybase database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.#ctor">
            <summary>
            Initializes a new instance of the SybaseCommand class.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.#ctor(System.String)">
            <summary>
            Gets or sets the text command to run
            against the data source.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.#ctor(System.String,DDTek.Sybase.SybaseConnection)">
            <summary>
            Gets or sets the SybaseConnection 
            used by this instance of the SybaseCommand.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
            <param name="connection">The name of the current connection.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.#ctor(System.String,DDTek.Sybase.SybaseConnection,DDTek.Sybase.SybaseTransaction)">
            <summary>
            Gets or sets the SybaseConnection 
            used by this instance of the SybaseCommand.
            </summary>
            <param name="commandText">The SQL statement or stored procedure to execute. 
            The default value is an empty string ("").</param>
            <param name="connection">The name of the current connection.</param>
            <param name="transaction">The name of the current transaction. </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.Cancel">
            <summary>
            Attempts to cancel the execution of an 
            IDbCommand.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against 
            the SybaseConnection object, and returns the number 
            of rows affected. This method is intended for commands that do not return 
            results.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the 
            first row of the resultset that the query returns. Any additional rows 
            or columns are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.Prepare">
            <summary>
            Creates a prepared or compiled version 
            of the command on the data source.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.CreateParameter">
            <summary>
            Creates a new instance of a SybaseParameter object.
            </summary>
            <returns>A SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.ExecuteReader">
            <summary>
            Executes commands that return rows.
            </summary>
            <returns>A SybaseDataReader object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the CommandText to the Connection, and builds a SybaseDataReader 
            using one of the CommandBehavior values.
            </summary>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A SybaseDataReader object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommand.System#ICloneable#Clone">
            <summary>
            Creates a new instance of a SybaseCommand class with the same value 
            as an existing instance.
            </summary>
            <returns>A SybaseCommand object.</returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.CommandText">
            <summary>
            Gets or sets the text command to run
            against the data source.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before
            terminating the attempt to execute a command and generating an error.
            </summary>
            <remarks>We recommend that the application sets the CommandTimeout 
            property to a value that is greater than the largest default deadlock 
            detection and timeout value on the server. This ensures 
            that the application gets a more meaningful reply in case of a timeout. 
            </remarks>		
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.CommandType">
            <summary>
            Indicates or specifies how the CommandText
            property is interpreted.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.Connection">
            <summary>
            Gets or sets the SybaseConnection 
            used by this instance of the SybaseCommand.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.Parameters">
            <summary>
            Gets the SybaseParameterCollection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.ArrayBindCount">
            <summary>
            Specifies the number of rows of parameters that will be used. 
            The application must set this property before executing a 
            command that uses parameter array binding. The count must 
            equal the length of the arrays that is set for each parameter value. 
            <para>
            The default value is zero. The application does not use array binding. 
            </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.ArrayBindStatus">
            <summary>
            Returns an array of row status values. This property 
            can be used to check status after executing a command 
            that used array binding. The property's type is an 
            array of SybaseRowStatus. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.Transaction">
            <summary>
            Gets or sets the SybaseTransaction 
            within which the SybaseCommand executes.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied 
            to the DataRow, when used by the Update method of a DbDataAdapter.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.RowSetSize">
            <summary>
            Limits the number of rows returned by any query 
            on this SybaseCommand object to the value specified at execute time. When set
            to 0, the data provider does not limit the number of rows returned.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommand.FetchBufferSize">
            <summary>
            Returns the value specified for
            the Fetch Buffer Size option in the connection string. 
            Read-only.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseRowStatus">
            <summary>
            Indicates the status of each row after an array bind operation.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseRowStatus.OK">
            <summary>
            The operation succeeded. All entries are marked as OK.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseRowStatus.Failed">
            <summary>
            The operation failed. The data provider assigns this value to all status 
            entries except for the row that caused the failure.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseRowStatus.SchemaViolation">
            <summary>
            When an operation fails, the data provider assigns 
            this value to the row that caused the failure.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseCommandBuilder">
            <summary>
            Automatically generates single-table 
            commands that are used to reconcile changes made to a DataSet with 
            the associated database. A SybaseCommandBuilder object is associated with a 
            SybaseDataAdapter object.
            </summary>
            <remarks>
            Using a CommandBuilder object can have a negative effect 
            on performance. Because of concurrency restrictions, the 
            CommandBuilder can generate highly inefficient SQL statements. 
            The end-user can often write more efficient update and delete 
            statements than those that the CommandBuilder generates. 
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the SybaseCommandBuilder class.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.#ctor(DDTek.Sybase.SybaseDataAdapter)">
            <summary>
            Initializes a new instance of the SybaseCommandBuilder class.
            </summary>
            <param name="adapter">The SybaseDataAdapter object 
            associated with this SybaseCommandBuilder. </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Given an unquoted identifier, returns the correct quoted form of that identifier,
            including properly escaping any embedded QuoteSuffix values in the identifier.
            </summary>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>
            <returns>
            The quoted version of the identifier. Embedded QuoteSuffix values within the identifier are properly escaped.
            </returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier,
            including properly un-escaping any QuoteSuffix values in the identifier. 
            </summary>
            <param name="quotedIdentifier">The identifier that will have its quotes removed.</param>
            <returns>The unquoted identifier, with embedded QuoteSuffix values properly un-escaped.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Deletes on the Sybase database.
            </summary>
            <returns>The automatically generated SybaseCommand object required to 
            perform Deletes on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Deletes on the Sybase database.
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically generated SybaseCommand object required to 
            perform Deletes on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Inserts on the Sybase database
            </summary>
            <returns>The automatically generated SybaseCommand object required to 
            perform Inserts on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Inserts on the Sybase database
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically generated SybaseCommand object required to 
            perform Inserts on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Updates on the Sybase database
            </summary>
            <returns>The automatically generated SybaseCommand object required to 
            perform Updates on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Gets the automatically-generated 
            SybaseCommand object required to perform Updates on the Sybase database
            </summary>
            <param name="useColumnsForParameterNames">If true, generate parameter names matching column names if possible. If false, generate @p1, @p2, and so on.</param>
            <returns>The automatically generated SybaseCommand object required to 
            perform Updates on the Sybase database.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseCommandBuilder.DeriveParameters(DDTek.Sybase.SybaseCommand)">
            <summary>
            Populates the SybaseCommand object's
            Parameters collections with parameter information for a stored procedure
            specified in the SybaseCommand object. 
            </summary>
            <param name="command">The SybaseCommand referencing the stored 
            procedure from which the parameter information is to be derived. 
            The derived parameters are added to the Parameters collection of 
            the SybaseCommand object.</param>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.QuotePrefix">
            <summary>
            Prefix character for quoted identifiers.  This is limited to open bracket or double quote.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.QuoteSuffix">
            <summary>
            Suffix character for quoted identifiers.  This is limited to close bracket or double quote.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.CatalogLocation">
            <summary>
            Sets or gets the CatalogLocation for an instance of the DbCommandBuilder class. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.CatalogSeparator">
            <summary>
            Sets or gets a string used as the catalog separator for an instance of the DbCommandBuilder class.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.SchemaSeparator">
            <summary>
            Gets or sets the character to be used for the 
            separator between the schema identifier and any other identifiers.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.DataAdapter">
            <summary>
            Gets or sets the SybaseDataAdapter object for which 
            this SybaseCommandBuilder object will generate SQL statements.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseCommandBuilder.AllowUpdateWithoutKey">
            <summary>
            Allows UPDATE or DELETE
            operations to continue for tables that have no key. 
            These operations are normally allowed only for tables with a key.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseInfoMessageEventHandler">
            <summary>
            Passes as an input to the 
            SybaseInfoMessageEventHandler and contains information relevant to a warning
            generated by the Sybase server.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseConnection">
            <summary>
            Represents an open connection to a Sybase
            database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.#ctor">
            <summary>
            Initializes a new instance of the SybaseConnection object.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SybaseConnection object.
            </summary>
            <param name="connectionString">The Sybase connection string that includes settings, such as the server name, needed to establish the initial connection. 
            The default value is an empty string ("").</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open
            Connection object.
            </summary>
            <param name="dbName">The name of the database to use in place 
            of the current database.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.Open">
            <summary>
            Opens a database connection with the settings 
            specified by the ConnectionString property of the 
            SybaseConnection object.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.Close">
            <summary>
            Closes the connection to the database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SybaseConnection and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists in the specified transaction as a distributed transaction. This method is supported on DataDirect 
            Connect for ADO.NET data providers installed on a Server license.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.GetSchema">
            <summary>
            Returns schema information for the data source of this SybaseConnection.
            </summary>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this SybaseConnection 
            using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this SybaseConnection using 
            the specified string for the schema name and the specified string array for 
            the restriction values.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">A set of restriction values for the requested schema.</param>
            <returns>A DataTable that contains schema information.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.BeginTransaction">
            <summary>
            Begins a transaction at the Sybase database.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction at the Sybase database with the specified 
            Isolation Level.
            </summary>
            <param name="level">The transaction isolation level for this connection.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.CreateCommand">
            <summary>
            Creates and returns a 
            SybaseCommand object associated with 
            the SybaseConnection.
            </summary>
            <returns>A SybaseCommand object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.System#ICloneable#Clone">
            <summary>
            Creates a new instance of a SybaseConnection class with the same value 
            as an existing instance.
            </summary>
            <returns>A SybaseConnection object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.SetOEMLicenseInfo(System.String,System.String)">
            <summary>
            The SetOEMLicenseInfo method is for DataDirect OEM customers only.
            Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.
            </summary>
            <param name="licFileName">Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.</param>
            <param name="licFilePassword">Refer to the <em>DataDirect Connect for ADO.NET Distribution Guide</em>.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.ClearAllPools">
            <summary>
            Empties the connection pool.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnection.ClearPool(DDTek.Sybase.SybaseConnection)">
            <summary>
            Empties the connection pool associated with the specified connection.
            </summary>
            <param name="connection">The SybaseConnection to be cleared from the pool.</param>
            <remarks>The ClearPool method clears the connection pool that is associated with 
            connection. If additional connections associated with the connection pool are 
            in use at the time of the call, they are discarded when Close is called on them.
            </remarks>
        </member>
        <member name="E:DDTek.Sybase.SybaseConnection.InfoMessage">
            <summary>
            Provides data for theInfoMessage event.
            This event handler receives an argument of type SybaseInfoMessageEventArgs
            containing data relevant to this event. Clients that want to process 
            warnings and informational messages sent by the database server should
            create a SybaseInfoMessageEventHandler delegate to listen to this event.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ConnectionString">
            <summary>
            Gets or sets 
            the string used to open a database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ConnectionTimeout">
             <summary>
             Returns the value specified for the Connection Timeout connection 
             string option. Read-only. 
             </summary>
             <remarks>
             If connection failover is enabled (the Alternate Servers connection 
             string option defines one or more alternate database servers), 
             this property applies to each attempt to connect to an alternate 
             server. If connection retry is also enabled (the Connection Retry Count 
             connection string option is set to an integer greater than 1), 
             the ConnectionTimeout property applies to each retry attempt.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.Database">
            <summary>
            Gets the name of the current database 
            or the database that will be used when a connection is open.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ServerVersion">
            <summary>
            Returns a string that contains the version of the Sybase server
            to which this object is currently connected. If the
            SybaseConnection object is not connected, the data provider
            returns an Invalid Operation exception.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.Port">
            <summary>
            Returns the value specified for the 
            Port connection string option. Read-only.
            </summary>
            <remarks>
            The data provider predicts which port will be used 
            for the connection, based on information in the 
            connection string. If a change occurs during 
            connection, for example, an alternate server is 
            used, the Port property reports the actual Port 
            to which the data provider is connected.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.Host">
            <summary>
            Returns the value specified for the Host 
            connection string option. Read-only.
            </summary>
            <remarks>
            The data provider predicts which host will be used 
            for the connection, based on information in the connection 
            string. If a change occurs during connection, 
            for example, an alternate server is used, the Host property 
            reports the actual host to which the data provider is connected.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.DatabaseName">
            <summary>
             Gets the name of the current database or the database that 
             will be used when a connection is open.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.PacketSize">
            <summary>
            Returns the value specified for
            the Packet Size connection string option.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.SelectMethod">
            <summary>
            Returns the value specified for
            the Select Method connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.FetchBufferSize">
            <summary>
            Returns the value specified for
            the Fetch Buffer Size connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.CloneConnectionIfNeeded">
            <summary>
            Returns the value 
            specified for the Clone Connection If Needed 
            connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.EnableQuotedIdentifiers">
            <summary>
            Returns the value 
            specified for the Enable Quoted Identifiers 
            connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.TextSize">
            <summary>
            Returns the value specified for
            the Text Size connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ProgramID">
            <summary>
            Returns the value specified for
            the Program ID connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.WorkstationID">
            <summary>
            Returns the value specified for
            the Workstation ID connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ClientHostName">
            <summary>
            Returns the value specified for
            the Client Host Name connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ApplicationName">
            <summary>
            Returns the value specified for
            the Application Name connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.InterfacesFile">
            <summary>
            Specifies the path name or the URL of the Interfaces file. 
            <para>
            NOTE: If you do not specify a value for this property, 
            but specify a value for the Server Name connection string option, the data 
            provider looks for the path name of the Interfaces file in the 
            Registry under HKEY_LOCAL_MACHINE\SOFTWARE\DataDirect\InterfacesFile. 
            If this Registry value is empty, then the data provider attempts 
            to open the SQL.INI file found in the same directory as the data provider and use it as the Interfaces file.
            </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.DataSource">
            <summary>
            Gets the name of the instance of Sybase to which to connect.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.ServerName">
            <summary>
            Returns the value specified for the Server Name connection string option. Read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnection.DatabaseCharacterSetName">
            <summary>
            Set by the data provider on connection with the IANA name for the
            database character set in the database to which the data provider	
            has connected. Read-only.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionOptions.GetServerAddressFromInterfacesFile">
            <summary>
            Process Sybase interface file to get server address
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseConnectionStringBuilder">
            <summary>
            Provides a way to create and manage the contents of connection strings used by the SybaseConnection class.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the SybaseConnectionStringBuilder instance.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether an element in the 
            SybaseConnectionStringBuilder contains a specific key.
            </summary>
            <param name="keyword">The key to locate in the ConnectionStringBuilder.</param>
            <returns>true if the SybaseConnectionStringBuilder contains an element 
            that has the specified key; otherwise, false.</returns>
            <remarks>The SybaseConnectionStringBuilder contains a fixed-size collection of key/value pairs. This means that the ContainsKey method only determines whether a particular key name is valid.
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the 
            SybaseConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed from the 
            connection string in this SybaseConnectionStringBuilder instance.</param>
            <returns>true if the key existed within the connection string and was removed, false if the key did not exist.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this 
            SybaseConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The keyword to locate in the SybaseConnectionStringBuilder.</param>
            <returns>true if the SybaseConnectionStringBuilder contains an element that has the 
            specified key; otherwise, false.</returns>
            ///<remarks>The SybaseConnectionStringBuilder contains a fixed-size collection of key/value pairs. This means that the ShouldSerialize method only 
            determines whether a particular key name is valid.
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding 
            to the supplied key from this SybaseConnectionStringBuilder.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to keyword.</param>
            <returns>true if keyword was found within the connection string; otherwise, false.</returns>
            <remarks>Calling TryGetValue with a nonexistent key places the value null 
            (or, in Visual Basic, the value Nothing) in the value parameter. </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Keys">
            <summary>
            Gets an ICollection that contains the keys in the DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.IsFixedSize">
            <summary>
            Gets a value that indicates whether the SybaseConnectionStringBuilder has a fixed size.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Values">
            <summary>
            Gets an ICollection that contains the values in the SybaseConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.AlternateServers">
            <summary>
            Specifies a list of alternate database servers to which the 
            data provider will try to connect if the primary database server is unavailable. Specifying a value for this property enables connection failover for the data provider.
            </summary>
            <remarks>The value you specify must be in the form of a string that defines connection information for each alternate server. For the Sybase data provider, you must specify the port number and the name or the IP address of each alternate server. 
            <para>The string has the format:</para>
            <para><code>(Host=<i>hostvalue</i>;Port=<i>portvalue</i>[;...])</code></para>
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ApplicationName">
            <summary>
            Specifies the name that the Sybase server uses to identify the client application. 
            <para>The initial default is NULL. </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.AuthenticationMethod">
            <summary>
            Specifies the Authentication method to be used when connecting to the data source.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.BatchUpdateParameterLimit">
            <summary>
            Specifies the upper limit of parameters that may be contained in a set update with a batch update.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ClientHostName">
            <summary>
            This option can be used to set the clienthostname and hostname column values in the sysprocesses table.  
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.CloneConnectionIfNeeded">
            <summary>
            Specifies whether the data provider clones the existing connection 
            if another active result set is not currently possible on the 
            existing Sybase connection and the application requires one. 
            Note that using multiple active result sets can degrade performance. 
            Use multiple active result sets only if your application requires them.
            <para>When set to false (the initial default), the data provider does not clone the connection.</para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.CommonWorkArounds">
            <summary>
            This property is reserved. Enter values only when directed by DataDirect technical support.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ConnectionPoolBehavior">
            <summary>
            Specifies the connection pool algorithm used. When set to Fifo, the pooling mechanism ensures
            equitable usage of connections across the pool, and is the recommended behavior for applications
            with heavy load. When set to Lifo, the  pooling mechanism enforces a discriminatory usage of
            connections across the pool by always using the most recently returned connection. This option
            is best employed for applications that wish to establish long term affinity with database connections.
            The value is ignored when Reauthentication Enabled=True.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ConnectionReset">
            <summary>
            Specifies whether a connection that is removed from the 
            connection pool for reuse by an application will have its state 
            reset to the initial configuration settings of the connection. 
            <remarks>Resetting the state impacts performance because the new connection must issue additional commands to the server, for example, resetting the 
            current database to the value specified at connect time. </remarks>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ConnectionRetryCount">
            <summary>
            Specifies the number of times the data provider tries to 
            connect to the primary server, and, if specified, the alternate servers after the initial unsuccessful attempt. 
            <para>The value can be any integer from 0 to 65535. </para>
            <para>When set to 0 (the initial default), the data provider does not try to reconnect after the initial unsuccessful attempt.</para>
            </summary>
            <remarks>If a connection is not established during the retry attempts, the data provider returns an error that is generated by the last server to which it attempted to connect.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ConnectionRetryDelay">
            <summary>
            Specifies the number of seconds the data provider waits after the initial unsuccessful connection attempt before retrying a connection 
            to the primary server, and, if specified, the alternate servers. 
            <para>The value can be any integer value from 0 to 65535. The initial default is 3 (seconds). When set to 0, 
            there is no delay between retrying the connection. </para>
            </summary>
            <remarks>NOTE: This option has no effect unless the Connection Retry Count connection string option is set to an integer greater than 0. 
            This option and the Connection Retry Count connection string option, which specifies the number of times the data provider attempts to connect, 
            can be used in conjunction with connection failover. 
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ConnectionTimeout">
            <summary>
            Specifies the number of seconds after which the attempted connection to the Sybase server will fail if not yet connected. If connection failover is enabled, this option applies to each connection attempt. 
            <para>When set to 0, the data provider never times out on a connection attempt. 
            The initial default is 30 seconds. </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.DatabaseName">
            <summary>
            Specifies the name of the database to which you want to connect. If you do not specify a value, the default is the database defined by the system administrator for each user. 
            Database Name is an alias for the Database connection string option.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.EnableQuotedIdentifiers">
            <summary>
            Specifies whether the connection supports quoted identifiers.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.EnableTrace">
            <summary>
            Specifies whether tracing is enabled. The initial default is False.
            </summary>
            <remarks>During debugging, sensitive data can be read, even if it is stored as a private or internal variable, and access is limited to the same assembly. To maintain security, trace logs show passwords as five asterisks (*****). 
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.EncryptionMethod">
            <summary>
            Defines how the provider encrypts data between the provider and the data source.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Enlist">
            <summary>
            Specifies whether the data provider automatically 
            attempts to enlist the connection in creating the thread’s current transaction context. 
            This option is enabled only when the data provider is installed with a Server license and the optional MS DTC Support components were selected. 
            <para>When set to false (the initial default), the data provider 
            does not automatically attempt to enlist the connection.</para>
            </summary>
            <remarks>Enlisting in distributed transactions requires the data provider to call unmanaged code.</remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.FetchBufferSize">
            <summary>
            Specifies the number of bytes of data to prefetch to the client when executing a statement that produces a result set. Fetch Buffer Size can limit the actual connection to one active result set if its value is not large enough to hold the entire result set. Having a large buffer is only useful if your application uses more than one active result set per connection, an unusual situation in the .NET programming model. 
            The value can be any integer from 1 to 2147483647. 
            <para>The initial default is 1024. </para>
            </summary>
            <remarks> 
            We recommend using the default unless your application uses more than one active result set per connection. Using a larger number can have a negative effect on performance.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.GssClient">
            <summary>
            Specifies which GSS client library the provider should use to communicate with the
            Key Distribution Center (KDC) when authentication in a MIT Kerberos environment
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Host">
             <summary>
             Specifies either the name or the IP address of the server 
             to which you want to connect. For example, if your network 
             supports named servers, you can specify a server name such as 
             <code>Sybaseserver</code>. Or, you can specify an IP address 
             such as <code>199.226.224.34</code>. 
             <para>To use a Sybase server running on the local machine, 
            specify <code>localhost</code>. </para>
             </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.HostNameInCertificate">
            <summary>
            Gets or sets a Certificate Server Name used as part of the SSL Server Certificate validation. 
            <para>The initial default is an empty string. </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.IncludeProcedureRowCount">
            <summary>
            Determines whether the data provider counts the number of rows changed, inserted, or deleted by SQL statements executed within a stored procedure.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.InitialCommandTimeout">
            <summary>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.InitializationString">
            <summary>
            Supports the execution of Sybase commands at connect time. Multiple commands must be separated by a space, for example: 
            <para><code>set ANSINULL on set Textsize 20000 </code></para>        
            <para>The initial default is an empty string.</para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.InterfacesFile">
            <summary>
            Specifies the fully-qualified path name or the URL of the Interfaces file. The Interfaces file, SQL.INI, lists the Sybase Server Name.
            </summary>
            <remarks>If you do not specify a value for this option, but specify a value for the Server Name option, the data provider looks for the 
            path name of the Interfaces file in the Registry under HKEY_LOCAL_MACHINE\SOFTWARE\DataDirect\InterfacesFile. If this Registry value is empty, then the data provider attempts to open the SQL.INI file found in the same directory as the data provider and use it as the Interfaces file.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.LicensePath">
            <summary>
            Specifies the fully-qualified path to the DDTek.lic license file. 
            The license file is installed by default in the product installation 
            directory, for example, <code>C:\install_dir\DDTek.lic</code>.
            </summary>
            <remarks>When set to an empty string (the initial default), the 
            data provider looks for the license file in the application’s 
            current directory. If the license file is not found, the data 
            provider checks for keys placed in the registry during the 
            installation process; then, the data provider looks for the 
            license key in the installation directory. If the license key 
            is still not found, the data provider fails to connect. 
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.LoadBalancing">
            <summary>
            Determines whether the data provider uses client load balancing in its attempts to connect to primary and alternate database servers. The list of alternate servers is specified by the Alternate Servers connection option. 
            <para>When set to true, the data provider attempts to connect to the database servers (primary and alternate servers) in random order.  </para>
            <para>When set to false (the initial default), client load balancing is not used and the data 
            provider connects to each server based on its sequential order (primary server first, then, 
            alternate servers in the order they are specified). </para>
            <para>NOTE: This option has no effect unless alternate servers are defined 
            for the Alternate Servers connection string option.</para>
            </summary>
            <remarks>The Load Balancing connection string option is an optional setting that 
            you can use in conjunction with connection failover.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.LoadBalanceTimeout">
            <summary>
            Specifies the minimum number of seconds to keep connections in a connection pool. The Min Pool Size property can cause some connections to ignore this value.
            </summary>
            <remarks>The value can be any integer from 0 to 65535. When set to 0 (the initial default), the connections have the maximum timeout.</remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.MaxPoolSize">
            <summary>
            Specifies the maximum number of connections within a single pool. When the maximum number is reached, no additional connections can be added to the connection pool. 
            <para>The value can be any integer from 1 to 65535. </para>
            <para>The initial default is 100. </para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.MaxStatementCacheSize">
             <summary>
             Gets or sets the maximum number of statements that can be held in the statement cache.
             Setting the cache size to 0 will disable statement caching.
             </summary>
             <remarks><para>This property corresponds to the Max Statement Cache Size connection string 
             option.</para>
             <para>The initial default is 10. </para>
             </remarks>
            
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.MinPoolSize">
            <summary>
            Specifies the minimum number of connections are opened and placed 
            in a connection pool when it is created. The connection pool retains this number of connections, even when some connections have exceeded their Connection Lifetime value. 
            <para>The value can be any integer from 0 to 65535. </para>
            <para>When set to 0 (the initial default), no additional connections are placed in the connection pool when it is created.</para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ParameterMode">
            <summary>
            Gets or sets the parameter mode,  The parameter mode controls the parameter marker format
            and the whether parameters are bound ordinally or by name.
            </summary>
            <remarks>This property corresponds to the Parameter Mode connection string option.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DDTek.Sybase.SybaseConnectionStringBuilder.PacketSize" -->
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Password">
            <summary>
            Specifies the case-sensitive password used to connect to your Sybase database. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            Specifies whether to display secure information in clear text in the ConnectionString property of the Connection object. 
            <para>When set to true, the value of the Password connection string option is displayed in clear text. </para>
            <para>When set to false (the initial default), the data provider does not display secure information in clear text.</para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Pooling">
            <summary>
            Specifies whether connections are pooled. 
            When set to true (the initial default), connection pooling is enabled. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.Port">
            <summary>
            Specifies the port of the Sybase listener. 
            <para>The initial default is 4100. </para>
            </summary>
            <remarks>
            The Port option is not required when using the Server connection string option.
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ProgramID">
            <summary>
            This option can be used to set the PROCESS column in the V$SESSION table.  
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ReaderCloseBehavior">
            <summary>
            Determines whether 
            a Cancel is sent to prevent the server from sending 
            additional rows when Close() is called and the result set has not been fully processed. 
            This value is ignored when the command is a stored procedure.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.SchemaCollectionTimeout">
            <summary>
            Gets or sets the number of seconds after which the attempted 
            schema collection operation to the Sybase server will fail if not yet completed. 
            </summary>
            <remarks>This property corresponds to the Schema Collection Timeout connection string 
            option.
            <para>When set to 0, the data provider never times out on a schema collection operation attempt. 
            The initial default is 120 seconds. </para>
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.SchemaOptions">
            <summary>
            Bit flags that can be used to control the amount of schema information returned by the GetSchema method.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.SelectMethod">
            <summary>
            Determines whether server-side database cursors are used for Select statements. 
            <para>When set to Cursor, server-side database cursors are used. 
            When set to Direct (the initial default), Select statements are run without using server-side database cursors. </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DDTek.Sybase.SybaseConnectionStringBuilder.ServerName" -->
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ServicePrincipalName">
            <summary>
            Specifies the Service Principal Name and Realm for the Sybase server for Kerberos Authentication
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ShowVSCollections">
            <summary>
            By default the provider does not expose the collections specific for Visual Studio integration.
            Turning on this option will cause the provider to return the VS collections in the list of collections.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.SocketReceiveBufferSize">
            <summary>
            Sets the socket receive buffer size.  The default (0) implies the provider should use
            pre-set optimal value.  -1 implies the provider should use the OS default.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.SocketSendBufferSize">
            <summary>
            Sets the socket send buffer size.  The default (0) implies the provider should use the
            pre-set optimal value.  -1 implies the provider should use the OS default.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.StatementCacheMode">
            <summary>
            Gets or sets the statement cache mode,  The statement cache mode controls the behavior of the statement
            cache.  Statements can be cached automatically or only cached when a command is explicitly marked.
            </summary>
            <remarks>This property corresponds to the Statement Cache Mode connection string option.</remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.TCPNoDelay">
            <summary>
            Specifies the TCP_NO_DELAY Socket property which reduces network traffic by causing the socket to
            buffer packets
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.TextSize">
            <summary>
            Specifies a value that limits the number of bytes of data that 
            can be returned from any single TEXT or IMAGE column in a result set. If the values 
            of the TEXT or IMAGE type columns in your application exceed 1 MB, increase this setting to exceed the maximum text or image value size that you expect. 
            <para>The value can be any integer from 1 to 2147483647. </para>
            <para>The initial default is 1048576.</para>
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.TightlyCoupledTransactions">
            <summary>
            Determines whether the data provider uses tightly coupled transactions; 
            multiple connections within the same distributed transaction do not obey 
            each other’s locks. Use of this property requires a Sybase database 
            version 12.0 or higher.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ThrottleCollectionsData">
            <summary>
            Gets or sets a Boolean value that specifies whether a provider returns very large
            collection meta data.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.TraceFile">
            <summary>
            Specifies the path and name of the trace file.
            The initial default is \SybaseTrace.txt. 
            If the trace file does not exist, the data provider creates it.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.UseCurrentSchema">
            <summary>
            Indicates whether the schema collections should automatically restrict using the current schema when 
            the schema restriction is omitted.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.UserID">
            <summary>
            Specifies the case-insensitive user name used 
            to connect to your Sybase database. 
            to obtain your user ID. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.ValidateServerCertificate">
            <summary>
            Specifies whether the server certificate is verified as valid 
            according to a Certificate Authority. 
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseConnectionStringBuilder.WorkstationID">
            <summary>
            Specifies the name that the Sybase data provider uses to identify the client. 
            <para>The initial default is NULL. </para>
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseCounters">
            <summary>
            Summary description for SybaseCounters.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseDataAdapter">
            <summary>
            Represents a set of data commands  
            and a connection to a Sybase database that are used to fill the 
            DataSet and update the Sybase database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.#ctor">
            <summary>
            Initializes a new instance of the SybaseDataAdapter class.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.#ctor(DDTek.Sybase.SybaseCommand)">
            <summary>
            Initializes a new instance of the SybaseDataAdapter class.
            </summary>
            <param name="selectCommand">Gets or sets a SQL statement used to select
            records in the Sybase database.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SybaseDataAdapter class.
            </summary>
            <param name="selectCommandText">Gets or sets a SQL statement used to select
            records in the Sybase database.</param>
            <param name="selectConnectionString">The connection string.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.#ctor(System.String,DDTek.Sybase.SybaseConnection)">
            <summary>
            Initializes a new instance of the SybaseDataAdapter class.
            </summary>
            <param name="selectCommandText">Gets or sets a SQL statement used to select
            records in the Sybase database.</param>
            <param name="selectConnection">The connection string.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Represents the method that will handle the RowUpdated event of a SybaseDataAdapter.
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The SybaseCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Occurs during an Update before a command is executed against the Sybase database. 
            </summary>
            <param name="dataRow">The DataRow to send through an Update.</param>
            <param name="command">The SybaseCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
            <returns></returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Represents the method that will handle the RowUpdated event of a SybaseDataAdapter.
            </summary>
            <param name="value">A System.Data.Common.RowUpdatingEventArgs object that contains the event data.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Represents the method that will handle the RowUpdated event of a SybaseDataAdapter.
            </summary>
            <param name="value">A System.Data.Common.RowUpdatedEventArgs object that contains the event data.</param>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataAdapter.SelectCommand">
            <summary>
            Gets or sets a SQL statement used to select
            records in the Sybase database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataAdapter.InsertCommand">
            <summary>
            Gets or sets a SQL statement used to
            insert new records into the Sybase database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataAdapter.UpdateCommand">
            <summary>
            Gets or sets a SQL statement used to
            update records in the Sybase database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataAdapter.DeleteCommand">
            <summary>
            Gets or sets a SQL statement for
            deleting records from the Sybase datasource.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataAdapter.UpdateBatchSize">
            <summary>
            Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.
            </summary>
        </member>
        <member name="E:DDTek.Sybase.SybaseDataAdapter.RowUpdating">
            <summary>
            Occurs during an Update before a command
            is executed against the Sybase database.
            </summary>
        </member>
        <member name="E:DDTek.Sybase.SybaseDataAdapter.RowUpdated">
            <summary>
            Occurs during an Update after a command
            is executed against the Sybase database.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseRowUpdatingEventHandler">
            <summary>
            Occurs during an Update before a command
            is executed against the Sybase database.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseRowUpdatedEventHandler">
            <summary>
            Occurs during an Update after a command
            is executed against the Sybase database.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseRowUpdatingEventArgs">
            <summary>
            Provides data for the RowUpdating event 
            of the Sybase data provider.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Occurs during an Update before a command
            is executed against the Sybase database.
            </summary>
            <param name="row">The DataRow to send through an Update.</param>
            <param name="command">A SQL statement or stored procedure to execute against a database.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping to send through the Update.</param>
        </member>
        <member name="P:DDTek.Sybase.SybaseRowUpdatingEventArgs.Command">
            <summary>
            SybaseCommand represents a SQL statement or stored procedure to execute 
            against a database.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseRowUpdatedEventArgs">
            <summary>
            Provides data for the RowUpdated event 
            of a Sybase data provider.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Provides data for the RowUpdated event 
            of the Sybase .NET data provider.
            </summary>
            <param name="row">The DataRow to send through an Update.</param>
            <param name="command">The SybaseCommand to execute when performing the Update.</param>
            <param name="statementType">The data type of the SQL statement to execute.</param>
            <param name="tableMapping">The DataTableMapping sent through the Update.</param>
        </member>
        <member name="T:DDTek.Sybase.SybaseDataReader">
            <summary>
            Allows you to retrieve a read-only stream of rows
            from a database. The SybaseDataReader does not cache data in memory, which 
            makes it a good choice when you must retrieve large amounts of data. Because  
            only one row is in memory at any given time, system overhead is reduced.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.Close">
            <summary>
            Closes the SybaseDataReader. 
            Always call the Close method when you finish using the SybaseDataReader.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.NextResult">
            <summary>
            Advances the SybaseDataReader 
            to the next result.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.Read">
            <summary>
            Advances the SybaseDataReader to the 
            next row.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the 
            column metadata of the SybaseDataReader.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetName(System.Int32)">
            <summary>
            Gets the column name of the specified
            column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The name of the column.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source
            data type.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The name of the source data type.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type 
            of the object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetValue(System.Int32)">
            <summary>
            Gets value of a column at a specified 
            ordinal, returning the value in the column's native format.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value to return.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetValues(System.Object[])">
            <summary>
            Gets all of the attribute columns in the 
            current row.
            </summary>
            <param name="values">An array of type Object into which to copy the 
            attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal when given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>A Boolean that is the value of the column.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a
            byte.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a byte.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified
            column offset into the buffer as an array. It starts at the given buffer
            offset.
            </summary>
            <param name="i">The index within the field where the read operation is to begin.</param>
            <param name="fieldOffset">The index 
            within the field where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to read the 
            stream of bytes.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a character.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a character.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters into
            the buffer as an array, starting from the specified buffer offset of the
            specified column offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the row 
            where the read operation is to begin.</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferOffset">The index where buffer 
            is to begin the write operation.</param>
            <param name="length">The number of characters to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a GUID (globally-unique identifier).
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a GUID.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified 
            column as a 16-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 16-bit signed integer.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column
            as a 32-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 32-bit signed integer.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of a specified column
            as a 64-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 64-bit signed integer.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a single-precision, floating-point number.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a single-precision 
            floating-point number.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of a specified column as a double-precision
            floating-point number.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 
            double-precision floating-point number.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a string.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a string.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of a specified column as a Decimal object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a decimal 
            object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of a specified 
            column as a DateTime object.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the specified column as a 
            DateTime object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>true if the specified column value is equivalent to DBNull; otherwise, false.</returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataReader.Depth">
            <summary>
            Gets a value that shows how deeply 
            the current row is nested.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataReader.IsClosed">
            <summary>
            Indicates whether the SybaseDataReader 
            is closed.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataReader.RecordsAffected">
            <summary>
            Gets the number of rows 
            changed, inserted, or deleted by executing a SQL statement.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataReader.HasRows">
            <summary>
            Indicates whether there are more
            rows yet to read.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseDataReader.FieldCount">
            <summary>
            Gets the number of columns in the 
            current row.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseDbType">
            <summary>
            Gets or sets the System.Data.DbType of the parameter.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Binary">
            <summary>
            Fixed-length stream of binary data. 
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Bit">
            <summary>
            Unsigned numeric value that can be 0, 1, or a null reference. 
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Char">
            <summary>
            Fixed-length data in singlebyte or multibyte character set.
            If specified as char(N), N cannot exceed @@maxpagesize. (12.0- max=255).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Date">
            <summary>
            Date value which contains year, month and day.
            Only supported by ASE 12.5.1 and higher servers.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.DateTime">
            <summary>
            Date and time value, with accuracy of
            3.33 milliseconds (1/300 second).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Decimal">
            <summary>
            Fixed precision and scale numeric data from -10<sup>38</sup> +1 
            through 10<sup>38</sup> –1. 
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Float">
            <summary>
            Floating point numeric data.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Image">
            <summary>
            Large binary data.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Int">
            <summary>
            4-byte integer data.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Money">
            <summary>
            Values in the range from -922,337,203,685,477.5808 
            through +922,337,203,685,477.5807 (requires 8 bytes to store a value). 
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Numeric">
            <summary>
            Fixed precision and scale numeric data from -10<sup>38</sup> +1 
            through 10<sup>38</sup> –1. Functionally equivalent to Decimal.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.NChar">
            <summary>
            Fixed-length data in single-byte or multi-byte character set.
            If specified as nchar(N), N * @@ncharsize cannot exceed @@maxpagesize.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.NVarChar">
            <summary>
            Variable-length data in single-byte or multi-byte character set.
            If specified as nvarchar(N), N * @@ncharsize cannot exceed @@maxpagesize.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Real">
            <summary>
            Floating precision number data from 
            -3.40<sup>38</sup> through 3.40<sup>38</sup>.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.SmallDateTime">
            <summary>
            Date and time data from January 1, 1900, 
            through June 6, 2079.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.SmallInt">
            <summary>
            Integer data from 2<sup>15</sup> (-32,768) through 
            2<sup>15</sup> - 1 (32,767).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.SmallMoney">
            <summary>
            Values in the range from -214,748.3648 
            through 214,748.3647 (requires 4 bytes to store a value). 
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.SysName">
            <summary>
            System-supplied user-defined data type that is 
            used to reference database object names.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Text">
            <summary>
            Large character data.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Time">
            <summary>
            Time value that contains hour, minute and second 
            and milliseconds, with accuracy of 3.33 milliseconds.
            Only supported by ASE 12.5.1 and higher servers.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.Timestamp">
            <summary>
            Typically used as a mechanism for 
            version-stamping table rows. The storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UniChar">
            <summary>
            Fixed-length data in Unicode character set.
            If specified as unichar(N), N * 2 cannot exceed @@maxpagesize.
            Only supported by the servers using UTF-8 charset.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UniVarChar">
            <summary>
            Variable-length data in Unicode character set.
            If specified as univarchar(N), N * 2 cannot exceed @@maxpagesize.
            Only supported by the servers using UTF-8 charset.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.TinyInt">
            <summary>
            Integer data from 0 through 255.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.VarBinary">
            <summary>
            Variable-length stream of binary data.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.VarChar">
            <summary>
            Variable-length data in single-byte or multi-byte character set.
            If specified as varchar(N), N cannot exceed @@maxpagesize.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UniText">
            <summary>
            Variable-length UTF-16 encoded character data. Cannot exceed 1,073,741,823
            characters (2,147,483,646 bytes).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.BigInt">
            <summary>
            Integer data from -2<sup>63</sup> (-9,223,372,036,854,775,808)
            through 2<sup>63</sup> - 1 (9,223,372,036,854,775,807).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UnsignedSmallInt">
            <summary>
            Integer data from 0 through 65535 (2<sup>16</sup> - 1).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UnsignedInt">
            <summary>
            Integer data from 0 through 4,294,967,295 (2<sup>32</sup> - 1).
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseDbType.UnsignedBigInt">
            <summary>
            Integer data from 0 through 18,446,744,073,709,551,615
            (2<sup>64</sup> - 1).
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseError">
            <summary>
            Collects information relevant to errors and warnings 
            generated by the database server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.Message">
            <summary>
            Returns the error message text from the 
            database server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.Number">
            <summary>
            Returns the error number from the database server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.Class">
            <summary>
            Returns the severity level (1-25) of the error, 
            as supplied by the Sybase server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.LineNumber">
            <summary>
            Returns the line number within the Sybase stored
            procedure or batch that generated the error. If the statement does not 
            contain a batch or stored procedure, 0 is returned.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.Procedure">
            <summary>
            Returns the name of the stored procedure that 
            generated the error. If the statement did not include a stored procedure 
            or batch, NULL is returned.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseError.SQLState">
            <summary>
            Returns the SQL state associated with the
            current error condition.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseErrorCollection">
            <summary>
            Contains all of the errors generated by the Sybase server.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseErrorCollection.#ctor">
            <summary>
            Contains all of the errors generated by the Sybase server.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the SybaseError objects 
            from the ErrorCollection to the specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from the ErrorCollection. 
            The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseErrorCollection.GetEnumerator">
            <summary>
            Returns the IEnumerator interface for a given array.
            </summary>
            <returns>The IEnumerator interface for an array.</returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseErrorCollection.Count">
            <summary>
            Gets the number of Error objects 
            in the collection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseErrorCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether
            access to the ErrorCollection is thread-safe (synchronized).
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseErrorCollection.SyncRoot">
            <summary>
            Gets the object used to synchronize
            access to the data provider's ErrorCollection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseErrorCollection.Item(System.Int32)">
            <summary>
            Collects information relevant to errors and warnings 
            generated by the database server.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseEscapeTranslator">
            <summary>
            Translates standard SQL escapes into native format.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseEscapeTranslator.footprint">
            Fooprint information field
        </member>
        <member name="M:DDTek.Sybase.SybaseEscapeTranslator.#ctor(DDTek.Sybase.SybaseSession)">
            Constructor
        </member>
        <member name="M:DDTek.Sybase.SybaseEscapeTranslator.getTranslationNeeded(System.Int32)">
             Returns the translation needed for the specified escape type.
            
             The base implementation assumes the escape type must be translated.
             Derivatives must base their decision on the backend's capabilities.
            
             @return The translation needed for the specified escape type.  Legal
             return values are as follows:  NO_TRANSLATION_NEEDED, UNADORN_
             TRANSLATION_NEEDED, and FULL_TRANSLATION_NEEDED.
            
             @param escapeType - see CommonEscape for a list of valid escape types.
        </member>
        <member name="M:DDTek.Sybase.SybaseEscapeTranslator.translateCallEscape(DDInt.Common.CommonCallEscape)">
             Returns the translated call escape given semantic information obtained
             from the parse.
            
             @return Translated call escape or null if the escape cannot be
             translated.
            
             @param callEscape semantic information obtained from the parse
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDTek.Sybase.SybaseEscapeTranslator.translateFunctionEscape(DDInt.Common.CommonFunctionEscape)" -->
        <!-- Badly formed XML comment ignored for member "M:DDTek.Sybase.SybaseEscapeTranslator.translateTimestampEscape(DDInt.Common.CommonTimestampEscape)" -->
        <!-- Badly formed XML comment ignored for member "M:DDTek.Sybase.SybaseEscapeTranslator.insertOuterJoinOperator(System.Text.StringBuilder,System.Int32)" -->
        <member name="T:DDTek.Sybase.SybaseException">
            <summary>
            Returns the reason code when the Sybase server returns an error.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor that is invoked when the exception is recreated
            using a serialization stream.
            </summary>
            <param name="serializationInfo">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="serializationInfo">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.Errors">
            <summary>
            Returns a SybaseErrorCollection of one or more SybaseError 
            objects.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.Number">
            <summary>
            Returns the numeric value associated with a specific error.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.Class">
            <summary>
            Returns the severity level (1-25) of the error, 
            as supplied by the Sybase server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.LineNumber">
            <summary>
            Returns the line number within the Sybase stored
            procedure or batch that generated the error. If the statement does not 
            contain a batch or stored procedure, 0 is returned.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.Procedure">
            <summary>
            Returns the name of the stored procedure that 
            generated the error. If the statement did not include a stored procedure 
            or batch, NULL is returned.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.SQLState">
            <summary>
            Returns the SQL state associated with the
            current error condition.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseException.Message">
            <summary>
            Returns the error message for the exception.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseFactory">
            <summary>
            Summary description for SybaseFactory.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseInfoMessageEventArgs">
            <summary>
            Contains all the errors generated by the Sybase server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseInfoMessageEventArgs.Errors">
            <summary>
            Contains
            all the errors generated by the Sybase server.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseInfoMessageEventArgs.Message">
            <summary>
            Gets the full text of the message sent from the database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseInfoMessageEventArgs.Source">
            <summary>
            Gets the name of the object that generated the error.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollection.m_procedureText">
            This field contains the text of a stored procedure definition.  The
            value is used to determine a parameter's direction on servers that
            don't report it properly.
        </member>
        <!-- Badly formed XML comment ignored for member "M:DDTek.Sybase.SybaseMetaDataCollection.IsAlternateProcedureAvailable(DDTek.Sybase.SybaseAlternateProcedures)" -->
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.FormatParameter(System.String)">
            Returns a value formatted for use as a literal stored procedure parameter.
            The value is formatted by translating null values and escaping single
            quotation marks.
        </member>
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.FormatParameter(System.String,System.Boolean@)">
            Returns a value formatted for use as a literal stored procedure parameter.
            The value is formatted by translating null values and escaping single
            quotation marks.
            
            Also indicates by an output parameter if a valid wildcard character is present. 
            If true is returned, than some post-execute filtering may be required to
            eliminate spurious rows matched by the wildcard(s). Formerly, wildcards were
            ignored by escaping them. This did not work for identifiers that were close to
            or at the maximum length because the escape characters are counted against the
            identifier's length (cf DD00032125).
        </member>
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.GetViewDefinition(System.String)">
            This method obtains the text used to create the specified view.
        </member>
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.GetProcedureDefinition(System.String,System.String)">
            This method obtains the text used to create the specified stored procedure.
        </member>
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.ParseProcedureForParameterDirection(System.String)">
            This method parses the specified stored procedure definition to discover
            the direction of the specified parameter (e.g., input, output).
            
            This emulation is necessary because Sybase does not properly return
            parameter mode information as part of the sp_sproc_columns result set.
        </member>
        <member name="M:DDTek.Sybase.SybaseMetaDataCollection.GetParameterDirection(System.String,System.String,System.String,System.Object[],DDTek.Sybase.SybaseMetaDataCollection.CollectionType)">
            This method determines the direction of the specified parameter and then
            translates it for the appropriate collection.
            
            The "readerValues" result from a call to "sp_sproc_columns".  The values
            returned differ based on server revision.
        </member>
        <member name="T:DDTek.Sybase.SybaseMetaDataCollection.ParameterDirection">
            This enum provides a generic way to define parameter direction.
            The reported string values differ for VS.ParametersCollection and
            ProcedureParametersCollection.
        </member>
        <member name="T:DDTek.Sybase.SybaseMetaDataCollection.CollectionType">
            This enum provides a means by which data formatting methods can
            taylor metadata returned based on the class of the collection.
        </member>
        <member name="T:DDTek.Sybase.SybaseMetaDataCollectionNames">
            <summary>
            Provides a list of constants for the well-known MetaDataCollections: DataSourceInformation, DataTypes, MetaDataCollections, ReservedWords, and Restrictions.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Columns">
            <summary>
            A constant for use with the GetSchema method that represents the Columns collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.ForeignKeys">
            <summary>
            A constant for use with the GetSchema method that represents the ForeignKeys collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Indexes">
            <summary>
            A constant for use with the GetSchema method that represents the Indexes collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.PrimaryKeys">
            <summary>
            A constant for use with the GetSchema method that represents the PrimaryKeys collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Procedures">
            <summary>
            A constant for use with the GetSchema method that represents the Procedures collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.ProcedureParameters">
            <summary>
            Returns information about the parameters and return codes of procedures.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Schemata">
            <summary>
            Returns the schema objects that are owned by a given user.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Tables">
            <summary>
            A constant for use with the GetSchema method that represents the Tables collection.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.TablePrivileges">
            <summary>
            Identifies the privileges on tables defined in the catalog that are available to or granted by a given user.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseMetaDataCollectionNames.Views">
            <summary>
            A constant for use with the GetSchema method that represents the Views collection.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseParameter">
            <summary>
            Represents a parameter to a SybaseCommand.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor">
            <summary>
            Initializes a new instance of the SybaseParameter class.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,DDTek.Sybase.SybaseDbType)">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
            <param name="parameterName">The name of the SybaseParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the SybaseDbType.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,System.Object)">
            <summary>
            Gets or sets the name of the IDataParameter.
            </summary>
            <param name="parameterName">The name of the SybaseParameter. 
            The default is an empty string ("").</param>
            <param name="value">The value of the SybaseParameter.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,DDTek.Sybase.SybaseDbType,System.Int32)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the SybaseParameter.</param>
            <param name="dbType">The DbType of the parameter.</param>
            <param name="size">The size, in bytes, of the data within the column.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,DDTek.Sybase.SybaseDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the SybaseParameter class.
            </summary>
            <param name="parameterName">The name of the SybaseParameter.</param>
            <param name="dbType">The DbType of the parameter.</param>
            <param name="size">The size, in bytes, of the data within the column.</param>
            <param name="sourceColumn">The name of the source column that is mapped to 
            the DataSet and used for loading or returning the value.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,DDTek.Sybase.SybaseDbType,System.Int32,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the Parameter class.
            </summary>
            <param name="parameterName">The name of the SybaseParameter. 
            The default is an empty string ("").</param>
            <param name="dbType">The type of the OracleDbType.</param>
            <param name="size">The maximum size, in bytes,
            of the data within the column.</param>
            <param name="direction">A value that indicates whether the parameter 
            is input-only, output-only, bidirectional, or the return value parameter 
            of a stored procedure.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to use when loading Value.</param>
            <param name="sourceColumnNullMapping">The source column NULL mapping.</param>
            <param name="paramValue">The value of the parameter</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.#ctor(System.String,DDTek.Sybase.SybaseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the SybaseParameter class.
            </summary>
            <param name="parameterName">The name of the SybaseParameter.</param>
            <param name="dbType">The DbType of the parameter.</param>
            <param name="size">The size, in bytes, of the data within the column.</param>
            <param name="direction">Whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.</param>
            <param name="isNullable">Whether the parameter accepts null values.</param>
            <param name="precision">The maximum number of 
            digits used to represent the Value property.</param>
            <param name="scale">The number of decimal places 
            to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column that is mapped to 
            the DataSet and used for loading or returning the value.</param>
            <param name="sourceVersion">The DataRowVersion to 
            use when loading Value.</param>
            <param name="paramValue">The value of the SybaseParameter. </param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.System#ICloneable#Clone">
            <summary>
            Creates a copy of the instance.
            </summary>
            <returns>A SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameter.ToString">
            <summary>
            Returns the parameter name as a string representation of the parameter.
            </summary>
            <returns>The parameter name as a string 
            representation of the ParameterName. </returns>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.Direction">
            <summary>
            Gets or sets a value that indicates 
            whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates 
            whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.ParameterName">
            <summary>
            Gets or sets the name of the SybaseParameter object.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.SourceColumn">
            <summary>
            Gets or sets the name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.SourceVersion">
            <summary>
            Gets or sets the DataRowVersion to 
            use when loading Value.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <remarks>This property is specified as an array of values when array binding is enabled. 
            Each array's length must match the value of the ArrayBindCount property.
            
            To enable the use of streams as long data input parameters, 
            set the Value property to a specific instance of the stream. 
            </remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.DbType">
            <summary>
            Gets or sets the DbType of the parameter.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.SybaseDbType">
            <summary>
            Gets or sets the Sybase type of the parameter.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.Precision">
            <summary>
            Gets or sets the maximum number of 
            digits used to represent the Value property.
            </summary>
            <remarks>When using NUMERIC output parameters in a stored procedure, 
            you must supply the correct precision and scale.</remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.Scale">
            <summary>
            Gets or sets the number of decimal places 
            to which Value is resolved.
            </summary>
            <remarks>When using NUMERIC output parameters in a stored procedure, 
            you must supply the correct precision and scale.</remarks>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes,
            of the data within the column.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameter.ArrayBindStatus">
            <summary>
            Specifies whether parameter row values should be bound 
            as NULL. The length of the array must match the value set 
            in the ArrayBindCount property of the SybaseCommand.
            </summary>
            <remarks>When this property is not set, then no values are null.</remarks>
        </member>
        <member name="T:DDTek.Sybase.SybaseParameterStatus">
            <summary>
            Indicates parameter value status when using array binding.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseParameterStatus.OK">
            <summary>
            The operation succeeded. All entries are marked as OK.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseParameterStatus.Null">
            <summary>
            The operation failed. The data provider assigns this 
            value to all entries except for the row that caused 
            the failure. The exception thrown for the failed 
            operation reflects the error for the first row to fail.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseParameterCollection">
            <summary>
            Collects the parameters that are relevant to a SybaseCommand. The class 
            also represents the mapping of the parameters to the 
            columns in a DataSet.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified SybaseParameter to the 
            SybaseParameterCollection.
            </summary>
            <param name="value">The SybaseParameter to add to the collection.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(DDTek.Sybase.SybaseParameter)">
            <summary>
            Adds the specified SybaseParameter to the 
            SybaseParameterCollection.
            </summary>
            <param name="parameter">The SybaseParameter to add to the collection.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.String,DDTek.Sybase.SybaseDbType)">
            <summary>
            Adds a SybaseParameter to the SybaseCommand 
            given the parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="type">The data type of a parameter.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a SybaseParameter to the SybaseCommand 
            given the parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The Value of the SybaseParameter to add to the collection.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.String,DDTek.Sybase.SybaseDbType,System.Int32)">
            <summary>
            Adds a SybaseParameter to the SybaseCommand 
            given the parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The DbType.</param>
            <param name="size">The size of the parameter.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.String,DDTek.Sybase.SybaseDbType,System.Int32,System.String)">
            <summary>
            Adds a SybaseParameter to the SybaseCommand 
            given the parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">The DbType.</param>
            <param name="size">The size of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The new SybaseParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Add(System.String,DDTek.Sybase.SybaseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds the specified SybaseParameter to the 
            SybaseParameterCollection.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the SybaseDbType values.</param>
            <param name="size">The width of the column.</param>
            <param name="direction">A value that indicates 
            whether the parameter is input-only, output-only, bidirectional, or 
            the return value parameter of a stored procedure.</param>
            <param name="isNullable">A value that indicates 
            whether the parameter accepts null values.</param>
            <param name="precision">The maximum number of 
            digits used to represent the Value property.</param>
            <param name="scale">The number of decimal places 
            to which Value is resolved.</param>
            <param name="sourceColumn">The name of the 
            source column that is mapped to the DataSet and used for loading or 
            returning the Value.</param>
            <param name="sourceVersion">The DataRowVersion to 
            use when loading Value.</param>
            <param name="paramValue">The value of the parameter.</param>
            <returns>The new SybaseDbParameter object.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value that indicates whether a 
            SybaseParameter object exists in the collection.
            </summary>
            <param name="value">The name of the SybaseParameter 
            object to find.</param>
            <returns>true if the collection contains the SybaseParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Contains(DDTek.Sybase.SybaseParameter)">
            <summary>
            Gets a value that indicates whether a 
            SybaseParameter object exists in the collection.
            </summary>
            <param name="param">The name of the SybaseParameter 
            object to find.</param>
            <returns>true if the collection contains the SybaseParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Contains(System.String)">
            <summary>
            Gets a value that indicates whether a 
            SybaseParameter object exists in the collection.
            </summary>
            <param name="parameterName">The name of the SybaseParameter 
            object to find.</param>
            <returns>true if the collection contains the SybaseParameter; 
            otherwise, false.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies SybaseParameter objects from 
            the SybaseParameterCollection to a specified array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from the current Array.</param>
            <param name="index">The index in array at which copying begins.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.GetEnumerator">
            <summary>
            Returns the IEnumerator interface for a given array.
            </summary>
            <returns>The IEnumerator interface for an array.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the SybaseParameter 
            object within the collection.
            </summary>
            <param name="value">The name of the SybaseParameter 
            object to find.</param>
            <returns>The zero-based location of the SybaseParameter in the collection.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.IndexOf(DDTek.Sybase.SybaseParameter)">
            <summary>
            Gets the location of the SybaseParameter 
            object within the collection.
            </summary>
            <param name="param">The name of the SybaseParameter 
            object to find.</param>
            <returns>The zero-based location of the SybaseParameter in the collection.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the SybaseParameter 
            object within the collection.
            </summary>
            <param name="parameterName">The name of the SybaseParameter 
            object to find.</param>
            <returns>The zero-based location of the SybaseParameter in the collection.</returns>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a SybaseParameter object into the collection
            at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is 
            to be inserted within the collection.</param>
            <param name="value">The SybaseParameter to add to the collection.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Insert(System.Int32,DDTek.Sybase.SybaseParameter)">
            <summary>
            Inserts a SybaseParameter object into the collection
            at a specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is 
            to be inserted within the collection.</param>
            <param name="param">The SybaseParameter to add to the collection.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified SybaseParameter from 
            the collection.
            </summary>
            <param name="value">The SybaseParameter object to remove from 
            the collection.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.Remove(DDTek.Sybase.SybaseParameter)">
            <summary>
            Removes the specified SybaseParameter from 
            the collection.
            </summary>
            <param name="param">The SybaseParameter object to remove from 
            the collection.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the SybaseParameter object from 
            the collection.
            </summary>
            <param name="index">The name of the parameter to remove.</param>
        </member>
        <member name="M:DDTek.Sybase.SybaseParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the SybaseParameter object from 
            the collection.
            </summary>
            <param name="parameterName">The name of the parameter to remove.</param>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.Count">
            <summary>
            Gets the number of SybaseParameter 
            objects in the collection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether
            the SybaseParameterCollection has a fixed size.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates 
            whether the SybaseParameterCollection is thread-safe.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether 
            the SybaseParameterCollection is read-only.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.SyncRoot">
            <summary>
            Gets the object used to synchronize
            access to the SybaseParameterCollection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.Item(System.Int32)">
            <summary>
            Gets the 
            SybaseParameter at the specified index.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseParameterCollection.Item(System.String)">
            <summary>
            Gets the 
            SybaseParameter at the specified index.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybasePermission">
            <summary>
            The SybasePermission class enables the .NET Data Provider for Sybase to ensure that 
            a user has a security level adequate to access an Sybase database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybasePermission.#ctor">
            <summary>
            The SybasePermission class enables the Connect for .NET Sybase Provider 
            to ensure that a user has a security level sufficient to access an Sybase 
            database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybasePermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            The SybasePermission class enables the Connect for .NET Sybase Provider 
            to ensure that a user has a security level sufficient to access an Sybase 
            database.
            </summary>
            <param name="state">state: One of the 
            System.Security.Permissions.PermissionState values.</param>
        </member>
        <member name="T:DDTek.Sybase.SybasePermissionAttribute">
            <summary>
            The SybasePermissionAttribute object initializes a new instance of 
            the SybasePermissionAttribute class with one of the SecurityAction values.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybasePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Specifies the security actions that can be performed using 
            declarative security.
            </summary>
            <param name="action">One of the System.Security.Permissions.SecurityAction 
            values representing an action that can be performed using declarative security</param>
        </member>
        <member name="M:DDTek.Sybase.SybasePermissionAttribute.CreatePermission">
            <summary>
            The CreatePermission() method returns a SybasePermission object that is 
            configured according to the attribute properties.
            </summary>
            <returns>A SybasePermission object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DDTek.Sybase.SybaseSPInfo" -->
        <member name="T:DDTek.Sybase.SybaseStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.BAD_ISOLATION_LEVEL">
            <summary>
              Looks up a localized string similar to Invalid isolation level..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CANNOT_ESTABLISH_CONNECTION">
            <summary>
              Looks up a localized string similar to Sybase ASE server is unavailable or does not exist.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CANT_CLONE_WITH_ACTIVE_TRANSACTION">
            <summary>
              Looks up a localized string similar to Cannot have more than one active command per connection when in a transaction and the &apos;Clone Connection If Needed&apos; option is set to true. Consult the product documentation for additional guidance..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CANT_ESTABLISH_SSL_CONNECTION">
            <summary>
              Looks up a localized string similar to Cannot establish a secure SSL connection to the server host..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.COMMUNICATION_LINK_FAILURE">
            <summary>
              Looks up a localized string similar to Communication link failure..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.COMPUTE_BY_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to The COMPUTE BY clause is not supported..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CONFLICT_ADDRESS">
            <summary>
              Looks up a localized string similar to Specify a Host or a Server Name but not both..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CONNECTION_BUSY">
            <summary>
              Looks up a localized string similar to Connection is busy. Use larger FetchBufferSize or enable connection cloning.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.CONNECTION_FAILOVER">
            <summary>
              Looks up a localized string similar to The connection attempt has failed over to an alternate server..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.COUNTER_CATEGORY_DESCRIPTION">
            <summary>
              Looks up a localized string similar to Counters for DataDirect Connect for ADO.NET Sybase Data Provider.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ApplicationName">
            <summary>
              Looks up a localized string similar to This option can be used to set the program_name column in the sysprocesses table..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_AuthenticationMethod">
            <summary>
              Looks up a localized string similar to Specifies the Authentication method to be used when connecting to the data source..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_BatchUpdateParameterLimit">
            <summary>
              Looks up a localized string similar to Specifies the upper limit of parameters that may be contained in a set update with a batch update.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ClientHostName">
            <summary>
              Looks up a localized string similar to This option can be used to set the hostname column in the sysprocesses table..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_CloneConnectionIfNeeded">
            <summary>
              Looks up a localized string similar to When true, the data provider clones the existing connection if another active result set is not current possible on the existing Sybase connection..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_DatabaseName">
            <summary>
              Looks up a localized string similar to The name of the database to which you want to connect..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_EnableQuotedIdentifiers">
            <summary>
              Looks up a localized string similar to When true, quoted identifiers are enabled..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_EncryptionMethod">
            <summary>
              Looks up a localized string similar to Defines how the provider encrypts data between the provider and the data source..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_FetchBufferSize">
            <summary>
              Looks up a localized string similar to The amount of data (from 1 to 2147483647 bytes) to prefetch to the client machine when executing a statement that produces a result set. .
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_Host">
            <summary>
              Looks up a localized string similar to Either the name or the IP address of the Sybase server to which you want to connect..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_IncludeProcedureRowCount">
            <summary>
              Looks up a localized string similar to When true, the data provider counts the number of rows changed, inserted, or deleted by SQL statements executed within a stored procedure..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_InitializationString">
            <summary>
              Looks up a localized string similar to One or more Sybase commands that will be executed on connection to the database..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_InterfacesFile">
            <summary>
              Looks up a localized string similar to The fully-qualified path name or URL of the Interfaces file..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_LoadBalancing">
            <summary>
              Looks up a localized string similar to When true, client load balancing is used in attempts to connect to primary and alternate database servers..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_PacketSize">
            <summary>
              Looks up a localized string similar to When set to -1, the Sybase data provider computes the maximum allowable packet size. When set to 0, the Sybase data provider uses the default packet size specified in the Sybase server configuration. When set to x, the Sybase data provider uses an integer from 1 to 1024, which indicates a multiple of 512 bytes (for example, PacketSize=6 means to set the packet size to 6 * 512 = 3072 bytes)..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_Password">
            <summary>
              Looks up a localized string similar to A case-insensitive password used to connect to your Sybase database..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_Port">
            <summary>
              Looks up a localized string similar to The TCP port of the Sybase listener running on the Sybase database..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ProgramID">
            <summary>
              Looks up a localized string similar to This option can be used to set the hostprocess column in the sysprocesses table..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ReaderCloseBehavior">
            <summary>
              Looks up a localized string similar to When set to 0, a Cancel is sent to prevent the server from sending additional rows when Close() is called and the result set has not been fully processed. This value is ignored when the command is a stored procedure..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_SelectMethod">
            <summary>
              Looks up a localized string similar to When set to Cursor, server-side database cursors are used. When set to Direct, Select statements are issued without using server-side database cursors..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ServerName">
            <summary>
              Looks up a localized string similar to Used to specify the name of the section in the Interfaces file that contains the network connection information for the Sybase database you want to access..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_ServicePrincipalName">
            <summary>
              Looks up a localized string similar to Specifies the Service Principal Name and Realm for the Sybase server for Kerberos Authentication.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_TCPNoDelay">
            <summary>
              Looks up a localized string similar to Specifies the TCP_NO_DELAY Socket property .
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_TextSize">
            <summary>
              Looks up a localized string similar to The number of bytes of data (from 1 to 247483647) that can be returned from any single TEXT or IMAGE column in a result set. .
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_TightlyCoupledTransactions">
            <summary>
              Looks up a localized string similar to When set to true, the data provider uses tightly coupled transactions; multiple connections within the same distributed transaction do not obey each other’s locks. Use of this property requires a Sybase database version 12.0 or higher..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_UserID">
            <summary>
              Looks up a localized string similar to The default user name used to connect to your Sybase database..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.Description_WorkArounds">
            <summary>
              Looks up a localized string similar to Use this field only when instructed by DataDirect Technical Support. .
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.DISTRIBUTED_TRANSACTIONS_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to Distributed transactions are not supported for this version of the database..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.ERROR_NEGOTIATED_LOGON">
            <summary>
              Looks up a localized string similar to Error during negotiated logon.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.NAME_BINDING_UNSUPPORTED">
            <summary>
              Looks up a localized string similar to A stored procedure may not be called if the &apos;Parameter Mode&apos; option is set to &apos;NativeByName&apos; for server verisons &lt; 12.x.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.NEED_USER_ID">
            <summary>
              Looks up a localized string similar to Need database user ID in connection string.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.NO_INTERFACE_FILE">
            <summary>
              Looks up a localized string similar to Unable to locate the Interfaces File..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.NO_SERVER_NAME">
            <summary>
              Looks up a localized string similar to Unable to located the Server Name in the Interfaces File..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.NULL_BIT_COLUMN">
            <summary>
              Looks up a localized string similar to NULL is not allowed for bit columns.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.PARAMETER_TOO_LONG">
            <summary>
              Looks up a localized string similar to Parameter {0} is longer than 255 bytes.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.PARAMETERS_NOT_ENOUGH">
            <summary>
              Looks up a localized string similar to Not enough parameters in the collection.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.SOURCE_NAME">
            <summary>
              Looks up a localized string similar to DataDirect Connect for ADO.NET Sybase Data Provider.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.SSL_HANDSHAKE_FAILED">
            <summary>
              Looks up a localized string similar to SSL Handshake failed..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.TIME_OUT">
            <summary>
              Looks up a localized string similar to Unable to receive data from server before time-out occurs..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.TIME_OUT_NO_CANCEL">
            <summary>
              Looks up a localized string similar to Time-out occurs but unable to cancel command on server..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.UNHANDLED_DATA_TYPE">
            <summary>
              Looks up a localized string similar to Unhandled data type: {0}.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.UNHANDLED_TOKEN_TYPE">
            <summary>
              Looks up a localized string similar to Unhandled token type: {0}.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.UNSUPPORTED_AUTHENTICATION_METHOD">
            <summary>
              Looks up a localized string similar to The value specified for the authentication method was not recognized..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.UNSUPPORTED_ENCRYPTION_METHOD">
            <summary>
              Looks up a localized string similar to The value specified for the encryption method was not recognized..
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.UNSUPPORTED_TYPE_FOR_BLOB">
            <summary>
              Looks up a localized string similar to Only string, byte[] and stream are supported for BLOB.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseStrings.USER_CANCEL_OPERATION">
            <summary>
              Looks up a localized string similar to Operation cancelled by user..
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseTrace">
            <summary>
            Provides a set of methods and properties that help you to trace the execution of your code. 
            The data provider can trace all of its method calls and the returns from those
            method calls to a trace file specified by the user.
            </summary>
            <remarks>
            Setting EnableTrace starts the tracing process. Therefore, 
            you must define the property values for the trace file 
            before setting EnableTrace. Once the trace processing 
            starts, the values of TraceFile and RecreateTrace cannot 
            be changed.
            </remarks>
        </member>
        <member name="M:DDTek.Sybase.SybaseTrace.DumpFootprints">
            <summary>
            Displays the footprint of all source files
            in a data provider.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseTrace.EnableTrace">
            <summary>
            Enables tracing. By default, tracing is not enabled. 
            </summary>
            <remarks>
            Setting EnableTrace starts the tracing process. 
            Therefore, you must define the property values for 
            the trace file before setting EnableTrace. Once the 
            trace processing starts, the values of TraceFile and 
            RecreateTrace cannot be changed.
            </remarks>
            
        </member>
        <member name="P:DDTek.Sybase.SybaseTrace.TraceFile">
            <summary>
            Specifies the path and name of the trace file. 
            The initial default is \SybaseTrace.txt.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DDTek.Sybase.SybaseTrace.RecreateTrace" -->
        <member name="T:DDTek.Sybase.SybaseTransaction">
            <summary>
            Represents the transaction that will be 
            performed on a database using the Sybase data provider.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseTransaction.Commit">
            <summary>
            Completes a transaction. Modifications made during a transaction 
            become a permanent part of the database.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.SybaseTransaction.Rollback">
            <summary>
            Cancels modifications made during a transaction, and  
            no changes are made to the database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseTransaction.Connection">
            <summary>
            Represents an open connection to a Sybase database.
            </summary>
        </member>
        <member name="P:DDTek.Sybase.SybaseTransaction.IsolationLevel">
            <summary>
            Defines the isolation level for the entire transaction.
            If the value is changed, the new value is used at execution time.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.SybaseUtility">
            <summary>
            SybaseUtility is a collection of static functions and constant
            defines that are unique to the Sybase provider.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XA_DTM_STAT_NEW">
            Status values retained in DTM transaction status
            Sent and returned by all RPC's
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XA_DTM_STAT_COMMIT">
            The following values are used at transaction completion
            They should never appear in an active transaction status
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XA_DTM_STAT_QUERYING">
            XA_DTM_STAT_QUERYING is an intermediate value set when
            the status is being retrieved.  True status should be
            replaced immediately
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XA_DTM_1_RESULT">
            Result handling return values
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XACTFL_NOFLAG">
            Transaction Manager Flag Values
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.XACTRV_RM_ERR">
            Transaction Manager Return Values.
            Transaction manager returns non-negative values if the API executes
            successfully.
        </member>
        <member name="F:DDTek.Sybase.SybaseXARequest.TMENDRSCAN">
            Constants defined by XA standard
        </member>
        <member name="M:DDTek.Sybase.SybaseXARequest.executeRPC(System.String)">
            Execute a procedure as an RPC
        </member>
        <member name="M:DDTek.Sybase.SybaseXARequest.VerifyReturnCode(System.String,System.Int32)">
            Verify the return code of stored procedures and generate appropriate
            XA exception if necessary. 
        </member>
        <member name="T:DDTek.Sybase.SybaseXAResource">
            <summary>
            Summary description for SybaseXAResource.
            </summary>
        </member>
        <member name="F:DDTek.Sybase.SybaseXAResource.XA_START">
            Constants defined in DTC.dll
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDS">
            <summary>
            Summary description for SybaseTDS.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSBatchedExecuteRequest">
            <summary>
            Summary description for SybaseTDSBatchedExecuteRequest.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSExecuteRequest">
            <summary>
            Summary description for SybaseTDSExecuteRequest.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSRequest">
            <summary>
            Summary description for SybaseTDSRequest.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSExecuteRequest.execute">
            This method encapsulates the details of executing
            a SQL statement.
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSExecuteRequest.formulateRequest">
            This method composes the request
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSBatchedRPCRequest">
            <summary>
            Summary description for SybaseTDSBatchedRPCRequest.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSRPCRequest">
            <summary>
            Summary description for SybaseTDSRPCRequest.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSRPCRequest.execute">
            This method encapsulates the details of making an RPC call
            to the server.
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSCancelRequest">
            <summary>
            Summary description for SybaseTDSCancelRequest.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSCommunication">
            <summary>
            Summary description for SybaseTDSCommunication.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSCursorRequest">
            <summary>
            Summary description for SybaseTDSCursorRequest.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSCursorRequest.execute">
            Open a read-only server-side cursor. It declares a cursor, open it,
            process the reply and then set cursor fetch count. Finally, it send
            a fetch request, just like in direct mode, some rows will be returned
            from server and wait in the reply channel to be processed.
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSCursorRequest.getRow">
            Fetch a row in cursor mode. If no row available in the current reply channel,
            send a new fetch request and check again. If it still has no row, the end
            of result set has been reached.
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSCursorRequest.Close">
            Close the cursor
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSCursorRequest.processReplyToken(System.Byte)">
            This method encapsulates the details of interpreting the
            reply to a cursor request.
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSCursorRequest.formulateRequest">
            This method composes the request
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSLOB">
            <summary>
            Summary description for SybaseTDSLOB.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSLoginRequest">
            <summary>
            Summary description for SybaseTDSLoginRequest.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSLogoutRequest">
            <summary>
            Summary description for SybaseTDSLogoutRequest.
            </summary>
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSLogoutRequest.#ctor(DDTek.Sybase.Tds.SybaseTDSCommunication)">
            Primary constructor, allowing specification of the 
            communications object to use for the request
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSLogoutRequest.execute">
            This method encapsulates the details of constructing and
            submitting a login request.
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSOptionCmdRequest">
            This class implements the details of getting/setting server options via the
            SybaseTDS.OPTIONCMD token.  It extends and uses the SybaseTDSRequest class.
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSOptionCmdRequest.setOption(System.Byte,System.Object)">
            This method encapsulates the details of setting a server option
            via the SybaseTDS.OPTIONCMD token
        </member>
        <member name="M:DDTek.Sybase.Tds.SybaseTDSOptionCmdRequest.formulateRequest">
            This method encapsulates the details of setting a server option
            via the SybaseTDS.OPTIONCMD token
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSParser">
            <summary>
            This class will eventually be exclusively used to process replies from the
            Sybase server.
            
            Currently, SybaseTDSRequest (and its derivatives) contain both request
            reading and writing functionality. Combining these has proven problematic
            (as in the case with the bulk and batch implementations). Separating these
            into two distinct functional components will increase flexibility.
            
            Creating this class and using it in the bulk case is a step toward this
            ultimate goal.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSReader">
            <summary>
            Summary description for SybaseTDSReader.
            </summary>
        </member>
        <member name="T:DDTek.Sybase.Tds.SybaseTDSWriter">
            <summary>
            Summary description for SybaseTDSWriter.
            </summary>
        </member>
    </members>
</doc>
